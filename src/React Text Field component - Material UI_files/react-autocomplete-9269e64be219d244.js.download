(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[47185],{698458:function(e){e.exports=(()=>{return e={772:(e,t,n)=>{const a=n(826).remove,o=/[.*+?^${}()|[\]\\]/g,i=/[a-z0-9_]/i,l=/\s+/;e.exports=function(e,t,n){var r,s;s={insideWords:!1,findAllOccurrences:!1,requireMatchAll:!1},r=(r=n)||{},Object.keys(r).forEach((e=>{s[e]=!!r[e]})),n=s;const p=Array.from(e).map((e=>a(e)));let c=p.join("");return(t=a(t)).trim().split(l).filter((e=>e.length>0)).reduce(((e,t)=>{const a=t.length,l=!n.insideWords&&i.test(t[0])?"\\b":"",r=new RegExp(l+t.replace(o,"\\$&"),"i");let s,d;if(s=r.exec(c),n.requireMatchAll&&null===s)return c="",[];for(;s;){d=s.index;const t=a-p.slice(d,d+a).join("").length,o=d-p.slice(0,d).join("").length,i=[d+o,d+a+o+t];if(i[0]!==i[1]&&e.push(i),c=c.slice(0,d)+new Array(a+1).join(" ")+c.slice(d+a),!n.findAllOccurrences)break;s=r.exec(c)}return e}),[]).sort(((e,t)=>e[0]-t[0]))}},826:e=>{var t={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\u1ea4":"A","\u1eae":"A","\u1eb2":"A","\u1eb4":"A","\u1eb6":"A","\xc6":"AE","\u1ea6":"A","\u1eb0":"A","\u0202":"A","\xc7":"C","\u1e08":"C","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\u1ebe":"E","\u1e16":"E","\u1ec0":"E","\u1e14":"E","\u1e1c":"E","\u0206":"E","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\u1e2e":"I","\u020a":"I","\xd0":"D","\xd1":"N","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\u1ed0":"O","\u1e4c":"O","\u1e52":"O","\u020e":"O","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xdd":"Y","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\u1ea5":"a","\u1eaf":"a","\u1eb3":"a","\u1eb5":"a","\u1eb7":"a","\xe6":"ae","\u1ea7":"a","\u1eb1":"a","\u0203":"a","\xe7":"c","\u1e09":"c","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\u1ebf":"e","\u1e17":"e","\u1ec1":"e","\u1e15":"e","\u1e1d":"e","\u0207":"e","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\u1e2f":"i","\u020b":"i","\xf0":"d","\xf1":"n","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\u1ed1":"o","\u1e4d":"o","\u1e53":"o","\u020f":"o","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xfd":"y","\xff":"y","\u0100":"A","\u0101":"a","\u0102":"A","\u0103":"a","\u0104":"A","\u0105":"a","\u0106":"C","\u0107":"c","\u0108":"C","\u0109":"c","\u010a":"C","\u010b":"c","\u010c":"C","\u010d":"c","C\u0306":"C","c\u0306":"c","\u010e":"D","\u010f":"d","\u0110":"D","\u0111":"d","\u0112":"E","\u0113":"e","\u0114":"E","\u0115":"e","\u0116":"E","\u0117":"e","\u0118":"E","\u0119":"e","\u011a":"E","\u011b":"e","\u011c":"G","\u01f4":"G","\u011d":"g","\u01f5":"g","\u011e":"G","\u011f":"g","\u0120":"G","\u0121":"g","\u0122":"G","\u0123":"g","\u0124":"H","\u0125":"h","\u0126":"H","\u0127":"h","\u1e2a":"H","\u1e2b":"h","\u0128":"I","\u0129":"i","\u012a":"I","\u012b":"i","\u012c":"I","\u012d":"i","\u012e":"I","\u012f":"i","\u0130":"I","\u0131":"i","\u0132":"IJ","\u0133":"ij","\u0134":"J","\u0135":"j","\u0136":"K","\u0137":"k","\u1e30":"K","\u1e31":"k","K\u0306":"K","k\u0306":"k","\u0139":"L","\u013a":"l","\u013b":"L","\u013c":"l","\u013d":"L","\u013e":"l","\u013f":"L","\u0140":"l","\u0141":"l","\u0142":"l","\u1e3e":"M","\u1e3f":"m","M\u0306":"M","m\u0306":"m","\u0143":"N","\u0144":"n","\u0145":"N","\u0146":"n","\u0147":"N","\u0148":"n","\u0149":"n","N\u0306":"N","n\u0306":"n","\u014c":"O","\u014d":"o","\u014e":"O","\u014f":"o","\u0150":"O","\u0151":"o","\u0152":"OE","\u0153":"oe","P\u0306":"P","p\u0306":"p","\u0154":"R","\u0155":"r","\u0156":"R","\u0157":"r","\u0158":"R","\u0159":"r","R\u0306":"R","r\u0306":"r","\u0212":"R","\u0213":"r","\u015a":"S","\u015b":"s","\u015c":"S","\u015d":"s","\u015e":"S","\u0218":"S","\u0219":"s","\u015f":"s","\u0160":"S","\u0161":"s","\u0162":"T","\u0163":"t","\u021b":"t","\u021a":"T","\u0164":"T","\u0165":"t","\u0166":"T","\u0167":"t","T\u0306":"T","t\u0306":"t","\u0168":"U","\u0169":"u","\u016a":"U","\u016b":"u","\u016c":"U","\u016d":"u","\u016e":"U","\u016f":"u","\u0170":"U","\u0171":"u","\u0172":"U","\u0173":"u","\u0216":"U","\u0217":"u","V\u0306":"V","v\u0306":"v","\u0174":"W","\u0175":"w","\u1e82":"W","\u1e83":"w","X\u0306":"X","x\u0306":"x","\u0176":"Y","\u0177":"y","\u0178":"Y","Y\u0306":"Y","y\u0306":"y","\u0179":"Z","\u017a":"z","\u017b":"Z","\u017c":"z","\u017d":"Z","\u017e":"z","\u017f":"s","\u0192":"f","\u01a0":"O","\u01a1":"o","\u01af":"U","\u01b0":"u","\u01cd":"A","\u01ce":"a","\u01cf":"I","\u01d0":"i","\u01d1":"O","\u01d2":"o","\u01d3":"U","\u01d4":"u","\u01d5":"U","\u01d6":"u","\u01d7":"U","\u01d8":"u","\u01d9":"U","\u01da":"u","\u01db":"U","\u01dc":"u","\u1ee8":"U","\u1ee9":"u","\u1e78":"U","\u1e79":"u","\u01fa":"A","\u01fb":"a","\u01fc":"AE","\u01fd":"ae","\u01fe":"O","\u01ff":"o","\xde":"TH","\xfe":"th","\u1e54":"P","\u1e55":"p","\u1e64":"S","\u1e65":"s","X\u0301":"X","x\u0301":"x","\u0403":"\u0413","\u0453":"\u0433","\u040c":"\u041a","\u045c":"\u043a","A\u030b":"A","a\u030b":"a","E\u030b":"E","e\u030b":"e","I\u030b":"I","i\u030b":"i","\u01f8":"N","\u01f9":"n","\u1ed2":"O","\u1ed3":"o","\u1e50":"O","\u1e51":"o","\u1eea":"U","\u1eeb":"u","\u1e80":"W","\u1e81":"w","\u1ef2":"Y","\u1ef3":"y","\u0200":"A","\u0201":"a","\u0204":"E","\u0205":"e","\u0208":"I","\u0209":"i","\u020c":"O","\u020d":"o","\u0210":"R","\u0211":"r","\u0214":"U","\u0215":"u","B\u030c":"B","b\u030c":"b","\u010c\u0323":"C","\u010d\u0323":"c","\xca\u030c":"E","\xea\u030c":"e","F\u030c":"F","f\u030c":"f","\u01e6":"G","\u01e7":"g","\u021e":"H","\u021f":"h","J\u030c":"J","\u01f0":"j","\u01e8":"K","\u01e9":"k","M\u030c":"M","m\u030c":"m","P\u030c":"P","p\u030c":"p","Q\u030c":"Q","q\u030c":"q","\u0158\u0329":"R","\u0159\u0329":"r","\u1e66":"S","\u1e67":"s","V\u030c":"V","v\u030c":"v","W\u030c":"W","w\u030c":"w","X\u030c":"X","x\u030c":"x","Y\u030c":"Y","y\u030c":"y","A\u0327":"A","a\u0327":"a","B\u0327":"B","b\u0327":"b","\u1e10":"D","\u1e11":"d","\u0228":"E","\u0229":"e","\u0190\u0327":"E","\u025b\u0327":"e","\u1e28":"H","\u1e29":"h","I\u0327":"I","i\u0327":"i","\u0197\u0327":"I","\u0268\u0327":"i","M\u0327":"M","m\u0327":"m","O\u0327":"O","o\u0327":"o","Q\u0327":"Q","q\u0327":"q","U\u0327":"U","u\u0327":"u","X\u0327":"X","x\u0327":"x","Z\u0327":"Z","z\u0327":"z"},n=Object.keys(t).join("|"),a=new RegExp(n,"g"),o=new RegExp(n,""),i=function(e){return e.replace(a,(function(e){return t[e]}))};e.exports=i,e.exports.has=function(e){return!!e.match(o)},e.exports.remove=i}},t={},function n(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}(772);var e,t})()},999521:function(e){e.exports=(()=>{return e={705:e=>{e.exports=function(e,t){const n=[];return 0===t.length?n.push({text:e,highlight:!1}):t[0][0]>0&&n.push({text:e.slice(0,t[0][0]),highlight:!1}),t.forEach(((a,o)=>{const i=a[0],l=a[1];n.push({text:e.slice(i,l),highlight:!0}),o===t.length-1?l<e.length&&n.push({text:e.slice(l,e.length),highlight:!1}):l<t[o+1][0]&&n.push({text:e.slice(l,t[o+1][0]),highlight:!1})})),n}}},t={},function n(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}(705);var e,t})()},498731:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return gt}});var a=n(827378),o=n(494616),i=n(295649),l=n(25778),r=n(267414),s=n(760489),p=n(568075),c=n(824246);var d=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],h=n(375205);var u=[{code:"AD",label:"Andorra",phone:"376"},{code:"AE",label:"United Arab Emirates",phone:"971"},{code:"AF",label:"Afghanistan",phone:"93"},{code:"AG",label:"Antigua and Barbuda",phone:"1-268"},{code:"AI",label:"Anguilla",phone:"1-264"},{code:"AL",label:"Albania",phone:"355"},{code:"AM",label:"Armenia",phone:"374"},{code:"AO",label:"Angola",phone:"244"},{code:"AQ",label:"Antarctica",phone:"672"},{code:"AR",label:"Argentina",phone:"54"},{code:"AS",label:"American Samoa",phone:"1-684"},{code:"AT",label:"Austria",phone:"43"},{code:"AU",label:"Australia",phone:"61",suggested:!0},{code:"AW",label:"Aruba",phone:"297"},{code:"AX",label:"Alland Islands",phone:"358"},{code:"AZ",label:"Azerbaijan",phone:"994"},{code:"BA",label:"Bosnia and Herzegovina",phone:"387"},{code:"BB",label:"Barbados",phone:"1-246"},{code:"BD",label:"Bangladesh",phone:"880"},{code:"BE",label:"Belgium",phone:"32"},{code:"BF",label:"Burkina Faso",phone:"226"},{code:"BG",label:"Bulgaria",phone:"359"},{code:"BH",label:"Bahrain",phone:"973"},{code:"BI",label:"Burundi",phone:"257"},{code:"BJ",label:"Benin",phone:"229"},{code:"BL",label:"Saint Barthelemy",phone:"590"},{code:"BM",label:"Bermuda",phone:"1-441"},{code:"BN",label:"Brunei Darussalam",phone:"673"},{code:"BO",label:"Bolivia",phone:"591"},{code:"BR",label:"Brazil",phone:"55"},{code:"BS",label:"Bahamas",phone:"1-242"},{code:"BT",label:"Bhutan",phone:"975"},{code:"BV",label:"Bouvet Island",phone:"47"},{code:"BW",label:"Botswana",phone:"267"},{code:"BY",label:"Belarus",phone:"375"},{code:"BZ",label:"Belize",phone:"501"},{code:"CA",label:"Canada",phone:"1",suggested:!0},{code:"CC",label:"Cocos (Keeling) Islands",phone:"61"},{code:"CD",label:"Congo, Democratic Republic of the",phone:"243"},{code:"CF",label:"Central African Republic",phone:"236"},{code:"CG",label:"Congo, Republic of the",phone:"242"},{code:"CH",label:"Switzerland",phone:"41"},{code:"CI",label:"Cote d'Ivoire",phone:"225"},{code:"CK",label:"Cook Islands",phone:"682"},{code:"CL",label:"Chile",phone:"56"},{code:"CM",label:"Cameroon",phone:"237"},{code:"CN",label:"China",phone:"86"},{code:"CO",label:"Colombia",phone:"57"},{code:"CR",label:"Costa Rica",phone:"506"},{code:"CU",label:"Cuba",phone:"53"},{code:"CV",label:"Cape Verde",phone:"238"},{code:"CW",label:"Curacao",phone:"599"},{code:"CX",label:"Christmas Island",phone:"61"},{code:"CY",label:"Cyprus",phone:"357"},{code:"CZ",label:"Czech Republic",phone:"420"},{code:"DE",label:"Germany",phone:"49",suggested:!0},{code:"DJ",label:"Djibouti",phone:"253"},{code:"DK",label:"Denmark",phone:"45"},{code:"DM",label:"Dominica",phone:"1-767"},{code:"DO",label:"Dominican Republic",phone:"1-809"},{code:"DZ",label:"Algeria",phone:"213"},{code:"EC",label:"Ecuador",phone:"593"},{code:"EE",label:"Estonia",phone:"372"},{code:"EG",label:"Egypt",phone:"20"},{code:"EH",label:"Western Sahara",phone:"212"},{code:"ER",label:"Eritrea",phone:"291"},{code:"ES",label:"Spain",phone:"34"},{code:"ET",label:"Ethiopia",phone:"251"},{code:"FI",label:"Finland",phone:"358"},{code:"FJ",label:"Fiji",phone:"679"},{code:"FK",label:"Falkland Islands (Malvinas)",phone:"500"},{code:"FM",label:"Micronesia, Federated States of",phone:"691"},{code:"FO",label:"Faroe Islands",phone:"298"},{code:"FR",label:"France",phone:"33",suggested:!0},{code:"GA",label:"Gabon",phone:"241"},{code:"GB",label:"United Kingdom",phone:"44"},{code:"GD",label:"Grenada",phone:"1-473"},{code:"GE",label:"Georgia",phone:"995"},{code:"GF",label:"French Guiana",phone:"594"},{code:"GG",label:"Guernsey",phone:"44"},{code:"GH",label:"Ghana",phone:"233"},{code:"GI",label:"Gibraltar",phone:"350"},{code:"GL",label:"Greenland",phone:"299"},{code:"GM",label:"Gambia",phone:"220"},{code:"GN",label:"Guinea",phone:"224"},{code:"GP",label:"Guadeloupe",phone:"590"},{code:"GQ",label:"Equatorial Guinea",phone:"240"},{code:"GR",label:"Greece",phone:"30"},{code:"GS",label:"South Georgia and the South Sandwich Islands",phone:"500"},{code:"GT",label:"Guatemala",phone:"502"},{code:"GU",label:"Guam",phone:"1-671"},{code:"GW",label:"Guinea-Bissau",phone:"245"},{code:"GY",label:"Guyana",phone:"592"},{code:"HK",label:"Hong Kong",phone:"852"},{code:"HM",label:"Heard Island and McDonald Islands",phone:"672"},{code:"HN",label:"Honduras",phone:"504"},{code:"HR",label:"Croatia",phone:"385"},{code:"HT",label:"Haiti",phone:"509"},{code:"HU",label:"Hungary",phone:"36"},{code:"ID",label:"Indonesia",phone:"62"},{code:"IE",label:"Ireland",phone:"353"},{code:"IL",label:"Israel",phone:"972"},{code:"IM",label:"Isle of Man",phone:"44"},{code:"IN",label:"India",phone:"91"},{code:"IO",label:"British Indian Ocean Territory",phone:"246"},{code:"IQ",label:"Iraq",phone:"964"},{code:"IR",label:"Iran, Islamic Republic of",phone:"98"},{code:"IS",label:"Iceland",phone:"354"},{code:"IT",label:"Italy",phone:"39"},{code:"JE",label:"Jersey",phone:"44"},{code:"JM",label:"Jamaica",phone:"1-876"},{code:"JO",label:"Jordan",phone:"962"},{code:"JP",label:"Japan",phone:"81",suggested:!0},{code:"KE",label:"Kenya",phone:"254"},{code:"KG",label:"Kyrgyzstan",phone:"996"},{code:"KH",label:"Cambodia",phone:"855"},{code:"KI",label:"Kiribati",phone:"686"},{code:"KM",label:"Comoros",phone:"269"},{code:"KN",label:"Saint Kitts and Nevis",phone:"1-869"},{code:"KP",label:"Korea, Democratic People's Republic of",phone:"850"},{code:"KR",label:"Korea, Republic of",phone:"82"},{code:"KW",label:"Kuwait",phone:"965"},{code:"KY",label:"Cayman Islands",phone:"1-345"},{code:"KZ",label:"Kazakhstan",phone:"7"},{code:"LA",label:"Lao People's Democratic Republic",phone:"856"},{code:"LB",label:"Lebanon",phone:"961"},{code:"LC",label:"Saint Lucia",phone:"1-758"},{code:"LI",label:"Liechtenstein",phone:"423"},{code:"LK",label:"Sri Lanka",phone:"94"},{code:"LR",label:"Liberia",phone:"231"},{code:"LS",label:"Lesotho",phone:"266"},{code:"LT",label:"Lithuania",phone:"370"},{code:"LU",label:"Luxembourg",phone:"352"},{code:"LV",label:"Latvia",phone:"371"},{code:"LY",label:"Libya",phone:"218"},{code:"MA",label:"Morocco",phone:"212"},{code:"MC",label:"Monaco",phone:"377"},{code:"MD",label:"Moldova, Republic of",phone:"373"},{code:"ME",label:"Montenegro",phone:"382"},{code:"MF",label:"Saint Martin (French part)",phone:"590"},{code:"MG",label:"Madagascar",phone:"261"},{code:"MH",label:"Marshall Islands",phone:"692"},{code:"MK",label:"Macedonia, the Former Yugoslav Republic of",phone:"389"},{code:"ML",label:"Mali",phone:"223"},{code:"MM",label:"Myanmar",phone:"95"},{code:"MN",label:"Mongolia",phone:"976"},{code:"MO",label:"Macao",phone:"853"},{code:"MP",label:"Northern Mariana Islands",phone:"1-670"},{code:"MQ",label:"Martinique",phone:"596"},{code:"MR",label:"Mauritania",phone:"222"},{code:"MS",label:"Montserrat",phone:"1-664"},{code:"MT",label:"Malta",phone:"356"},{code:"MU",label:"Mauritius",phone:"230"},{code:"MV",label:"Maldives",phone:"960"},{code:"MW",label:"Malawi",phone:"265"},{code:"MX",label:"Mexico",phone:"52"},{code:"MY",label:"Malaysia",phone:"60"},{code:"MZ",label:"Mozambique",phone:"258"},{code:"NA",label:"Namibia",phone:"264"},{code:"NC",label:"New Caledonia",phone:"687"},{code:"NE",label:"Niger",phone:"227"},{code:"NF",label:"Norfolk Island",phone:"672"},{code:"NG",label:"Nigeria",phone:"234"},{code:"NI",label:"Nicaragua",phone:"505"},{code:"NL",label:"Netherlands",phone:"31"},{code:"NO",label:"Norway",phone:"47"},{code:"NP",label:"Nepal",phone:"977"},{code:"NR",label:"Nauru",phone:"674"},{code:"NU",label:"Niue",phone:"683"},{code:"NZ",label:"New Zealand",phone:"64"},{code:"OM",label:"Oman",phone:"968"},{code:"PA",label:"Panama",phone:"507"},{code:"PE",label:"Peru",phone:"51"},{code:"PF",label:"French Polynesia",phone:"689"},{code:"PG",label:"Papua New Guinea",phone:"675"},{code:"PH",label:"Philippines",phone:"63"},{code:"PK",label:"Pakistan",phone:"92"},{code:"PL",label:"Poland",phone:"48"},{code:"PM",label:"Saint Pierre and Miquelon",phone:"508"},{code:"PN",label:"Pitcairn",phone:"870"},{code:"PR",label:"Puerto Rico",phone:"1"},{code:"PS",label:"Palestine, State of",phone:"970"},{code:"PT",label:"Portugal",phone:"351"},{code:"PW",label:"Palau",phone:"680"},{code:"PY",label:"Paraguay",phone:"595"},{code:"QA",label:"Qatar",phone:"974"},{code:"RE",label:"Reunion",phone:"262"},{code:"RO",label:"Romania",phone:"40"},{code:"RS",label:"Serbia",phone:"381"},{code:"RU",label:"Russian Federation",phone:"7"},{code:"RW",label:"Rwanda",phone:"250"},{code:"SA",label:"Saudi Arabia",phone:"966"},{code:"SB",label:"Solomon Islands",phone:"677"},{code:"SC",label:"Seychelles",phone:"248"},{code:"SD",label:"Sudan",phone:"249"},{code:"SE",label:"Sweden",phone:"46"},{code:"SG",label:"Singapore",phone:"65"},{code:"SH",label:"Saint Helena",phone:"290"},{code:"SI",label:"Slovenia",phone:"386"},{code:"SJ",label:"Svalbard and Jan Mayen",phone:"47"},{code:"SK",label:"Slovakia",phone:"421"},{code:"SL",label:"Sierra Leone",phone:"232"},{code:"SM",label:"San Marino",phone:"378"},{code:"SN",label:"Senegal",phone:"221"},{code:"SO",label:"Somalia",phone:"252"},{code:"SR",label:"Suriname",phone:"597"},{code:"SS",label:"South Sudan",phone:"211"},{code:"ST",label:"Sao Tome and Principe",phone:"239"},{code:"SV",label:"El Salvador",phone:"503"},{code:"SX",label:"Sint Maarten (Dutch part)",phone:"1-721"},{code:"SY",label:"Syrian Arab Republic",phone:"963"},{code:"SZ",label:"Swaziland",phone:"268"},{code:"TC",label:"Turks and Caicos Islands",phone:"1-649"},{code:"TD",label:"Chad",phone:"235"},{code:"TF",label:"French Southern Territories",phone:"262"},{code:"TG",label:"Togo",phone:"228"},{code:"TH",label:"Thailand",phone:"66"},{code:"TJ",label:"Tajikistan",phone:"992"},{code:"TK",label:"Tokelau",phone:"690"},{code:"TL",label:"Timor-Leste",phone:"670"},{code:"TM",label:"Turkmenistan",phone:"993"},{code:"TN",label:"Tunisia",phone:"216"},{code:"TO",label:"Tonga",phone:"676"},{code:"TR",label:"Turkey",phone:"90"},{code:"TT",label:"Trinidad and Tobago",phone:"1-868"},{code:"TV",label:"Tuvalu",phone:"688"},{code:"TW",label:"Taiwan, Province of China",phone:"886"},{code:"TZ",label:"United Republic of Tanzania",phone:"255"},{code:"UA",label:"Ukraine",phone:"380"},{code:"UG",label:"Uganda",phone:"256"},{code:"US",label:"United States",phone:"1",suggested:!0},{code:"UY",label:"Uruguay",phone:"598"},{code:"UZ",label:"Uzbekistan",phone:"998"},{code:"VA",label:"Holy See (Vatican City State)",phone:"379"},{code:"VC",label:"Saint Vincent and the Grenadines",phone:"1-784"},{code:"VE",label:"Venezuela",phone:"58"},{code:"VG",label:"British Virgin Islands",phone:"1-284"},{code:"VI",label:"US Virgin Islands",phone:"1-340"},{code:"VN",label:"Vietnam",phone:"84"},{code:"VU",label:"Vanuatu",phone:"678"},{code:"WF",label:"Wallis and Futuna",phone:"681"},{code:"WS",label:"Samoa",phone:"685"},{code:"XK",label:"Kosovo",phone:"383"},{code:"YE",label:"Yemen",phone:"967"},{code:"YT",label:"Mayotte",phone:"262"},{code:"ZA",label:"South Africa",phone:"27"},{code:"ZM",label:"Zambia",phone:"260"},{code:"ZW",label:"Zimbabwe",phone:"263"}];var y=[{label:"The Shawshank Redemption",year:1994},{label:"The Godfather",year:1972},{label:"The Godfather: Part II",year:1974},{label:"The Dark Knight",year:2008},{label:"12 Angry Men",year:1957},{label:"Schindler's List",year:1993},{label:"Pulp Fiction",year:1994},{label:"The Lord of the Rings: The Return of the King",year:2003},{label:"The Good, the Bad and the Ugly",year:1966},{label:"Fight Club",year:1999},{label:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{label:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{label:"Forrest Gump",year:1994},{label:"Inception",year:2010},{label:"The Lord of the Rings: The Two Towers",year:2002},{label:"One Flew Over the Cuckoo's Nest",year:1975},{label:"Goodfellas",year:1990},{label:"The Matrix",year:1999},{label:"Seven Samurai",year:1954},{label:"Star Wars: Episode IV - A New Hope",year:1977},{label:"City of God",year:2002},{label:"Se7en",year:1995},{label:"The Silence of the Lambs",year:1991},{label:"It's a Wonderful Life",year:1946},{label:"Life Is Beautiful",year:1997},{label:"The Usual Suspects",year:1995},{label:"L\xe9on: The Professional",year:1994},{label:"Spirited Away",year:2001},{label:"Saving Private Ryan",year:1998},{label:"Once Upon a Time in the West",year:1968},{label:"American History X",year:1998},{label:"Interstellar",year:2014},{label:"Casablanca",year:1942},{label:"City Lights",year:1931},{label:"Psycho",year:1960},{label:"The Green Mile",year:1999},{label:"The Intouchables",year:2011},{label:"Modern Times",year:1936},{label:"Raiders of the Lost Ark",year:1981},{label:"Rear Window",year:1954},{label:"The Pianist",year:2002},{label:"The Departed",year:2006},{label:"Terminator 2: Judgment Day",year:1991},{label:"Back to the Future",year:1985},{label:"Whiplash",year:2014},{label:"Gladiator",year:2e3},{label:"Memento",year:2e3},{label:"The Prestige",year:2006},{label:"The Lion King",year:1994},{label:"Apocalypse Now",year:1979},{label:"Alien",year:1979},{label:"Sunset Boulevard",year:1950},{label:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{label:"The Great Dictator",year:1940},{label:"Cinema Paradiso",year:1988},{label:"The Lives of Others",year:2006},{label:"Grave of the Fireflies",year:1988},{label:"Paths of Glory",year:1957},{label:"Django Unchained",year:2012},{label:"The Shining",year:1980},{label:"WALL\xb7E",year:2008},{label:"American Beauty",year:1999},{label:"The Dark Knight Rises",year:2012},{label:"Princess Mononoke",year:1997},{label:"Aliens",year:1986},{label:"Oldboy",year:2003},{label:"Once Upon a Time in America",year:1984},{label:"Witness for the Prosecution",year:1957},{label:"Das Boot",year:1981},{label:"Citizen Kane",year:1941},{label:"North by Northwest",year:1959},{label:"Vertigo",year:1958},{label:"Star Wars: Episode VI - Return of the Jedi",year:1983},{label:"Reservoir Dogs",year:1992},{label:"Braveheart",year:1995},{label:"M",year:1931},{label:"Requiem for a Dream",year:2e3},{label:"Am\xe9lie",year:2001},{label:"A Clockwork Orange",year:1971},{label:"Like Stars on Earth",year:2007},{label:"Taxi Driver",year:1976},{label:"Lawrence of Arabia",year:1962},{label:"Double Indemnity",year:1944},{label:"Eternal Sunshine of the Spotless Mind",year:2004},{label:"Amadeus",year:1984},{label:"To Kill a Mockingbird",year:1962},{label:"Toy Story 3",year:2010},{label:"Logan",year:2017},{label:"Full Metal Jacket",year:1987},{label:"Dangal",year:2016},{label:"The Sting",year:1973},{label:"2001: A Space Odyssey",year:1968},{label:"Singin' in the Rain",year:1952},{label:"Toy Story",year:1995},{label:"Bicycle Thieves",year:1948},{label:"The Kid",year:1921},{label:"Inglourious Basterds",year:2009},{label:"Snatch",year:2e3},{label:"3 Idiots",year:2009},{label:"Monty Python and the Holy Grail",year:1975}];var m,g=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],f=["Option 1","Option 2"];var b,T,k,v=n(843568),S=n.n(v),x=n(478768),w=n(470126),A=n(584567),C=n(701417),L=n(421408),I=n(871649),P=n(101812),R=(0,P.D)();var F=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}];var O=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],M=n(379002),D=n.n(M);var B=D()(new Array(48)).map((function(e,t){return"".concat(t<20?"0":"").concat(Math.floor(t/2),":").concat(t%2===0?"00":"30")})),G=(0,P.D)();var W=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],E=n(888432),V=(0,E.Z)("label")({display:"block"}),Z=(0,E.Z)("input")((function(e){var t=e.theme;return{width:200,backgroundColor:"light"===t.palette.mode?"#fff":"#000",color:"light"===t.palette.mode?"#000":"#fff"}})),j=(0,E.Z)("ul")((function(e){return{width:200,margin:0,padding:0,zIndex:1,position:"absolute",listStyle:"none",backgroundColor:"light"===e.theme.palette.mode?"#fff":"#000",overflow:"auto",maxHeight:200,border:"1px solid rgba(0,0,0,.25)","& li.Mui-focused":{backgroundColor:"#4a8df6",color:"white",cursor:"pointer"},"& li:active":{backgroundColor:"#2977f5",color:"white"}}}));var K,z,N=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],H=n(481936),U=n(974931),q=n(467778),J=n(865294),$=n(290763),X=n(314231),_=["label","onDelete"],Y=(0,$.ZP)("div")((function(e){var t=e.theme;return"\n  color: ".concat("dark"===t.palette.mode?"rgba(255,255,255,0.65)":"rgba(0,0,0,.85)",";\n  font-size: 14px;\n")})),Q=(0,$.ZP)("label")(K||(K=(0,U.Z)(["\n  padding: 0 0 4px;\n  line-height: 1.5;\n  display: block;\n"]))),ee=(0,$.ZP)("div")((function(e){var t=e.theme;return"\n  width: 300px;\n  border: 1px solid ".concat("dark"===t.palette.mode?"#434343":"#d9d9d9",";\n  background-color: ").concat("dark"===t.palette.mode?"#141414":"#fff",";\n  border-radius: 4px;\n  padding: 1px;\n  display: flex;\n  flex-wrap: wrap;\n\n  &:hover {\n    border-color: ").concat("dark"===t.palette.mode?"#177ddc":"#40a9ff",";\n  }\n\n  &.focused {\n    border-color: ").concat("dark"===t.palette.mode?"#177ddc":"#40a9ff",";\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    background-color: ").concat("dark"===t.palette.mode?"#141414":"#fff",";\n    color: ").concat("dark"===t.palette.mode?"rgba(255,255,255,0.65)":"rgba(0,0,0,.85)",";\n    height: 30px;\n    box-sizing: border-box;\n    padding: 4px 6px;\n    width: 0;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    margin: 0;\n    outline: 0;\n  }\n")}));var te=(0,$.ZP)((function(e){var t=e.label,n=e.onDelete,a=(0,H.Z)(e,_);return(0,c.jsxs)("div",(0,i.Z)((0,i.Z)({},a),{},{children:[(0,c.jsx)("span",{children:t}),(0,c.jsx)(J.default,{onClick:n})]}))}))((function(e){var t=e.theme;return"\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 22px;\n  background-color: ".concat("dark"===t.palette.mode?"rgba(255,255,255,0.08)":"#fafafa",";\n  border: 1px solid ").concat("dark"===t.palette.mode?"#303030":"#e8e8e8",";\n  border-radius: 2px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n\n  &:focus {\n    border-color: ").concat("dark"===t.palette.mode?"#177ddc":"#40a9ff",";\n    background-color: ").concat("dark"===t.palette.mode?"#003b57":"#e6f7ff",";\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 12px;\n    cursor: pointer;\n    padding: 4px;\n  }\n")})),ne=(0,$.ZP)("ul")((function(e){var t=e.theme;return"\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: ".concat("dark"===t.palette.mode?"#141414":"#fff",";\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 1;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: ").concat("dark"===t.palette.mode?"#2b2b2b":"#fafafa",";\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li.").concat(X.Z.focused," {\n    background-color: ").concat("dark"===t.palette.mode?"#003b57":"#e6f7ff",";\n    cursor: pointer;\n\n    & svg {\n      color: currentColor;\n    }\n  }\n")}));var ae,oe=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],ie=n(966283),le=n(977809),re=n(685851),se=n.n(re),pe=n(412088);function ce(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return new(se())((function(t){setTimeout(t,e)}))}var de=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014}],he=n(222849);var ue=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],ye=n(823315),me=n(81933),ge=n(197704),fe=n(376811),be=n(999521),Te=n.n(be),ke=n(819783),ve=n.n(ke);var Se={current:null};var xe=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],we=n(486193),Ae=n(161281),Ce=n(836693),Le=(0,c.jsx)(Ae.default,{fontSize:"small"}),Ie=(0,c.jsx)(Ce.default,{fontSize:"small"});var Pe=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014}];var Re=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}];var Fe,Oe,Me,De=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],Be=n(957379),Ge=n(146010),We=n(887140),Ee=n(496704),Ve=n(867385),Ze=n(298690),je=n(161980),Ke=n(380602),ze=["disablePortal","anchorEl","open"],Ne=(0,$.ZP)("div")((function(e){var t,n=e.theme;return t={},(0,Be.Z)(t,"& .".concat(X.Z.paper),{boxShadow:"none",margin:0,color:"inherit",fontSize:13}),(0,Be.Z)(t,"& .".concat(X.Z.listbox),(0,Be.Z)({backgroundColor:"light"===n.palette.mode?"#fff":"#1c2128",padding:0},"& .".concat(X.Z.option),(0,Be.Z)({minHeight:"auto",alignItems:"flex-start",padding:8,borderBottom:"1px solid  ".concat("light"===n.palette.mode?" #eaecef":"#30363d"),'&[aria-selected="true"]':{backgroundColor:"transparent"}},"&.".concat(X.Z.focused,", &.").concat(X.Z.focused,'[aria-selected="true"]'),{backgroundColor:n.palette.action.hover}))),(0,Be.Z)(t,"&.".concat(X.Z.popperDisablePortal),{position:"relative"}),t}));function He(e){e.disablePortal,e.anchorEl,e.open;var t=(0,H.Z)(e,ze);return(0,c.jsx)(Ne,(0,i.Z)({},t))}var Ue=(0,$.ZP)(We.Z)((function(e){var t=e.theme;return{border:"1px solid ".concat("light"===t.palette.mode?"#e1e4e8":"#30363d"),boxShadow:"0 8px 24px ".concat("light"===t.palette.mode?"rgba(149, 157, 165, 0.2)":"rgb(1, 4, 9)"),borderRadius:6,width:300,zIndex:t.zIndex.modal,fontSize:13,color:"light"===t.palette.mode?"#24292e":"#c9d1d9",backgroundColor:"light"===t.palette.mode?"#fff":"#1c2128"}})),qe=(0,$.ZP)(Ke.ZP)((function(e){var t=e.theme;return{padding:10,width:"100%",borderBottom:"1px solid ".concat("light"===t.palette.mode?"#eaecef":"#30363d"),"& input":{borderRadius:4,backgroundColor:"light"===t.palette.mode?"#fff":"#0d1117",padding:8,transition:t.transitions.create(["border-color","box-shadow"]),border:"1px solid ".concat("light"===t.palette.mode?"#eaecef":"#30363d"),fontSize:14,"&:focus":{boxShadow:"0px 0px 0px 3px ".concat("light"===t.palette.mode?"rgba(3, 102, 214, 0.3)":"rgb(12, 45, 107)"),borderColor:"light"===t.palette.mode?"#0366d6":"#388bfd"}}}})),Je=(0,$.ZP)(je.Z)((function(e){var t=e.theme;return{fontSize:13,width:"100%",textAlign:"left",paddingBottom:8,color:"light"===t.palette.mode?"#586069":"#8b949e",fontWeight:600,"&:hover,&:focus":{color:"light"===t.palette.mode?"#0366d6":"#58a6ff"},"& span":{width:"100%"},"& svg":{width:16,height:16}}}));var $e=[{name:"good first issue",color:"#7057ff",description:"Good for newcomers"},{name:"help wanted",color:"#008672",description:"Extra attention is needed"},{name:"priority: critical",color:"#b60205",description:""},{name:"priority: high",color:"#d93f0b",description:""},{name:"priority: low",color:"#0e8a16",description:""},{name:"priority: medium",color:"#fbca04",description:""},{name:"status: can't reproduce",color:"#fec1c1",description:""},{name:"status: confirmed",color:"#215cea",description:""},{name:"status: duplicate",color:"#cfd3d7",description:"This issue or pull request already exists"},{name:"status: needs information",color:"#fef2c0",description:""},{name:"status: wont do/fix",color:"#eeeeee",description:"This will not be worked on"},{name:"type: bug",color:"#d73a4a",description:"Something isn't working"},{name:"type: discussion",color:"#d4c5f9",description:""},{name:"type: documentation",color:"#006b75",description:""},{name:"type: enhancement",color:"#84b6eb",description:""},{name:"type: epic",color:"#3e4b9e",description:"A theme of work that contain sub-tasks"},{name:"type: feature request",color:"#fbca04",description:"New feature or request"},{name:"type: question",color:"#d876e3",description:"Further information is requested"}],Xe=["Option 1","Option 2"];var _e=n(698458),Ye=n.n(_e);var Qe=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],et=(0,P.D)({matchFrom:"start",stringify:function(e){return e.title}});var tt=[{title:"The Shawshank Redemption",year:1994},{title:"The Godfather",year:1972},{title:"The Godfather: Part II",year:1974},{title:"The Dark Knight",year:2008},{title:"12 Angry Men",year:1957},{title:"Schindler's List",year:1993},{title:"Pulp Fiction",year:1994},{title:"The Lord of the Rings: The Return of the King",year:2003},{title:"The Good, the Bad and the Ugly",year:1966},{title:"Fight Club",year:1999},{title:"The Lord of the Rings: The Fellowship of the Ring",year:2001},{title:"Star Wars: Episode V - The Empire Strikes Back",year:1980},{title:"Forrest Gump",year:1994},{title:"Inception",year:2010},{title:"The Lord of the Rings: The Two Towers",year:2002},{title:"One Flew Over the Cuckoo's Nest",year:1975},{title:"Goodfellas",year:1990},{title:"The Matrix",year:1999},{title:"Seven Samurai",year:1954},{title:"Star Wars: Episode IV - A New Hope",year:1977},{title:"City of God",year:2002},{title:"Se7en",year:1995},{title:"The Silence of the Lambs",year:1991},{title:"It's a Wonderful Life",year:1946},{title:"Life Is Beautiful",year:1997},{title:"The Usual Suspects",year:1995},{title:"L\xe9on: The Professional",year:1994},{title:"Spirited Away",year:2001},{title:"Saving Private Ryan",year:1998},{title:"Once Upon a Time in the West",year:1968},{title:"American History X",year:1998},{title:"Interstellar",year:2014},{title:"Casablanca",year:1942},{title:"City Lights",year:1931},{title:"Psycho",year:1960},{title:"The Green Mile",year:1999},{title:"The Intouchables",year:2011},{title:"Modern Times",year:1936},{title:"Raiders of the Lost Ark",year:1981},{title:"Rear Window",year:1954},{title:"The Pianist",year:2002},{title:"The Departed",year:2006},{title:"Terminator 2: Judgment Day",year:1991},{title:"Back to the Future",year:1985},{title:"Whiplash",year:2014},{title:"Gladiator",year:2e3},{title:"Memento",year:2e3},{title:"The Prestige",year:2006},{title:"The Lion King",year:1994},{title:"Apocalypse Now",year:1979},{title:"Alien",year:1979},{title:"Sunset Boulevard",year:1950},{title:"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb",year:1964},{title:"The Great Dictator",year:1940},{title:"Cinema Paradiso",year:1988},{title:"The Lives of Others",year:2006},{title:"Grave of the Fireflies",year:1988},{title:"Paths of Glory",year:1957},{title:"Django Unchained",year:2012},{title:"The Shining",year:1980},{title:"WALL\xb7E",year:2008},{title:"American Beauty",year:1999},{title:"The Dark Knight Rises",year:2012},{title:"Princess Mononoke",year:1997},{title:"Aliens",year:1986},{title:"Oldboy",year:2003},{title:"Once Upon a Time in America",year:1984},{title:"Witness for the Prosecution",year:1957},{title:"Das Boot",year:1981},{title:"Citizen Kane",year:1941},{title:"North by Northwest",year:1959},{title:"Vertigo",year:1958},{title:"Star Wars: Episode VI - Return of the Jedi",year:1983},{title:"Reservoir Dogs",year:1992},{title:"Braveheart",year:1995},{title:"M",year:1931},{title:"Requiem for a Dream",year:2e3},{title:"Am\xe9lie",year:2001},{title:"A Clockwork Orange",year:1971},{title:"Like Stars on Earth",year:2007},{title:"Taxi Driver",year:1976},{title:"Lawrence of Arabia",year:1962},{title:"Double Indemnity",year:1944},{title:"Eternal Sunshine of the Spotless Mind",year:2004},{title:"Amadeus",year:1984},{title:"To Kill a Mockingbird",year:1962},{title:"Toy Story 3",year:2010},{title:"Logan",year:2017},{title:"Full Metal Jacket",year:1987},{title:"Dangal",year:2016},{title:"The Sting",year:1973},{title:"2001: A Space Odyssey",year:1968},{title:"Singin' in the Rain",year:1952},{title:"Toy Story",year:1995},{title:"Bicycle Thieves",year:1948},{title:"The Kid",year:1921},{title:"Inglourious Basterds",year:2009},{title:"Snatch",year:2e3},{title:"3 Idiots",year:2009},{title:"Monty Python and the Holy Grail",year:1975}],nt=n(561546),at=n(147646),ot=n(870072),it=["children"];function lt(e){var t=e.data,n=e.index,a=e.style,o=t[n],l=(0,i.Z)((0,i.Z)({},a),{},{top:a.top+8});return o.hasOwnProperty("group")?(0,c.jsx)(at.Z,{component:"div",style:l,children:o.group},o.key):(0,c.jsx)(fe.Z,(0,i.Z)((0,i.Z)({component:"li"},o[0]),{},{noWrap:!0,style:l,children:o[1]}))}var rt=a.createContext({}),st=a.forwardRef((function(e,t){var n=a.useContext(rt);return(0,c.jsx)("div",(0,i.Z)((0,i.Z)({ref:t},e),n))}));var pt=a.forwardRef((function(e,t){var n=e.children,o=(0,H.Z)(e,it),i=[];n.forEach((function(e){i.push(e),i.push.apply(i,(0,ye.Z)(e.children||[]))}));var l=(0,Ge.Z)(),r=(0,nt.Z)(l.breakpoints.up("sm"),{noSsr:!0}),s=i.length,p=r?36:48,d=function(e){return e.hasOwnProperty("group")?48:p},h=function(e){var t=a.useRef(null);return a.useEffect((function(){null!=t.current&&t.current.resetAfterIndex(0,!0)}),[e]),t}(s);return(0,c.jsx)("div",{ref:t,children:(0,c.jsx)(rt.Provider,{value:o,children:(0,c.jsx)(ot.S_,{itemData:i,height:(s>8?8*p:i.map(d).reduce((function(e,t){return e+t}),0))+16,width:"100%",ref:h,outerElementType:st,innerElementType:"ul",itemSize:function(e){return d(i[e])},overscanCount:5,itemCount:s,children:lt})})})}));var ct=(0,$.ZP)(We.Z)((0,Be.Z)({},"& .".concat(X.Z.listbox),{boxSizing:"border-box","& ul":{padding:0,margin:0}})),dt=D()(new Array(1e4)).map((function(){return function(e){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n="",a=0;a<e;a+=1)n+=t.charAt(Math.floor(Math.random()*t.length));return n}(10+Math.ceil(20*Math.random()))})).sort((function(e,t){return e.toUpperCase().localeCompare(t.toUpperCase())}));var ht,ut={en:{description:"The autocomplete is a normal text input enhanced by a panel of suggested options.",location:"/docs/data/material/components/autocomplete/autocomplete.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Autocomplete</h1><p class="description">The autocomplete is a normal text input enhanced by a panel of suggested options.</p>\n\n<p>The widget is useful for setting the value of a single-line textbox in one of two types of scenarios:</p>\n<ol>\n<li>The value for the textbox must be chosen from a predefined set of allowed values, e.g., a location field must contain a valid location name: <a href="#combo-box">combo box</a>.</li>\n<li>The textbox may contain any arbitrary value, but it is advantageous to suggest possible values to the user, e.g., a search field may suggest similar or previous searches to save the user time: <a href="#free-solo">free solo</a>.</li>\n</ol>\n<p>It&#39;s meant to be an improved version of the &quot;react-select&quot; and &quot;downshift&quot; packages.</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="combo-box">Combo box<a aria-labelledby="combo-box" class="anchor-link-style" href="#combo-box" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The value must be chosen from a predefined set of allowed values.</p>\n',{demo:"ComboBox.js"},'<h3 id="options-structure">Options structure<a aria-labelledby="options-structure" class="anchor-link-style" href="#options-structure" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>By default, the component accepts the following options structures:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">AutocompleteOption</span> <span class="token punctuation">{</span>\n  label<span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// or</span>\ntype AutocompleteOption <span class="token operator">=</span> string<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>for instance:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'The Godfather\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'Pulp Fiction\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// or</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'The Godfather\'</span><span class="token punctuation">,</span> <span class="token string">\'Pulp Fiction\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>However, you can use different structures by providing a <code>getOptionLabel</code> prop.</p>\n<h3 id="playground">Playground<a aria-labelledby="playground" class="anchor-link-style" href="#playground" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Each of the following examples demonstrates one feature of the Autocomplete component.</p>\n',{demo:"Playground.js"},'<h3 id="country-select">Country select<a aria-labelledby="country-select" class="anchor-link-style" href="#country-select" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Choose one of the 248 countries.</p>\n',{demo:"CountrySelect.js"},'<h3 id="controlled-states">Controlled states<a aria-labelledby="controlled-states" class="anchor-link-style" href="#controlled-states" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The component has two states that can be controlled:</p>\n<ol>\n<li>the &quot;value&quot; state with the <code>value</code>/<code>onChange</code> props combination. This state represents the value selected by the user, for instance when pressing <kbd class="key">Enter</kbd>.</li>\n<li>the &quot;input value&quot; state with the <code>inputValue</code>/<code>onInputChange</code> props combination. This state represents the value displayed in the textbox.</li>\n</ol>\n<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f These two states are isolated, they should be controlled independently.</p>\n\n</aside>',{demo:"ControllableStates.js"},'<h2 id="free-solo">Free solo<a aria-labelledby="free-solo" class="anchor-link-style" href="#free-solo" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Set <code>freeSolo</code> to true so the textbox can contain any arbitrary value.</p>\n<h3 id="search-input">Search input<a aria-labelledby="search-input" class="anchor-link-style" href="#search-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The prop is designed to cover the primary use case of a <strong>search input</strong> with suggestions, e.g. Google search or react-autowhatever.</p>\n',{demo:"FreeSolo.js"},'<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f Be careful when using the free solo mode with non-string options, as it may cause type mismatch.</p>\n<p>The value created by typing into the textbox is always a string, regardless of the type of the options.</p>\n\n</aside><h3 id="creatable">Creatable<a aria-labelledby="creatable" class="anchor-link-style" href="#creatable" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you intend to use this mode for a <a href="#combo-box">combo box</a> like experience (an enhanced version of a select element) we recommend setting:</p>\n<ul>\n<li><code>selectOnFocus</code> to help the user clear the selected value.</li>\n<li><code>clearOnBlur</code> to help the user enter a new value.</li>\n<li><code>handleHomeEndKeys</code> to move focus inside the popup with the <kbd class="key">Home</kbd> and <kbd class="key">End</kbd> keys.</li>\n<li>A last option, for instance: <code>Add &quot;YOUR SEARCH&quot;</code>.</li>\n</ul>\n',{demo:"FreeSoloCreateOption.js"},"<p>You could also display a dialog when the user wants to add a new value.</p>\n",{demo:"FreeSoloCreateOptionDialog.js"},'<h2 id="grouped">Grouped<a aria-labelledby="grouped" class="anchor-link-style" href="#grouped" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can group the options with the <code>groupBy</code> prop.\nIf you do so, make sure that the options are also sorted with the same dimension that they are grouped by,\notherwise, you will notice duplicate headers.</p>\n',{demo:"Grouped.js"},'<h2 id="disabled-options">Disabled options<a aria-labelledby="disabled-options" class="anchor-link-style" href="#disabled-options" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"DisabledOptions.js"},'<h2 id="useautocomplete"><code>useAutocomplete</code><a aria-labelledby="useautocomplete" class="anchor-link-style" href="#useautocomplete" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For advanced customization use cases, a headless <code>useAutocomplete()</code> hook is exposed.\nIt accepts almost the same options as the Autocomplete component minus all the props\nrelated to the rendering of JSX.\nThe Autocomplete component is built on this hook.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useAutocomplete <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/AutocompleteUnstyled\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>useAutocomplete</code> hook is also reexported from @mui/material for convenience and backward compatibility.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> useAutocomplete <span class="token keyword">from</span> <span class="token string">\'@mui/material/useAutocomplete\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<ul>\n<li>\ud83d\udce6 <a href="/size-snapshot/">4.5 kB gzipped</a>.</li>\n</ul>\n',{demo:"UseAutocomplete.js",defaultCodeOpen:!1},'<h3 id="customized-hook">Customized hook<a aria-labelledby="customized-hook" class="anchor-link-style" href="#customized-hook" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"CustomizedHook.js"},'<p>Head to the <a href="#customization">customization</a> section for an example with the <code>Autocomplete</code> component instead of the hook.</p>\n<h2 id="asynchronous-requests">Asynchronous requests<a aria-labelledby="asynchronous-requests" class="anchor-link-style" href="#asynchronous-requests" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component supports two different asynchronous use-cases:</p>\n<ul>\n<li><a href="#load-on-open">Load on open</a>: it waits for the component to be interacted with to load the options.</li>\n<li><a href="#search-as-you-type">Search as you type</a>: a new request is made for each keystroke.</li>\n</ul>\n<h3 id="load-on-open">Load on open<a aria-labelledby="load-on-open" class="anchor-link-style" href="#load-on-open" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>It displays a progress state as long as the network request is pending.</p>\n',{demo:"Asynchronous.js"},'<h3 id="search-as-you-type">Search as you type<a aria-labelledby="search-as-you-type" class="anchor-link-style" href="#search-as-you-type" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If your logic is fetching new options on each keystroke and using the current value of the textbox\nto filter on the server, you may want to consider throttling requests.</p>\n<p>Additionally, you will need to disable the built-in filtering of the <code>Autocomplete</code> component by\noverriding the <code>filterOptions</code> prop:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="google-maps-place">Google Maps place<a aria-labelledby="google-maps-place" class="anchor-link-style" href="#google-maps-place" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A customized UI for Google Maps Places Autocomplete.\nFor this demo, we need to load the <a href="https://developers.google.com/maps/documentation/javascript/overview">Google Maps JavaScript</a> and <a href="https://developers.google.com/maps/documentation/places/web-service/overview">Google Places</a> API.</p>\n',{demo:"GoogleMaps.js"},'<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f Before you can start using the Google Maps JavaScript API and Places API, you must sign up and create a billing account.</p>\n\n</aside><h2 id="multiple-values">Multiple values<a aria-labelledby="multiple-values" class="anchor-link-style" href="#multiple-values" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Also known as tags, the user is allowed to enter more than one value.</p>\n',{demo:"Tags.js"},'<h3 id="fixed-options">Fixed options<a aria-labelledby="fixed-options" class="anchor-link-style" href="#fixed-options" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>In the event that you need to lock certain tags so that they can&#39;t be removed, you can set the chips disabled.</p>\n',{demo:"FixedTags.js"},'<h3 id="checkboxes">Checkboxes<a aria-labelledby="checkboxes" class="anchor-link-style" href="#checkboxes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"CheckboxesTags.js"},'<h3 id="limit-tags">Limit tags<a aria-labelledby="limit-tags" class="anchor-link-style" href="#limit-tags" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>You can use the <code>limitTags</code> prop to limit the number of displayed options when not focused.</p>\n',{demo:"LimitTags.js"},'<h2 id="sizes">Sizes<a aria-labelledby="sizes" class="anchor-link-style" href="#sizes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Fancy smaller inputs? Use the <code>size</code> prop.</p>\n',{demo:"Sizes.js"},'<h2 id="customization">Customization<a aria-labelledby="customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="custom-input">Custom input<a aria-labelledby="custom-input" class="anchor-link-style" href="#custom-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>renderInput</code> prop allows you to customize the rendered input.\nThe first argument of this render prop contains props that you need to forward.\nPay specific attention to the <code>ref</code> and <code>inputProps</code> keys.</p>\n',{demo:"CustomInputAutocomplete.js"},'<h3 id="githubs-picker">GitHub&#39;s picker<a aria-labelledby="githubs-picker" class="anchor-link-style" href="#githubs-picker" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>This demo reproduces GitHub&#39;s label picker:</p>\n',{demo:"GitHubLabel.js"},'<p>Head to the <a href="#customized-hook">Customized hook</a> section for a customization example with the <code>useAutocomplete</code> hook instead of the component.</p>\n<h2 id="highlights">Highlights<a aria-labelledby="highlights" class="anchor-link-style" href="#highlights" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The following demo relies on <a href="https://github.com/moroshko/autosuggest-highlight">autosuggest-highlight</a>, a small (1 kB) utility for highlighting text in autosuggest and autocomplete components.</p>\n',{demo:"Highlights.js"},'<h2 id="custom-filter">Custom filter<a aria-labelledby="custom-filter" class="anchor-link-style" href="#custom-filter" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component exposes a factory to create a filter method that can be provided to the <code>filterOptions</code> prop.\nYou can use it to change the default option filter behavior.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFilterOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/Autocomplete\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="createfilteroptions-config-filteroptions"><code>createFilterOptions(config) =&gt; filterOptions</code><a aria-labelledby="createfilteroptions-config-filteroptions" class="anchor-link-style" href="#createfilteroptions-config-filteroptions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h4>Arguments</h4><ol>\n<li><code>config</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>config.ignoreAccents</code> (<em>bool</em> [optional]): Defaults to <code>true</code>. Remove diacritics.</li>\n<li><code>config.ignoreCase</code> (<em>bool</em> [optional]): Defaults to <code>true</code>. Lowercase everything.</li>\n<li><code>config.limit</code> (<em>number</em> [optional]): Default to null. Limit the number of suggested options to be shown. For example, if <code>config.limit</code> is <code>100</code>, only the first <code>100</code> matching options are shown. It can be useful if a lot of options match and virtualization wasn&#39;t set up.</li>\n<li><code>config.matchFrom</code> (<em>&#39;any&#39; | &#39;start&#39;</em> [optional]): Defaults to <code>&#39;any&#39;</code>.</li>\n<li><code>config.stringify</code> (<em>func</em> [optional]): Controls how an option is converted into a string so that it can be matched against the input text fragment.</li>\n<li><code>config.trim</code> (<em>bool</em> [optional]): Defaults to <code>false</code>. Remove trailing spaces.</li>\n</ul>\n<h4>Returns</h4><p><code>filterOptions</code>: the returned filter method can be provided directly to the <code>filterOptions</code> prop of the <code>Autocomplete</code> component, or the parameter of the same name for the hook.</p>\n<p>In the following demo, the options need to start with the query prefix:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> filterOptions <span class="token operator">=</span> <span class="token function">createFilterOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">matchFrom</span><span class="token operator">:</span> <span class="token string">\'start\'</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">stringify</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token operator">=></span> option<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n',{demo:"Filter.js",defaultCodeOpen:!1},'<h3 id="advanced">Advanced<a aria-labelledby="advanced" class="anchor-link-style" href="#advanced" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>For richer filtering mechanisms, like fuzzy matching, it&#39;s recommended to look at <a href="https://github.com/kentcdodds/match-sorter">match-sorter</a>. For instance:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> matchSorter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'match-sorter\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">filterOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> <span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">matchSorter</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="virtualization">Virtualization<a aria-labelledby="virtualization" class="anchor-link-style" href="#virtualization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Search within 10,000 randomly generated options. The list is virtualized thanks to <a href="https://github.com/bvaughn/react-window">react-window</a>.</p>\n',{demo:"Virtualize.js"},'<h2 id="events">Events<a aria-labelledby="events" class="anchor-link-style" href="#events" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you would like to prevent the default key handler behavior, you can set the event&#39;s <code>defaultMuiPrevented</code> property to <code>true</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span>\n  <span class="token attr-name">onKeyDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">\'Enter\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Prevent\'s default \'Enter\' behavior.</span>\n      event<span class="token punctuation">.</span>defaultMuiPrevented <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token comment">// your handler code</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="limitations">Limitations<a aria-labelledby="limitations" class="anchor-link-style" href="#limitations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="autocomplete-autofill">autocomplete/autofill<a aria-labelledby="autocomplete-autofill" class="anchor-link-style" href="#autocomplete-autofill" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Browsers have heuristics to help the user fill in form inputs.\nHowever, this can harm the UX of the component.</p>\n<p>By default, the component disables the input <strong>autocomplete</strong> feature (remembering what the user has typed for a given field in a previous session) with the <code>autoComplete=&quot;off&quot;</code> attribute.\nGoogle Chrome does not currently support this attribute setting (<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=587466">Issue 587466</a>).\nA possible workaround is to remove the <code>id</code> to have the component generate a random one.</p>\n<p>In addition to remembering past entered values, the browser might also propose <strong>autofill</strong> suggestions (saved login, address, or payment details).\nIn the event you want the avoid autofill, you can try the following:</p>\n<ul>\n<li><p>Name the input without leaking any information the browser can use. e.g. <code>id=&quot;field1&quot;</code> instead of <code>id=&quot;country&quot;</code>. If you leave the id empty, the component uses a random id.</p>\n</li>\n<li><p>Set <code>autoComplete=&quot;new-password&quot;</code> (some browsers will suggest a strong password for inputs with this attribute setting):</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span>\n  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>params<span class="token punctuation">}</span></span>\n  <span class="token attr-name">inputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span>params<span class="token punctuation">.</span>inputProps<span class="token punctuation">,</span>\n    <span class="token literal-property property">autoComplete</span><span class="token operator">:</span> <span class="token string">\'new-password\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n</ul>\n<p>Read <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion">the guide on MDN</a> for more details.</p>\n<h3 id="ios-voiceover">iOS VoiceOver<a aria-labelledby="ios-voiceover" class="anchor-link-style" href="#ios-voiceover" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>VoiceOver on iOS Safari doesn&#39;t support the <code>aria-owns</code> attribute very well.\nYou can work around the issue with the <code>disablePortal</code> prop.</p>\n<h3 id="listboxcomponent">ListboxComponent<a aria-labelledby="listboxcomponent" class="anchor-link-style" href="#listboxcomponent" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you provide a custom <code>ListboxComponent</code> prop, you need to make sure that the intended scroll container has the <code>role</code> attribute set to <code>listbox</code>. This ensures the correct behavior of the scroll, for example when using the keyboard to navigate.</p>\n<h2 id="accessibility">Accessibility<a aria-labelledby="accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>(WAI-ARIA: <a href="https://www.w3.org/WAI/ARIA/apg/patterns/combobox/" target="_blank" rel="noopener nofollow">https://www.w3.org/WAI/ARIA/apg/patterns/combobox/</a>)</p>\n<p>We encourage the usage of a label for the textbox.\nThe component implements the WAI-ARIA authoring practices.</p>\n','<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/material-ui/api/autocomplete/"><code>&lt;Autocomplete /&gt;</code></a></li>\n<li><a href="/material-ui/api/popper/"><code>&lt;Popper /&gt;</code></a></li>\n<li><a href="/material-ui/api/text-field/"><code>&lt;TextField /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"Combo box",level:2,hash:"combo-box",children:[{text:"Options structure",level:3,hash:"options-structure"},{text:"Playground",level:3,hash:"playground"},{text:"Country select",level:3,hash:"country-select"},{text:"Controlled states",level:3,hash:"controlled-states"}]},{text:"Free solo",level:2,hash:"free-solo",children:[{text:"Search input",level:3,hash:"search-input"},{text:"Creatable",level:3,hash:"creatable"}]},{text:"Grouped",level:2,hash:"grouped",children:[]},{text:"Disabled options",level:2,hash:"disabled-options",children:[]},{text:"useAutocomplete",level:2,hash:"useautocomplete",children:[{text:"Customized hook",level:3,hash:"customized-hook"}]},{text:"Asynchronous requests",level:2,hash:"asynchronous-requests",children:[{text:"Load on open",level:3,hash:"load-on-open"},{text:"Search as you type",level:3,hash:"search-as-you-type"},{text:"Google Maps place",level:3,hash:"google-maps-place"}]},{text:"Multiple values",level:2,hash:"multiple-values",children:[{text:"Fixed options",level:3,hash:"fixed-options"},{text:"Checkboxes",level:3,hash:"checkboxes"},{text:"Limit tags",level:3,hash:"limit-tags"}]},{text:"Sizes",level:2,hash:"sizes",children:[]},{text:"Customization",level:2,hash:"customization",children:[{text:"Custom input",level:3,hash:"custom-input"},{text:"GitHub&#39;s picker",level:3,hash:"githubs-picker"}]},{text:"Highlights",level:2,hash:"highlights",children:[]},{text:"Custom filter",level:2,hash:"custom-filter",children:[{text:"createFilterOptions(&#8203;config) =&gt; filterOptions",level:3,hash:"createfilteroptions-config-filteroptions"},{text:"Advanced",level:3,hash:"advanced"}]},{text:"Virtualization",level:2,hash:"virtualization",children:[]},{text:"Events",level:2,hash:"events",children:[]},{text:"Limitations",level:2,hash:"limitations",children:[{text:"autocomplete/autofill",level:3,hash:"autocomplete-autofill"},{text:"iOS VoiceOver",level:3,hash:"ios-voiceover"},{text:"ListboxComponent",level:3,hash:"listboxcomponent"}]},{text:"Accessibility",level:2,hash:"accessibility",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"React Autocomplete component",headers:{product:"material-ui",title:"React Autocomplete component",components:["Autocomplete","Popper","TextField"],githubLabel:"component: autocomplete",waiAria:"https://www.w3.org/WAI/ARIA/apg/patterns/combobox/"}},pt:{description:"O autocompletar \xe9 uma entrada de texto normal aprimorada por um painel de op\xe7\xf5es sugeridas.",location:"/docs/data/material/components/autocomplete/autocomplete-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Autocompletar</h1><p class="description">O autocompletar \xe9 uma entrada de texto normal aprimorada por um painel de op\xe7\xf5es sugeridas.</p>\n\n<p>Essa ferramenta \xe9 \xfatil para configurar os valores de um campo de texto quando em um dos dois cen\xe1rios abaixo:</p>\n<ol>\n<li>O valor para a caixa de texto deve ser escolhido a partir de um conjunto pr\xe9-definido de valores permitidos, por exemplo, um campo de localiza\xe7\xe3o deve conter um nome de localiza\xe7\xe3o v\xe1lido: <a href="#combo-box">caixa de combina\xe7\xe3o</a>.</li>\n<li>A caixa de texto pode conter qualquer valor arbitr\xe1rio, mas \xe9 mais vantajosa, porque pode sugerir poss\xedveis valores para o usu\xe1rio, por exemplo, um campo de pesquisa que pode sugerir pesquisas anteriores ou semelhantes para economizar o tempo do usu\xe1rio: <a href="#free-solo">free solo</a>.</li>\n</ol>\n<p>A ideia dessa ferramenta \xe9 ser uma vers\xe3o melhorada das bibliotecas &quot;react-select&quot; e &quot;downshift&quot;.</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="combo-box">Caixa de combina\xe7\xe3o<a aria-labelledby="combo-box" class="anchor-link-style" href="#combo-box" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>O valor deve ser escolhido a partir de um conjunto predefinido de valores permitidos.</p>\n',{demo:"ComboBox.js"},'<h3 id="options-structure">Estrutura de op\xe7\xf5es<a aria-labelledby="options-structure" class="anchor-link-style" href="#options-structure" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Por padr\xe3o, o componente aceita as seguintes estruturas de op\xe7\xf5es:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">AutocompleteOption</span> <span class="token punctuation">{</span>\n  label<span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ou</span>\ntype AutocompleteOption <span class="token operator">=</span> string<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>por exemplo:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'The Godfather\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'Pulp Fiction\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// ou</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'The Godfather\'</span><span class="token punctuation">,</span> <span class="token string">\'Pulp Fiction\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>No entanto, voc\xea pode usar estruturas diferentes fornecendo a propriedade <code>getOptionLabel</code>.</p>\n<h3 id="playground">\xc1rea de exemplos<a aria-labelledby="playground" class="anchor-link-style" href="#playground" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Cada um dos exemplos a seguir demonstra uma funcionalidade do componente Autocomplete.</p>\n',{demo:"Playground.js"},'<h3 id="country-select">Sele\xe7\xe3o de pa\xedses<a aria-labelledby="country-select" class="anchor-link-style" href="#country-select" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Escolha um dos 248 pa\xedses.</p>\n',{demo:"CountrySelect.js"},'<h3 id="controlled-states">Estados controlados<a aria-labelledby="controlled-states" class="anchor-link-style" href="#controlled-states" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>O componente tem dois estados que podem ser controlados:</p>\n<ol>\n<li>o estado &quot;value&quot; com a combina\xe7\xe3o das propriedades <code>value</code>/<code>onChange</code>. Esse estado representa o valor selecionado pelo usu\xe1rio, por exemplo, quando pressionando <kbd class="key">Enter</kbd>.</li>\n<li>o estado &quot;input value&quot; com a combina\xe7\xe3o das propriedades <code>inputValue</code>/<code>onInputChange</code>. Esse estado representa o valor exibido na caixa de texto.</li>\n</ol>\n<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f These two states are isolated, they should be controlled independently.</p>\n\n</aside>',{demo:"ControllableStates.js"},'<h2 id="free-solo">Free solo<a aria-labelledby="free-solo" class="anchor-link-style" href="#free-solo" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Set <code>freeSolo</code> to true so the textbox can contain any arbitrary value.</p>\n<h3 id="search-input">Campo search<a aria-labelledby="search-input" class="anchor-link-style" href="#search-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The prop is designed to cover the primary use case of a <strong>search input</strong> with suggestions, e.g. Google search or react-autowhatever.</p>\n',{demo:"FreeSolo.js"},'<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f Be careful when using the free solo mode with non-string options, as it may cause type mismatch.</p>\n<p>The value created by typing into the textbox is always a string, regardless of the type of the options.</p>\n\n</aside><h3 id="creatable">Creatable<a aria-labelledby="creatable" class="anchor-link-style" href="#creatable" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you intend to use this mode for a <a href="#combo-box">combo box</a> like experience (an enhanced version of a select element) we recommend setting:</p>\n<ul>\n<li><code>selectOnFocus</code> para ajudar o usu\xe1rio a limpar o valor selecionado.</li>\n<li><code>clearOnBlur</code> para ajudar o usu\xe1rio a digitar um novo valor.</li>\n<li><code>handleHomeEndKeys</code> para mover o foco dentro do popup com as teclas <kbd class="key">Home</kbd> e <kbd class="key">End</kbd>.</li>\n<li>Adicione uma \xfaltima op\xe7\xe3o para indicar a possibilidade de adi\xe7\xe3o, por exemplo <code>Adicionar &quot;SUA PESQUISA&quot;</code>.</li>\n</ul>\n',{demo:"FreeSoloCreateOption.js"},"<p>You could also display a dialog when the user wants to add a new value.</p>\n",{demo:"FreeSoloCreateOptionDialog.js"},'<h2 id="grouped">Agrupamento<a aria-labelledby="grouped" class="anchor-link-style" href="#grouped" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can group the options with the <code>groupBy</code> prop. If you do so, make sure that the options are also sorted with the same dimension that they are grouped by, otherwise, you will notice duplicate headers.</p>\n',{demo:"Grouped.js"},'<h2 id="disabled-options">Op\xe7\xf5es desabilitadas<a aria-labelledby="disabled-options" class="anchor-link-style" href="#disabled-options" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"DisabledOptions.js"},'<h2 id="useautocomplete"><code>useAutocomplete</code><a aria-labelledby="useautocomplete" class="anchor-link-style" href="#useautocomplete" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For advanced customization use cases, a headless <code>useAutocomplete()</code> hook is exposed. It accepts almost the same options as the Autocomplete component minus all the props related to the rendering of JSX. The Autocomplete component is built on this hook.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useAutocomplete <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/AutocompleteUnstyled\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>useAutocomplete</code> hook is also reexported from @mui/material for convenience and backward compatibility.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFilterOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/Autocomplete\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<ul>\n<li>\ud83d\udce6 <a href="/size-snapshot/">4.5 kB gzipped</a>.</li>\n</ul>\n',{demo:"UseAutocomplete.js",defaultCodeOpen:!1},'<h3 id="customized-hook">Hook customizado<a aria-labelledby="customized-hook" class="anchor-link-style" href="#customized-hook" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"CustomizedHook.js"},'<p>Head to the <a href="#customization">customization</a> section for an example with the <code>Autocomplete</code> component instead of the hook.</p>\n<h2 id="asynchronous-requests">Requisi\xe7\xf5es ass\xedncronas<a aria-labelledby="asynchronous-requests" class="anchor-link-style" href="#asynchronous-requests" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component supports two different asynchronous use-cases:</p>\n<ul>\n<li><a href="#load-on-open">Carregar ao abrir</a>: espera uma intera\xe7\xe3o com o componente para carregar as op\xe7\xf5es.</li>\n<li><a href="#search-as-you-type">Pesquisar enquanto digita</a>: um novo pedido \xe9 feito para cada tecla pressionada.</li>\n</ul>\n<h3 id="load-on-open">Carregar ao abrir<a aria-labelledby="load-on-open" class="anchor-link-style" href="#load-on-open" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>It displays a progress state as long as the network request is pending.</p>\n',{demo:"Asynchronous.js"},'<h3 id="search-as-you-type">Pesquisar enquanto digita<a aria-labelledby="search-as-you-type" class="anchor-link-style" href="#search-as-you-type" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If your logic is fetching new options on each keystroke and using the current value of the textbox to filter on the server, you may want to consider throttling requests.</p>\n<p>Additionally, you will need to disable the built-in filtering of the <code>Autocomplete</code> component by overriding the <code>filterOptions</code> prop:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="google-maps-place">Lugares com a API do Google Maps<a aria-labelledby="google-maps-place" class="anchor-link-style" href="#google-maps-place" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A customized UI for Google Maps Places Autocomplete. For this demo, we need to load the <a href="https://developers.google.com/maps/documentation/javascript/overview">Google Maps JavaScript</a> and <a href="https://developers.google.com/maps/documentation/places/web-service/overview">Google Places</a> API.</p>\n',{demo:"GoogleMaps.js"},'<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f Before you can start using the Google Maps JavaScript API and Places API, you must sign up and create a billing account.</p>\n\n</aside><h2 id="multiple-values">M\xfaltiplos valores<a aria-labelledby="multiple-values" class="anchor-link-style" href="#multiple-values" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Also known as tags, the user is allowed to enter more than one value.</p>\n',{demo:"Tags.js"},'<h3 id="fixed-options">Op\xe7\xf5es fixas<a aria-labelledby="fixed-options" class="anchor-link-style" href="#fixed-options" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>In the event that you need to lock certain tags so that they can&#39;t be removed, you can set the chips disabled.</p>\n',{demo:"FixedTags.js"},'<h3 id="checkboxes">Caixas de sele\xe7\xe3o<a aria-labelledby="checkboxes" class="anchor-link-style" href="#checkboxes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"CheckboxesTags.js"},'<h3 id="limit-tags">Limitar tags<a aria-labelledby="limit-tags" class="anchor-link-style" href="#limit-tags" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>You can use the <code>limitTags</code> prop to limit the number of displayed options when not focused.</p>\n',{demo:"LimitTags.js"},'<h2 id="sizes">Tamanhos<a aria-labelledby="sizes" class="anchor-link-style" href="#sizes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Fancy smaller inputs? Use the <code>size</code> prop.</p>\n',{demo:"Sizes.js"},'<h2 id="customization">Customiza\xe7\xe3o<a aria-labelledby="customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="custom-input">Input customizado<a aria-labelledby="custom-input" class="anchor-link-style" href="#custom-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>renderInput</code> prop allows you to customize the rendered input. The first argument of this render prop contains props that you need to forward. Pay specific attention to the <code>ref</code> and <code>inputProps</code> keys.</p>\n',{demo:"CustomInputAutocomplete.js"},'<h3 id="githubs-picker">Seletor do GitHub<a aria-labelledby="githubs-picker" class="anchor-link-style" href="#githubs-picker" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>This demo reproduces GitHub&#39;s label picker:</p>\n',{demo:"GitHubLabel.js"},'<p>Head to the <a href="#customized-hook">Customized hook</a> section for a customization example with the <code>useAutocomplete</code> hook instead of the component.</p>\n<h2 id="highlights">Realce<a aria-labelledby="highlights" class="anchor-link-style" href="#highlights" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The following demo relies on <a href="https://github.com/moroshko/autosuggest-highlight">autosuggest-highlight</a>, a small (1 kB) utility for highlighting text in autosuggest and autocomplete components.</p>\n',{demo:"Highlights.js"},'<h2 id="custom-filter">Filtro customizado<a aria-labelledby="custom-filter" class="anchor-link-style" href="#custom-filter" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component exposes a factory to create a filter method that can be provided to the <code>filterOptions</code> prop. You can use it to change the default option filter behavior.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFilterOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/Autocomplete\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="createfilteroptions-config-filteroptions"><code>createFilterOptions(config) =&gt; filterOptions</code><a aria-labelledby="createfilteroptions-config-filteroptions" class="anchor-link-style" href="#createfilteroptions-config-filteroptions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h4>Argumentos</h4><ol>\n<li><code>config</code> (<em>object</em> [opcional]):</li>\n</ol>\n<ul>\n<li><code>config.ignoreAccents</code> (<em>bool</em> [optional]): Padr\xe3o como <code>verdadeiro</code>. Remover sinais diacr\xedticos.</li>\n<li><code>config.ignoreCase</code> (<em>boolean</em> [optional]): Padr\xe3o como <code>verdadeiro</code>. Min\xfasculas em tudo.</li>\n<li><code>config.limit</code> (<em>number</em> [opcional]): Padr\xe3o null. Limitar o n\xfamero de op\xe7\xf5es sugeridas a serem exibidas. Por exemplo, se <code>config.limit</code> \xe9 <code>100</code>, somente as primeiras <code>100</code> op\xe7\xf5es correspondentes s\xe3o exibidas. Isto pode ser \xfatil se um monte corresponderem e a virtualiza\xe7\xe3o n\xe3o estiver configurada.</li>\n<li><code>config.matchFrom</code> (<em>&#39;any&#39; | &#39;start&#39;</em> [opcional]): Padr\xe3o <code>&#39;any&#39;</code>.</li>\n<li><code>config.stringify</code> (<em>func</em> [opcional]): Controla a forma como a op\xe7\xe3o \xe9 convertida em texto, dessa forma pode ser comparada com qualquer fragmento de texto.</li>\n<li><code>config.trim</code> (<em>bool</em> [opcional]): Padr\xe3o <code>false</code>. Remover espa\xe7os ao fim.</li>\n</ul>\n<h4>Retornos</h4><p><code>filterOptions</code>: the returned filter method can be provided directly to the <code>filterOptions</code> prop of the <code>Autocomplete</code> component, or the parameter of the same name for the hook.</p>\n<p>In the following demo, the options need to start with the query prefix:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> filterOptions <span class="token operator">=</span> <span class="token function">createFilterOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">matchFrom</span><span class="token operator">:</span> <span class="token string">\'start\'</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">stringify</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token operator">=></span> option<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n',{demo:"Filter.js",defaultCodeOpen:!1},'<h3 id="advanced">Avan\xe7ado<a aria-labelledby="advanced" class="anchor-link-style" href="#advanced" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>For richer filtering mechanisms, like fuzzy matching, it&#39;s recommended to look at <a href="https://github.com/kentcdodds/match-sorter">match-sorter</a>. For instance:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> matchSorter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'match-sorter\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">filterOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> <span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">matchSorter</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="virtualization">Virtualiza\xe7\xe3o<a aria-labelledby="virtualization" class="anchor-link-style" href="#virtualization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Search within 10,000 randomly generated options. The list is virtualized thanks to <a href="https://github.com/bvaughn/react-window">react-window</a>.</p>\n',{demo:"Virtualize.js"},'<h2 id="events">Eventos<a aria-labelledby="events" class="anchor-link-style" href="#events" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you would like to prevent the default key handler behavior, you can set the event&#39;s <code>defaultMuiPrevented</code> property to <code>true</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span>\n  <span class="token attr-name">onKeyDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">\'Enter\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Previne o comportamento padr\xe3o do \'Enter\'.</span>\n      event<span class="token punctuation">.</span>defaultMuiPrevented <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token comment">// seu c\xf3digo manipulador</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="limitations">Limita\xe7\xf5es<a aria-labelledby="limitations" class="anchor-link-style" href="#limitations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="autocomplete-autofill">autocomplete/autofill<a aria-labelledby="autocomplete-autofill" class="anchor-link-style" href="#autocomplete-autofill" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Browsers have heuristics to help the user fill in form inputs. However, this can harm the UX of the component.</p>\n<p>By default, the component disables the input <strong>autocomplete</strong> feature (remembering what the user has typed for a given field in a previous session) with the <code>autoComplete=&quot;off&quot;</code> attribute. Google Chrome does not currently support this attribute setting (<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=587466">Issue 587466</a>). A possible workaround is to remove the <code>id</code> to have the component generate a random one.</p>\n<p>In addition to remembering past entered values, the browser might also propose <strong>autofill</strong> suggestions (saved login, address, or payment details). In the event you want the avoid autofill, you can try the following:</p>\n<ul>\n<li><p>Nomeie o campo sem fornecer informa\xe7\xf5es para o navegador do que ele representa. <code>id=&quot;field1&quot;</code> ao inv\xe9s de <code>id=&quot;country&quot;</code>. Se voc\xea deixar o id do vazio, o componente utiliza um id aleat\xf3rio.</p>\n</li>\n<li><p>Defina <code>autoComplete=&quot;new-password&quot;</code> (alguns navegadores ir\xe3o sugerir uma senha forte para entradas com esta configura\xe7\xe3o de atributo):</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span>\n  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>params<span class="token punctuation">}</span></span>\n  <span class="token attr-name">inputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span>params<span class="token punctuation">.</span>inputProps<span class="token punctuation">,</span>\n    <span class="token literal-property property">autoComplete</span><span class="token operator">:</span> <span class="token string">\'new-password\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n</ul>\n<p>Read <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion">the guide on MDN</a> for more details.</p>\n<h3 id="ios-voiceover">iOS VoiceOver<a aria-labelledby="ios-voiceover" class="anchor-link-style" href="#ios-voiceover" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>VoiceOver on iOS Safari doesn&#39;t support the <code>aria-owns</code> attribute very well. You can work around the issue with the <code>disablePortal</code> prop.</p>\n<h3 id="listboxcomponent">ListboxComponent<a aria-labelledby="listboxcomponent" class="anchor-link-style" href="#listboxcomponent" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you provide a custom <code>ListboxComponent</code> prop, you need to make sure that the intended scroll container has the <code>role</code> attribute set to <code>listbox</code>. This ensures the correct behavior of the scroll, for example when using the keyboard to navigate.</p>\n<h2 id="accessibility">Acessibilidade<a aria-labelledby="accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>(WAI-ARIA: <a href="https://www.w3.org/WAI/ARIA/apg/patterns/combobox/" target="_blank" rel="noopener nofollow">https://www.w3.org/WAI/ARIA/apg/patterns/combobox/</a>)</p>\n<p>We encourage the usage of a label for the textbox. The component implements the WAI-ARIA authoring practices.</p>\n','<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/pt/material-ui/api/autocomplete/"><code>&lt;Autocomplete /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/popper/"><code>&lt;Popper /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/text-field/"><code>&lt;TextField /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"Caixa de combina\xe7\xe3o",level:2,hash:"combo-box",children:[{text:"Estrutura de op\xe7\xf5es",level:3,hash:"options-structure"},{text:"\xc1rea de exemplos",level:3,hash:"playground"},{text:"Sele\xe7\xe3o de pa\xedses",level:3,hash:"country-select"},{text:"Estados controlados",level:3,hash:"controlled-states"}]},{text:"Free solo",level:2,hash:"free-solo",children:[{text:"Campo search",level:3,hash:"search-input"},{text:"Creatable",level:3,hash:"creatable"}]},{text:"Agrupamento",level:2,hash:"grouped",children:[]},{text:"Op\xe7\xf5es desabilitadas",level:2,hash:"disabled-options",children:[]},{text:"useAutocomplete",level:2,hash:"useautocomplete",children:[{text:"Hook customizado",level:3,hash:"customized-hook"}]},{text:"Requisi\xe7\xf5es ass\xedncronas",level:2,hash:"asynchronous-requests",children:[{text:"Carregar ao abrir",level:3,hash:"load-on-open"},{text:"Pesquisar enquanto digita",level:3,hash:"search-as-you-type"},{text:"Lugares com a API do Google Maps",level:3,hash:"google-maps-place"}]},{text:"M\xfaltiplos valores",level:2,hash:"multiple-values",children:[{text:"Op\xe7\xf5es fixas",level:3,hash:"fixed-options"},{text:"Caixas de sele\xe7\xe3o",level:3,hash:"checkboxes"},{text:"Limitar tags",level:3,hash:"limit-tags"}]},{text:"Tamanhos",level:2,hash:"sizes",children:[]},{text:"Customiza\xe7\xe3o",level:2,hash:"customization",children:[{text:"Input customizado",level:3,hash:"custom-input"},{text:"Seletor do GitHub",level:3,hash:"githubs-picker"}]},{text:"Realce",level:2,hash:"highlights",children:[]},{text:"Filtro customizado",level:2,hash:"custom-filter",children:[{text:"createFilterOptions(&#8203;config) =&gt; filterOptions",level:3,hash:"createfilteroptions-config-filteroptions"},{text:"Avan\xe7ado",level:3,hash:"advanced"}]},{text:"Virtualiza\xe7\xe3o",level:2,hash:"virtualization",children:[]},{text:"Eventos",level:2,hash:"events",children:[]},{text:"Limita\xe7\xf5es",level:2,hash:"limitations",children:[{text:"autocomplete/autofill",level:3,hash:"autocomplete-autofill"},{text:"iOS VoiceOver",level:3,hash:"ios-voiceover"},{text:"ListboxComponent",level:3,hash:"listboxcomponent"}]},{text:"Acessibilidade",level:2,hash:"accessibility",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"Componente React para Autocompletar",headers:{product:"material-ui",title:"Componente React para Autocompletar",components:["Autocomplete","Popper","TextField"],githubLabel:"component: autocomplete",waiAria:"https://www.w3.org/WAI/ARIA/apg/patterns/combobox/"}},zh:{description:"\u81ea\u52a8\u8865\u5168\u662f\u4e00\u4e2a\u666e\u901a\u6587\u672c\u8f93\u5165\u6846\uff0c\u5b83\u901a\u8fc7\u4e00\u7ec4\u5efa\u8bae\u7684\u9009\u9879\u6765\u5e2e\u52a9\u7528\u6237\u8f93\u5165\u3002",location:"/docs/data/material/components/autocomplete/autocomplete-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Autocomplete \u81ea\u52a8\u8865\u5168\u7ec4\u4ef6</h1><p class="description">\u81ea\u52a8\u8865\u5168\u662f\u4e00\u4e2a\u666e\u901a\u6587\u672c\u8f93\u5165\u6846\uff0c\u5b83\u901a\u8fc7\u4e00\u7ec4\u5efa\u8bae\u7684\u9009\u9879\u6765\u5e2e\u52a9\u7528\u6237\u8f93\u5165\u3002</p>\n\n<p>\u8be5\u7ec4\u4ef6\u5e38\u7528\u4e8e\u4ee5\u4e0b\u4e24\u4e2a\u573a\u666f\u4e2d\u7684\u5355\u884c\u6587\u672c\u6846\u8d4b\u503c\uff1a</p>\n<ol>\n<li>\u6587\u672c\u6846\u5fc5\u987b\u53d6\u503c\u4e8e\u4e00\u7ec4\u9884\u8bbe\u597d\u7684\u503c\uff0c\u4f8b\u5982\uff1a\u4e00\u4e2a\u5730\u5740\u9879\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\uff1a<a href="#combo-box">\u7ec4\u5408\u6846</a>\u3002</li>\n<li>\u6587\u672c\u6846\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u4f46\u6700\u597d\u80fd\u591f\u4e3a\u7528\u6237\u63d0\u4f9b\u53ef\u80fd\u7684\u9009\u9879\uff0c\u8b6c\u5982\u641c\u7d22\u6846\u53ef\u4ee5\u63d0\u4f9b\u8fd1\u4f3c\u7684\u6216\u8005\u66fe\u641c\u7d22\u8fc7\u7684\u9009\u9879\u4ee5\u8282\u7701\u7528\u6237\u65f6\u95f4\uff1a<a href="#free-solo">\u7075\u6d3b\u7684\u5355\u6587\u672c\u6846</a>\u3002</li>\n</ol>\n<p>\u6b64\u7ec4\u4ef6\u65e8\u5728\u6539\u8fdb \u201creact-select\u201d \u548c \u201cdownshift\u201d \u8fd9\u4e24\u4e2a\u5305\u3002</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="combo-box">Combo box \u7ec4\u5408\u6846<a aria-labelledby="combo-box" class="anchor-link-style" href="#combo-box" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u5fc5\u987b\u53d6\u503c\u4e8e\u4e00\u4e2a\u9884\u8bbe\u7684\u53ef\u9009\u6570\u636e\u6e90\u3002</p>\n',{demo:"ComboBox.js"},'<h3 id="options-structure">\u9009\u9879\u7ed3\u6784<a aria-labelledby="options-structure" class="anchor-link-style" href="#options-structure" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u7ec4\u4ef6\u63a5\u53d7\u548c\u4ee5\u4e0b\u7ed3\u6784\u76f8\u540c\u7684\u9009\u9879\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">AutocompleteOption</span> <span class="token punctuation">{</span>\n  label<span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// \u6216\u8005</span>\ntype AutocompleteOption <span class="token operator">=</span> string<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u4f8b\u5982\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'The Godfather\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">\'Pulp Fiction\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// or</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'The Godfather\'</span><span class="token punctuation">,</span> <span class="token string">\'Pulp Fiction\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u7136\u800c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b <code>getOptionLabel</code> \u5c5e\u6027\u6765\u4f7f\u7528\u4e0d\u540c\u7684\u7ed3\u6784\u3002</p>\n<h3 id="playground">\u7ec3\u4e60<a aria-labelledby="playground" class="anchor-link-style" href="#playground" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u4e0b\u9762\u7684\u6bcf\u4e2a\u793a\u4f8b\u90fd\u662f\u81ea\u52a8\u5b8c\u6210\u7ec4\u4ef6\u7684\u4e00\u4e2a\u529f\u80fd\u70b9\u7684\u6f14\u793a\u3002</p>\n',{demo:"Playground.js"},'<h3 id="country-select">\u9009\u62e9\u4e00\u4e2a\u56fd\u5bb6<a aria-labelledby="country-select" class="anchor-link-style" href="#country-select" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u4ece 248 \u4e2a\u56fd\u5bb6\u4e2d\u9009\u62e9\u4e00\u4e2a\u3002</p>\n',{demo:"CountrySelect.js"},'<h3 id="controlled-states">\u53ef\u63a7\u7684\u72b6\u6001<a aria-labelledby="controlled-states" class="anchor-link-style" href="#controlled-states" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u6b64\u7ec4\u4ef6\u6709\u4e24\u79cd\u53ef\u63a7\u7684\u72b6\u6001\uff1a</p>\n<ol>\n<li>\u201cvalue\u201d \u72b6\u6001\uff08state\uff09\u5305\u542b\u4e86 <code>value</code>/<code>onChange</code> \u4e24\u79cd\u5c5e\u6027\u7684\u7ec4\u5408\u3002 \u8fd9\u4e2a\u72b6\u6001\u8868\u793a\u7528\u6237\u9009\u62e9\u7684\u503c\uff0c\u5982\u5f53\u6309\u4e0b <kbd class="key">Enter</kbd> \u952e\u65f6\u3002</li>\n<li>\u201cinput value\u201d \u72b6\u6001\uff08state) \u5219\u5305\u542b\u4e86 <code>inputValue</code>/<code>onInputChange</code> \u4e24\u79cd\u5c5e\u6027\u7684\u7ec4\u5408\u3002 \u8fd9\u4e2a\u72b6\u6001\u5c55\u793a\u4e86\u5728\u6587\u672c\u6846\u4e2d\u663e\u793a\u7684\u503c\u3002</li>\n</ol>\n<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f These two states are isolated, they should be controlled independently.</p>\n\n</aside>',{demo:"ControllableStates.js"},'<h2 id="free-solo">\u4efb\u610f\u8f93\u5165<a aria-labelledby="free-solo" class="anchor-link-style" href="#free-solo" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Set <code>freeSolo</code> to true so the textbox can contain any arbitrary value.</p>\n<h3 id="search-input">\u641c\u7d22\u8f93\u5165\u680f<a aria-labelledby="search-input" class="anchor-link-style" href="#search-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The prop is designed to cover the primary use case of a <strong>search input</strong> with suggestions, e.g. Google search or react-autowhatever.</p>\n',{demo:"FreeSolo.js"},'<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f Be careful when using the free solo mode with non-string options, as it may cause type mismatch.</p>\n<p>The value created by typing into the textbox is always a string, regardless of the type of the options.</p>\n\n</aside><h3 id="creatable">\u81ea\u7531\u521b\u9020<a aria-labelledby="creatable" class="anchor-link-style" href="#creatable" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you intend to use this mode for a <a href="#combo-box">combo box</a> like experience (an enhanced version of a select element) we recommend setting:</p>\n<ul>\n<li><code>selectOnFocus</code> \u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u6e05\u9664\u6240\u9009\u5b9a\u7684\u503c\u3002</li>\n<li><code>clearOnBlur</code> \u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u65b0\u503c\u3002</li>\n<li><code>handleHomeEndKeys</code> \u4f7f\u7528<kbd class="key">Home</kbd> \u548c <kbd class="key">End</kbd> \u952e\u5728\u5f39\u51fa\u7a97\u53e3\u5185\u79fb\u52a8\u7126\u70b9\u3002</li>\n<li>\u6700\u540e\u4e00\u4e2a\u9009\u9879\uff0c\u4f8b\u5982 <code>\u52a0\u4e0a &quot;\u4f60\u7684\u641c\u7d22\u7ed3\u679c&quot;</code>\u3002</li>\n</ul>\n',{demo:"FreeSoloCreateOption.js"},"<p>You could also display a dialog when the user wants to add a new value.</p>\n",{demo:"FreeSoloCreateOptionDialog.js"},'<h2 id="grouped">\u5206\u7ec4<a aria-labelledby="grouped" class="anchor-link-style" href="#grouped" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can group the options with the <code>groupBy</code> prop. If you do so, make sure that the options are also sorted with the same dimension that they are grouped by, otherwise, you will notice duplicate headers.</p>\n',{demo:"Grouped.js"},'<h2 id="disabled-options">\u7981\u7528\u9009\u9879<a aria-labelledby="disabled-options" class="anchor-link-style" href="#disabled-options" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"DisabledOptions.js"},'<h2 id="useautocomplete"><code>useAutocomplete</code><a aria-labelledby="useautocomplete" class="anchor-link-style" href="#useautocomplete" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For advanced customization use cases, a headless <code>useAutocomplete()</code> hook is exposed. It accepts almost the same options as the Autocomplete component minus all the props related to the rendering of JSX. The Autocomplete component is built on this hook.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useAutocomplete <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/AutocompleteUnstyled\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>useAutocomplete</code> hook is also reexported from @mui/material for convenience and backward compatibility.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> useAutocomplete <span class="token keyword">from</span> <span class="token string">\'@mui/material/useAutocomplete\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<ul>\n<li>\ud83d\udce6 <a href="/size-snapshot/">4.5 kB gzipped</a>.</li>\n</ul>\n',{demo:"UseAutocomplete.js",defaultCodeOpen:!1},'<h3 id="customized-hook">\u81ea\u5b9a\u4e49\u7684 hook<a aria-labelledby="customized-hook" class="anchor-link-style" href="#customized-hook" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"CustomizedHook.js"},'<p>Head to the <a href="#customization">customization</a> section for an example with the <code>Autocomplete</code> component instead of the hook.</p>\n<h2 id="asynchronous-requests">\u5f02\u6b65\u8bf7\u6c42<a aria-labelledby="asynchronous-requests" class="anchor-link-style" href="#asynchronous-requests" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component supports two different asynchronous use-cases:</p>\n<ul>\n<li><a href="#load-on-open">\u6253\u5f00\u65f6\u52a0\u8f7d</a>\uff1a\u5b83\u5c06\u7b49\u5f85\u7528\u6237\u4e0e\u7ec4\u4ef6\u8fdb\u884c\u4ea4\u4e92\u4ee5\u52a0\u8f7d\u9009\u9879\u3002</li>\n<li><a href="#search-as-you-type">\u5f53\u4f60\u952e\u5165\u5185\u5bb9\u65f6\u8fdb\u884c\u641c\u7d22</a>\uff1a\u6bcf\u4e00\u6b21\u952e\u5165\u90fd\u4f1a\u63d0\u4ea4\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\u3002</li>\n</ul>\n<h3 id="load-on-open">\u6253\u5f00\u65f6\u52a0\u8f7d<a aria-labelledby="load-on-open" class="anchor-link-style" href="#load-on-open" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>It displays a progress state as long as the network request is pending.</p>\n',{demo:"Asynchronous.js"},'<h3 id="search-as-you-type">\u5f53\u4f60\u952e\u5165\u5185\u5bb9\u65f6\u8fdb\u884c\u641c\u7d22<a aria-labelledby="search-as-you-type" class="anchor-link-style" href="#search-as-you-type" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If your logic is fetching new options on each keystroke and using the current value of the textbox to filter on the server, you may want to consider throttling requests.</p>\n<p>Additionally, you will need to disable the built-in filtering of the <code>Autocomplete</code> component by overriding the <code>filterOptions</code> prop:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="google-maps-place">Google Maps Places<a aria-labelledby="google-maps-place" class="anchor-link-style" href="#google-maps-place" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A customized UI for Google Maps Places Autocomplete. For this demo, we need to load the <a href="https://developers.google.com/maps/documentation/javascript/overview">Google Maps JavaScript</a> and <a href="https://developers.google.com/maps/documentation/places/web-service/overview">Google Places</a> API.</p>\n',{demo:"GoogleMaps.js"},'<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0\ufe0f Before you can start using the Google Maps JavaScript API and Places API, you must sign up and create a billing account.</p>\n\n</aside><h2 id="multiple-values">\u591a\u4e2a\u8f93\u5165\u503c<a aria-labelledby="multiple-values" class="anchor-link-style" href="#multiple-values" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Also known as tags, the user is allowed to enter more than one value.</p>\n',{demo:"Tags.js"},'<h3 id="fixed-options">\u56fa\u5b9a\u7684\u9009\u9879<a aria-labelledby="fixed-options" class="anchor-link-style" href="#fixed-options" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>In the event that you need to lock certain tags so that they can&#39;t be removed, you can set the chips disabled.</p>\n',{demo:"FixedTags.js"},'<h3 id="checkboxes">\u590d\u9009\u6846<a aria-labelledby="checkboxes" class="anchor-link-style" href="#checkboxes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"CheckboxesTags.js"},'<h3 id="limit-tags">\u9650\u5236\u6807\u7b7e\u6570\u91cf<a aria-labelledby="limit-tags" class="anchor-link-style" href="#limit-tags" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>You can use the <code>limitTags</code> prop to limit the number of displayed options when not focused.</p>\n',{demo:"LimitTags.js"},'<h2 id="sizes">\u5c3a\u5bf8<a aria-labelledby="sizes" class="anchor-link-style" href="#sizes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Fancy smaller inputs? Use the <code>size</code> prop.</p>\n',{demo:"Sizes.js"},'<h2 id="customization">\u4e2a\u6027\u5316<a aria-labelledby="customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="custom-input">\u81ea\u5b9a\u4e49\u8f93\u5165<a aria-labelledby="custom-input" class="anchor-link-style" href="#custom-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>renderInput</code> prop allows you to customize the rendered input. The first argument of this render prop contains props that you need to forward. Pay specific attention to the <code>ref</code> and <code>inputProps</code> keys.</p>\n',{demo:"CustomInputAutocomplete.js"},'<h3 id="githubs-picker">GitHub \u6807\u7b7e\u9009\u62e9\u5668<a aria-labelledby="githubs-picker" class="anchor-link-style" href="#githubs-picker" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>This demo reproduces GitHub&#39;s label picker:</p>\n',{demo:"GitHubLabel.js"},'<p>Head to the <a href="#customized-hook">Customized hook</a> section for a customization example with the <code>useAutocomplete</code> hook instead of the component.</p>\n<h2 id="highlights">\u9ad8\u4eae\u663e\u793a<a aria-labelledby="highlights" class="anchor-link-style" href="#highlights" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The following demo relies on <a href="https://github.com/moroshko/autosuggest-highlight">autosuggest-highlight</a>, a small (1 kB) utility for highlighting text in autosuggest and autocomplete components.</p>\n',{demo:"Highlights.js"},'<h2 id="custom-filter">\u81ea\u5b9a\u4e49\u7b5b\u9009<a aria-labelledby="custom-filter" class="anchor-link-style" href="#custom-filter" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component exposes a factory to create a filter method that can be provided to the <code>filterOptions</code> prop. You can use it to change the default option filter behavior.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> matchSorter <span class="token keyword">from</span> <span class="token string">\'match-sorter\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">filterOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> <span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">matchSorter</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="createfilteroptions-config-filteroptions"><code>createFilterOptions(config) =&gt; filterOptions</code><a aria-labelledby="createfilteroptions-config-filteroptions" class="anchor-link-style" href="#createfilteroptions-config-filteroptions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h4>\u53c2\u6570</h4><ol>\n<li><code>config</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>config.ignoreAccents</code> (<em>bool</em> [optional])\uff1a\u9ed8\u8ba4\u4e3a <code>true</code>\u3002 \u79fb\u9664\u5b57\u6bcd\u7684\u53d8\u97f3\u7b26\u53f7\u3002</li>\n<li><code>config.ignoreCase</code> (<em>bool</em> [optional])\uff1a\u9ed8\u8ba4\u4e3a <code>true</code>\u3002 \u6240\u6709\u5b57\u6bcd\u90fd\u5c0f\u5199\u3002</li>\n<li><code>config.limit</code> (<em>number</em> [optional]): \u9ed8\u8ba4\u503c\u4e3a null\u3002 \u663e\u793a\u9650\u5b9a\u6570\u91cf\u7684\u5efa\u8bae\u9009\u9879\u3002 \u4f8b\u5982\uff0c\u5982\u679c <code>config.limit</code> \u662f <code>100</code>,\uff0c\u90a3\u4e48\u53ea\u663e\u793a\u524d <code>100 \u4e2a</code> \u5339\u914d\u7684\u9009\u9879\u3002 \u5982\u679c\u5b58\u5728\u5f88\u591a\u9009\u9879\u5339\u914d\uff0c\u5e76\u4e14\u865a\u62df\u5316\u8bbe\u7f6e\u8fd8\u6ca1\u5efa\u7acb\u6210\u65f6\uff0c\u8fd9\u6837\u7684\u9650\u5236\u662f\u975e\u5e38\u6709\u6548\u7684\u3002</li>\n<li><code>config.matchFrom</code> (<em>&#39;any&#39; | &#39;start&#39;</em> [optional]): \u9ed8\u8ba4\u503c\u4e3a <code>&#39;any&#39;</code>\u3002</li>\n<li><code>config.stringify</code> (<em>func</em> [optional]): \u63a7\u5236\u5982\u4f55\u5c06\u4e00\u4e2a\u9009\u9879\u8f6c\u6362\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\uff0c\u9009\u9879\u5c31\u80fd\u591f\u548c\u8f93\u5165\u6587\u672c\u7684\u7247\u6bb5\u76f8\u5339\u914d\u3002</li>\n<li><code>config.trim</code> (<em>bool</em> [optional])\uff1a\u9ed8\u8ba4\u4e3a <code>false</code>\u3002 \u5220\u9664\u5c3e\u968f\u7a7a\u683c\u3002</li>\n</ul>\n<h4>\u8fd4\u56de\u7ed3\u679c</h4><p><code>filterOptions</code>: the returned filter method can be provided directly to the <code>filterOptions</code> prop of the <code>Autocomplete</code> component, or the parameter of the same name for the hook.</p>\n<p>In the following demo, the options need to start with the query prefix:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> filterOptions <span class="token operator">=</span> <span class="token function">createFilterOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">matchFrom</span><span class="token operator">:</span> <span class="token string">\'start\'</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">stringify</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token operator">=></span> option<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n',{demo:"Filter.js",defaultCodeOpen:!1},'<h3 id="advanced">\u8fdb\u9636\u4f7f\u7528<a aria-labelledby="advanced" class="anchor-link-style" href="#advanced" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>For richer filtering mechanisms, like fuzzy matching, it&#39;s recommended to look at <a href="https://github.com/kentcdodds/match-sorter">match-sorter</a>. For instance:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> matchSorter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'match-sorter\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">filterOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> <span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">matchSorter</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span> <span class="token attr-name">filterOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="virtualization">\u865a\u62df\u6eda\u52a8<a aria-labelledby="virtualization" class="anchor-link-style" href="#virtualization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Search within 10,000 randomly generated options. The list is virtualized thanks to <a href="https://github.com/bvaughn/react-window">react-window</a>.</p>\n',{demo:"Virtualize.js"},'<h2 id="events">\u4e8b\u4ef6<a aria-labelledby="events" class="anchor-link-style" href="#events" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you would like to prevent the default key handler behavior, you can set the event&#39;s <code>defaultMuiPrevented</code> property to <code>true</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Autocomplete</span></span>\n  <span class="token attr-name">onKeyDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">\'Enter\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Prevent\'s default \'Enter\' behavior.</span>\n      event<span class="token punctuation">.</span>defaultMuiPrevented <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token comment">// your handler code</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="limitations">\u8bbe\u8ba1\u5c40\u9650<a aria-labelledby="limitations" class="anchor-link-style" href="#limitations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="autocomplete-autofill">autocomplete/autofill<a aria-labelledby="autocomplete-autofill" class="anchor-link-style" href="#autocomplete-autofill" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Browsers have heuristics to help the user fill in form inputs. However, this can harm the UX of the component.</p>\n<p>By default, the component disables the input <strong>autocomplete</strong> feature (remembering what the user has typed for a given field in a previous session) with the <code>autoComplete=&quot;off&quot;</code> attribute. Google Chrome does not currently support this attribute setting (<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=587466">Issue 587466</a>). A possible workaround is to remove the <code>id</code> to have the component generate a random one.</p>\n<p>In addition to remembering past entered values, the browser might also propose <strong>autofill</strong> suggestions (saved login, address, or payment details). In the event you want the avoid autofill, you can try the following:</p>\n<ul>\n<li><p>\u7ed9\u8f93\u5165\u6846\u4e00\u4e2a\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u8fd9\u6837\u4e0d\u4f1a\u7ed9\u6d4f\u89c8\u5668\u6cc4\u9732\u4efb\u4f55\u53ef\u4ee5\u6ee5\u7528\u7684\u4fe1\u606f\u3002 \u4f8b\u5982\uff1a<code>id=&quot;field1&quot;</code> \u800c\u4e0d\u662f <code>id=&quot;country&quot;</code>\u3002 \u82e5\u4f60\u4e0d\u586b\u5199 id \u7684\u8bdd\uff0c\u8be5\u7ec4\u4ef6\u5219\u4f1a\u4f7f\u7528\u4e00\u4e2a\u968f\u673a\u7684 id\u3002</p>\n</li>\n<li><p>\u8bbe\u7f6e <code>autoComplete=&quot;new-password&quot;</code>\uff08\u5f53\u8bbe\u7f6e\u6b64\u5c5e\u6027\u65f6\uff0c\u6709\u4e9b\u6d4f\u89c8\u5668\u4f1a\u5efa\u8bae\u8f93\u5165\u9ad8\u590d\u6742\u5ea6\u7684\u5bc6\u7801\uff09\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span>\n  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>params<span class="token punctuation">}</span></span>\n  <span class="token attr-name">inputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span>params<span class="token punctuation">.</span>inputProps<span class="token punctuation">,</span>\n    <span class="token literal-property property">autoComplete</span><span class="token operator">:</span> <span class="token string">\'new-password\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n</ul>\n<p>Read <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion">the guide on MDN</a> for more details.</p>\n<h3 id="ios-voiceover">iOS VoiceOver \u8f85\u52a9\u529f\u80fd<a aria-labelledby="ios-voiceover" class="anchor-link-style" href="#ios-voiceover" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>VoiceOver on iOS Safari doesn&#39;t support the <code>aria-owns</code> attribute very well. You can work around the issue with the <code>disablePortal</code> prop.</p>\n<h3 id="listboxcomponent">ListboxComponent<a aria-labelledby="listboxcomponent" class="anchor-link-style" href="#listboxcomponent" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you provide a custom <code>ListboxComponent</code> prop, you need to make sure that the intended scroll container has the <code>role</code> attribute set to <code>listbox</code>. This ensures the correct behavior of the scroll, for example when using the keyboard to navigate.</p>\n<h2 id="accessibility">\u65e0\u969c\u788d\u8bbe\u8ba1<a aria-labelledby="accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>(WAI-ARIA: <a href="https://www.w3.org/WAI/ARIA/apg/patterns/combobox/" target="_blank" rel="noopener nofollow">https://www.w3.org/WAI/ARIA/apg/patterns/combobox/</a>)</p>\n<p>We encourage the usage of a label for the textbox. The component implements the WAI-ARIA authoring practices.</p>\n','<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/zh/material-ui/api/autocomplete/"><code>&lt;Autocomplete /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/popper/"><code>&lt;Popper /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/text-field/"><code>&lt;TextField /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"Combo box \u7ec4\u5408\u6846",level:2,hash:"combo-box",children:[{text:"\u9009\u9879\u7ed3\u6784",level:3,hash:"options-structure"},{text:"\u7ec3\u4e60",level:3,hash:"playground"},{text:"\u9009\u62e9\u4e00\u4e2a\u56fd\u5bb6",level:3,hash:"country-select"},{text:"\u53ef\u63a7\u7684\u72b6\u6001",level:3,hash:"controlled-states"}]},{text:"\u4efb\u610f\u8f93\u5165",level:2,hash:"free-solo",children:[{text:"\u641c\u7d22\u8f93\u5165\u680f",level:3,hash:"search-input"},{text:"\u81ea\u7531\u521b\u9020",level:3,hash:"creatable"}]},{text:"\u5206\u7ec4",level:2,hash:"grouped",children:[]},{text:"\u7981\u7528\u9009\u9879",level:2,hash:"disabled-options",children:[]},{text:"useAutocomplete",level:2,hash:"useautocomplete",children:[{text:"\u81ea\u5b9a\u4e49\u7684 hook",level:3,hash:"customized-hook"}]},{text:"\u5f02\u6b65\u8bf7\u6c42",level:2,hash:"asynchronous-requests",children:[{text:"\u6253\u5f00\u65f6\u52a0\u8f7d",level:3,hash:"load-on-open"},{text:"\u5f53\u4f60\u952e\u5165\u5185\u5bb9\u65f6\u8fdb\u884c\u641c\u7d22",level:3,hash:"search-as-you-type"},{text:"Google Maps Places",level:3,hash:"google-maps-place"}]},{text:"\u591a\u4e2a\u8f93\u5165\u503c",level:2,hash:"multiple-values",children:[{text:"\u56fa\u5b9a\u7684\u9009\u9879",level:3,hash:"fixed-options"},{text:"\u590d\u9009\u6846",level:3,hash:"checkboxes"},{text:"\u9650\u5236\u6807\u7b7e\u6570\u91cf",level:3,hash:"limit-tags"}]},{text:"\u5c3a\u5bf8",level:2,hash:"sizes",children:[]},{text:"\u4e2a\u6027\u5316",level:2,hash:"customization",children:[{text:"\u81ea\u5b9a\u4e49\u8f93\u5165",level:3,hash:"custom-input"},{text:"GitHub \u6807\u7b7e\u9009\u62e9\u5668",level:3,hash:"githubs-picker"}]},{text:"\u9ad8\u4eae\u663e\u793a",level:2,hash:"highlights",children:[]},{text:"\u81ea\u5b9a\u4e49\u7b5b\u9009",level:2,hash:"custom-filter",children:[{text:"createFilterOptions(&#8203;config) =&gt; filterOptions",level:3,hash:"createfilteroptions-config-filteroptions"},{text:"\u8fdb\u9636\u4f7f\u7528",level:3,hash:"advanced"}]},{text:"\u865a\u62df\u6eda\u52a8",level:2,hash:"virtualization",children:[]},{text:"\u4e8b\u4ef6",level:2,hash:"events",children:[]},{text:"\u8bbe\u8ba1\u5c40\u9650",level:2,hash:"limitations",children:[{text:"autocomplete/autofill",level:3,hash:"autocomplete-autofill"},{text:"iOS VoiceOver \u8f85\u52a9\u529f\u80fd",level:3,hash:"ios-voiceover"},{text:"ListboxComponent",level:3,hash:"listboxcomponent"}]},{text:"\u65e0\u969c\u788d\u8bbe\u8ba1",level:2,hash:"accessibility",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"React Autocomplete\uff08\u81ea\u52a8\u8865\u5168\uff09\u7ec4\u4ef6",headers:{product:"material-ui",title:"React Autocomplete\uff08\u81ea\u52a8\u8865\u5168\uff09\u7ec4\u4ef6",components:["Autocomplete","Popper","TextField"],githubLabel:"component: autocomplete",waiAria:"https://www.w3.org/WAI/ARIA/apg/patterns/combobox/"}}},yt={"Playground.js":{module:"./Playground.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Stack from '@mui/material/Stack';\n\nexport default function Playground() {\n  const defaultProps = {\n    options: top100Films,\n    getOptionLabel: (option) => option.title,\n  };\n\n  const flatProps = {\n    options: top100Films.map((option) => option.title),\n  };\n\n  const [value, setValue] = React.useState(null);\n\n  return (\n    <Stack spacing={1} sx={{ width: 300 }}>\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-close-on-select\"\n        disableCloseOnSelect\n        renderInput={(params) => (\n          <TextField {...params} label=\"disableCloseOnSelect\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"clear-on-escape\"\n        clearOnEscape\n        renderInput={(params) => (\n          <TextField {...params} label=\"clearOnEscape\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-clearable\"\n        disableClearable\n        renderInput={(params) => (\n          <TextField {...params} label=\"disableClearable\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"include-input-in-list\"\n        includeInputInList\n        renderInput={(params) => (\n          <TextField {...params} label=\"includeInputInList\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...flatProps}\n        id=\"flat-demo\"\n        renderInput={(params) => (\n          <TextField {...params} label=\"flat\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"controlled-demo\"\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        renderInput={(params) => (\n          <TextField {...params} label=\"controlled\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"auto-complete\"\n        autoComplete\n        includeInputInList\n        renderInput={(params) => (\n          <TextField {...params} label=\"autoComplete\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-list-wrap\"\n        disableListWrap\n        renderInput={(params) => (\n          <TextField {...params} label=\"disableListWrap\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"open-on-focus\"\n        openOnFocus\n        renderInput={(params) => (\n          <TextField {...params} label=\"openOnFocus\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"auto-highlight\"\n        autoHighlight\n        renderInput={(params) => (\n          <TextField {...params} label=\"autoHighlight\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"auto-select\"\n        autoSelect\n        renderInput={(params) => (\n          <TextField {...params} label=\"autoSelect\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disabled\"\n        disabled\n        renderInput={(params) => (\n          <TextField {...params} label=\"disabled\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-portal\"\n        disablePortal\n        renderInput={(params) => (\n          <TextField {...params} label=\"disablePortal\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"blur-on-select\"\n        blurOnSelect\n        renderInput={(params) => (\n          <TextField {...params} label=\"blurOnSelect\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"clear-on-blur\"\n        clearOnBlur\n        renderInput={(params) => (\n          <TextField {...params} label=\"clearOnBlur\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"select-on-focus\"\n        selectOnFocus\n        renderInput={(params) => (\n          <TextField {...params} label=\"selectOnFocus\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...flatProps}\n        id=\"readOnly\"\n        readOnly\n        defaultValue={flatProps.options[13]}\n        renderInput={(params) => (\n          <TextField {...params} label=\"readOnly\" variant=\"standard\" />\n        )}\n      />\n    </Stack>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./Playground.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Stack from '@mui/material/Stack';\n\nexport default function Playground() {\n  const defaultProps = {\n    options: top100Films,\n    getOptionLabel: (option: FilmOptionType) => option.title,\n  };\n  const flatProps = {\n    options: top100Films.map((option) => option.title),\n  };\n  const [value, setValue] = React.useState<FilmOptionType | null>(null);\n\n  return (\n    <Stack spacing={1} sx={{ width: 300 }}>\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-close-on-select\"\n        disableCloseOnSelect\n        renderInput={(params) => (\n          <TextField {...params} label=\"disableCloseOnSelect\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"clear-on-escape\"\n        clearOnEscape\n        renderInput={(params) => (\n          <TextField {...params} label=\"clearOnEscape\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-clearable\"\n        disableClearable\n        renderInput={(params) => (\n          <TextField {...params} label=\"disableClearable\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"include-input-in-list\"\n        includeInputInList\n        renderInput={(params) => (\n          <TextField {...params} label=\"includeInputInList\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...flatProps}\n        id=\"flat-demo\"\n        renderInput={(params) => (\n          <TextField {...params} label=\"flat\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"controlled-demo\"\n        value={value}\n        onChange={(event: any, newValue: FilmOptionType | null) => {\n          setValue(newValue);\n        }}\n        renderInput={(params) => (\n          <TextField {...params} label=\"controlled\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"auto-complete\"\n        autoComplete\n        includeInputInList\n        renderInput={(params) => (\n          <TextField {...params} label=\"autoComplete\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-list-wrap\"\n        disableListWrap\n        renderInput={(params) => (\n          <TextField {...params} label=\"disableListWrap\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"open-on-focus\"\n        openOnFocus\n        renderInput={(params) => (\n          <TextField {...params} label=\"openOnFocus\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"auto-highlight\"\n        autoHighlight\n        renderInput={(params) => (\n          <TextField {...params} label=\"autoHighlight\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"auto-select\"\n        autoSelect\n        renderInput={(params) => (\n          <TextField {...params} label=\"autoSelect\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disabled\"\n        disabled\n        renderInput={(params) => (\n          <TextField {...params} label=\"disabled\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"disable-portal\"\n        disablePortal\n        renderInput={(params) => (\n          <TextField {...params} label=\"disablePortal\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"blur-on-select\"\n        blurOnSelect\n        renderInput={(params) => (\n          <TextField {...params} label=\"blurOnSelect\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"clear-on-blur\"\n        clearOnBlur\n        renderInput={(params) => (\n          <TextField {...params} label=\"clearOnBlur\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...defaultProps}\n        id=\"select-on-focus\"\n        selectOnFocus\n        renderInput={(params) => (\n          <TextField {...params} label=\"selectOnFocus\" variant=\"standard\" />\n        )}\n      />\n      <Autocomplete\n        {...flatProps}\n        id=\"readOnly\"\n        readOnly\n        defaultValue={flatProps.options[13]}\n        renderInput={(params) => (\n          <TextField {...params} label=\"readOnly\" variant=\"standard\" />\n        )}\n      />\n    </Stack>\n  );\n}\n\ninterface FilmOptionType {\n  title: string;\n  year: number;\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"CountrySelect.js":{module:"./CountrySelect.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function CountrySelect() {\n  return (\n    <Autocomplete\n      id=\"country-select-demo\"\n      sx={{ width: 300 }}\n      options={countries}\n      autoHighlight\n      getOptionLabel={(option) => option.label}\n      renderOption={(props, option) => (\n        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n          <img\n            loading=\"lazy\"\n            width=\"20\"\n            src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n            srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n            alt=\"\"\n          />\n          {option.label} ({option.code}) +{option.phone}\n        </Box>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Choose a country\"\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n      )}\n    />\n  );\n}\n\n// From https://bitbucket.org/atlassian/atlaskit-mk-2/raw/4ad0e56649c3e6c973e226b7efaeb28cb240ccb0/packages/core/select/src/data/countries.js\nconst countries = [\n  { code: 'AD', label: 'Andorra', phone: '376' },\n  {\n    code: 'AE',\n    label: 'United Arab Emirates',\n    phone: '971',\n  },\n  { code: 'AF', label: 'Afghanistan', phone: '93' },\n  {\n    code: 'AG',\n    label: 'Antigua and Barbuda',\n    phone: '1-268',\n  },\n  { code: 'AI', label: 'Anguilla', phone: '1-264' },\n  { code: 'AL', label: 'Albania', phone: '355' },\n  { code: 'AM', label: 'Armenia', phone: '374' },\n  { code: 'AO', label: 'Angola', phone: '244' },\n  { code: 'AQ', label: 'Antarctica', phone: '672' },\n  { code: 'AR', label: 'Argentina', phone: '54' },\n  { code: 'AS', label: 'American Samoa', phone: '1-684' },\n  { code: 'AT', label: 'Austria', phone: '43' },\n  {\n    code: 'AU',\n    label: 'Australia',\n    phone: '61',\n    suggested: true,\n  },\n  { code: 'AW', label: 'Aruba', phone: '297' },\n  { code: 'AX', label: 'Alland Islands', phone: '358' },\n  { code: 'AZ', label: 'Azerbaijan', phone: '994' },\n  {\n    code: 'BA',\n    label: 'Bosnia and Herzegovina',\n    phone: '387',\n  },\n  { code: 'BB', label: 'Barbados', phone: '1-246' },\n  { code: 'BD', label: 'Bangladesh', phone: '880' },\n  { code: 'BE', label: 'Belgium', phone: '32' },\n  { code: 'BF', label: 'Burkina Faso', phone: '226' },\n  { code: 'BG', label: 'Bulgaria', phone: '359' },\n  { code: 'BH', label: 'Bahrain', phone: '973' },\n  { code: 'BI', label: 'Burundi', phone: '257' },\n  { code: 'BJ', label: 'Benin', phone: '229' },\n  { code: 'BL', label: 'Saint Barthelemy', phone: '590' },\n  { code: 'BM', label: 'Bermuda', phone: '1-441' },\n  { code: 'BN', label: 'Brunei Darussalam', phone: '673' },\n  { code: 'BO', label: 'Bolivia', phone: '591' },\n  { code: 'BR', label: 'Brazil', phone: '55' },\n  { code: 'BS', label: 'Bahamas', phone: '1-242' },\n  { code: 'BT', label: 'Bhutan', phone: '975' },\n  { code: 'BV', label: 'Bouvet Island', phone: '47' },\n  { code: 'BW', label: 'Botswana', phone: '267' },\n  { code: 'BY', label: 'Belarus', phone: '375' },\n  { code: 'BZ', label: 'Belize', phone: '501' },\n  {\n    code: 'CA',\n    label: 'Canada',\n    phone: '1',\n    suggested: true,\n  },\n  {\n    code: 'CC',\n    label: 'Cocos (Keeling) Islands',\n    phone: '61',\n  },\n  {\n    code: 'CD',\n    label: 'Congo, Democratic Republic of the',\n    phone: '243',\n  },\n  {\n    code: 'CF',\n    label: 'Central African Republic',\n    phone: '236',\n  },\n  {\n    code: 'CG',\n    label: 'Congo, Republic of the',\n    phone: '242',\n  },\n  { code: 'CH', label: 'Switzerland', phone: '41' },\n  { code: 'CI', label: \"Cote d'Ivoire\", phone: '225' },\n  { code: 'CK', label: 'Cook Islands', phone: '682' },\n  { code: 'CL', label: 'Chile', phone: '56' },\n  { code: 'CM', label: 'Cameroon', phone: '237' },\n  { code: 'CN', label: 'China', phone: '86' },\n  { code: 'CO', label: 'Colombia', phone: '57' },\n  { code: 'CR', label: 'Costa Rica', phone: '506' },\n  { code: 'CU', label: 'Cuba', phone: '53' },\n  { code: 'CV', label: 'Cape Verde', phone: '238' },\n  { code: 'CW', label: 'Curacao', phone: '599' },\n  { code: 'CX', label: 'Christmas Island', phone: '61' },\n  { code: 'CY', label: 'Cyprus', phone: '357' },\n  { code: 'CZ', label: 'Czech Republic', phone: '420' },\n  {\n    code: 'DE',\n    label: 'Germany',\n    phone: '49',\n    suggested: true,\n  },\n  { code: 'DJ', label: 'Djibouti', phone: '253' },\n  { code: 'DK', label: 'Denmark', phone: '45' },\n  { code: 'DM', label: 'Dominica', phone: '1-767' },\n  {\n    code: 'DO',\n    label: 'Dominican Republic',\n    phone: '1-809',\n  },\n  { code: 'DZ', label: 'Algeria', phone: '213' },\n  { code: 'EC', label: 'Ecuador', phone: '593' },\n  { code: 'EE', label: 'Estonia', phone: '372' },\n  { code: 'EG', label: 'Egypt', phone: '20' },\n  { code: 'EH', label: 'Western Sahara', phone: '212' },\n  { code: 'ER', label: 'Eritrea', phone: '291' },\n  { code: 'ES', label: 'Spain', phone: '34' },\n  { code: 'ET', label: 'Ethiopia', phone: '251' },\n  { code: 'FI', label: 'Finland', phone: '358' },\n  { code: 'FJ', label: 'Fiji', phone: '679' },\n  {\n    code: 'FK',\n    label: 'Falkland Islands (Malvinas)',\n    phone: '500',\n  },\n  {\n    code: 'FM',\n    label: 'Micronesia, Federated States of',\n    phone: '691',\n  },\n  { code: 'FO', label: 'Faroe Islands', phone: '298' },\n  {\n    code: 'FR',\n    label: 'France',\n    phone: '33',\n    suggested: true,\n  },\n  { code: 'GA', label: 'Gabon', phone: '241' },\n  { code: 'GB', label: 'United Kingdom', phone: '44' },\n  { code: 'GD', label: 'Grenada', phone: '1-473' },\n  { code: 'GE', label: 'Georgia', phone: '995' },\n  { code: 'GF', label: 'French Guiana', phone: '594' },\n  { code: 'GG', label: 'Guernsey', phone: '44' },\n  { code: 'GH', label: 'Ghana', phone: '233' },\n  { code: 'GI', label: 'Gibraltar', phone: '350' },\n  { code: 'GL', label: 'Greenland', phone: '299' },\n  { code: 'GM', label: 'Gambia', phone: '220' },\n  { code: 'GN', label: 'Guinea', phone: '224' },\n  { code: 'GP', label: 'Guadeloupe', phone: '590' },\n  { code: 'GQ', label: 'Equatorial Guinea', phone: '240' },\n  { code: 'GR', label: 'Greece', phone: '30' },\n  {\n    code: 'GS',\n    label: 'South Georgia and the South Sandwich Islands',\n    phone: '500',\n  },\n  { code: 'GT', label: 'Guatemala', phone: '502' },\n  { code: 'GU', label: 'Guam', phone: '1-671' },\n  { code: 'GW', label: 'Guinea-Bissau', phone: '245' },\n  { code: 'GY', label: 'Guyana', phone: '592' },\n  { code: 'HK', label: 'Hong Kong', phone: '852' },\n  {\n    code: 'HM',\n    label: 'Heard Island and McDonald Islands',\n    phone: '672',\n  },\n  { code: 'HN', label: 'Honduras', phone: '504' },\n  { code: 'HR', label: 'Croatia', phone: '385' },\n  { code: 'HT', label: 'Haiti', phone: '509' },\n  { code: 'HU', label: 'Hungary', phone: '36' },\n  { code: 'ID', label: 'Indonesia', phone: '62' },\n  { code: 'IE', label: 'Ireland', phone: '353' },\n  { code: 'IL', label: 'Israel', phone: '972' },\n  { code: 'IM', label: 'Isle of Man', phone: '44' },\n  { code: 'IN', label: 'India', phone: '91' },\n  {\n    code: 'IO',\n    label: 'British Indian Ocean Territory',\n    phone: '246',\n  },\n  { code: 'IQ', label: 'Iraq', phone: '964' },\n  {\n    code: 'IR',\n    label: 'Iran, Islamic Republic of',\n    phone: '98',\n  },\n  { code: 'IS', label: 'Iceland', phone: '354' },\n  { code: 'IT', label: 'Italy', phone: '39' },\n  { code: 'JE', label: 'Jersey', phone: '44' },\n  { code: 'JM', label: 'Jamaica', phone: '1-876' },\n  { code: 'JO', label: 'Jordan', phone: '962' },\n  {\n    code: 'JP',\n    label: 'Japan',\n    phone: '81',\n    suggested: true,\n  },\n  { code: 'KE', label: 'Kenya', phone: '254' },\n  { code: 'KG', label: 'Kyrgyzstan', phone: '996' },\n  { code: 'KH', label: 'Cambodia', phone: '855' },\n  { code: 'KI', label: 'Kiribati', phone: '686' },\n  { code: 'KM', label: 'Comoros', phone: '269' },\n  {\n    code: 'KN',\n    label: 'Saint Kitts and Nevis',\n    phone: '1-869',\n  },\n  {\n    code: 'KP',\n    label: \"Korea, Democratic People's Republic of\",\n    phone: '850',\n  },\n  { code: 'KR', label: 'Korea, Republic of', phone: '82' },\n  { code: 'KW', label: 'Kuwait', phone: '965' },\n  { code: 'KY', label: 'Cayman Islands', phone: '1-345' },\n  { code: 'KZ', label: 'Kazakhstan', phone: '7' },\n  {\n    code: 'LA',\n    label: \"Lao People's Democratic Republic\",\n    phone: '856',\n  },\n  { code: 'LB', label: 'Lebanon', phone: '961' },\n  { code: 'LC', label: 'Saint Lucia', phone: '1-758' },\n  { code: 'LI', label: 'Liechtenstein', phone: '423' },\n  { code: 'LK', label: 'Sri Lanka', phone: '94' },\n  { code: 'LR', label: 'Liberia', phone: '231' },\n  { code: 'LS', label: 'Lesotho', phone: '266' },\n  { code: 'LT', label: 'Lithuania', phone: '370' },\n  { code: 'LU', label: 'Luxembourg', phone: '352' },\n  { code: 'LV', label: 'Latvia', phone: '371' },\n  { code: 'LY', label: 'Libya', phone: '218' },\n  { code: 'MA', label: 'Morocco', phone: '212' },\n  { code: 'MC', label: 'Monaco', phone: '377' },\n  {\n    code: 'MD',\n    label: 'Moldova, Republic of',\n    phone: '373',\n  },\n  { code: 'ME', label: 'Montenegro', phone: '382' },\n  {\n    code: 'MF',\n    label: 'Saint Martin (French part)',\n    phone: '590',\n  },\n  { code: 'MG', label: 'Madagascar', phone: '261' },\n  { code: 'MH', label: 'Marshall Islands', phone: '692' },\n  {\n    code: 'MK',\n    label: 'Macedonia, the Former Yugoslav Republic of',\n    phone: '389',\n  },\n  { code: 'ML', label: 'Mali', phone: '223' },\n  { code: 'MM', label: 'Myanmar', phone: '95' },\n  { code: 'MN', label: 'Mongolia', phone: '976' },\n  { code: 'MO', label: 'Macao', phone: '853' },\n  {\n    code: 'MP',\n    label: 'Northern Mariana Islands',\n    phone: '1-670',\n  },\n  { code: 'MQ', label: 'Martinique', phone: '596' },\n  { code: 'MR', label: 'Mauritania', phone: '222' },\n  { code: 'MS', label: 'Montserrat', phone: '1-664' },\n  { code: 'MT', label: 'Malta', phone: '356' },\n  { code: 'MU', label: 'Mauritius', phone: '230' },\n  { code: 'MV', label: 'Maldives', phone: '960' },\n  { code: 'MW', label: 'Malawi', phone: '265' },\n  { code: 'MX', label: 'Mexico', phone: '52' },\n  { code: 'MY', label: 'Malaysia', phone: '60' },\n  { code: 'MZ', label: 'Mozambique', phone: '258' },\n  { code: 'NA', label: 'Namibia', phone: '264' },\n  { code: 'NC', label: 'New Caledonia', phone: '687' },\n  { code: 'NE', label: 'Niger', phone: '227' },\n  { code: 'NF', label: 'Norfolk Island', phone: '672' },\n  { code: 'NG', label: 'Nigeria', phone: '234' },\n  { code: 'NI', label: 'Nicaragua', phone: '505' },\n  { code: 'NL', label: 'Netherlands', phone: '31' },\n  { code: 'NO', label: 'Norway', phone: '47' },\n  { code: 'NP', label: 'Nepal', phone: '977' },\n  { code: 'NR', label: 'Nauru', phone: '674' },\n  { code: 'NU', label: 'Niue', phone: '683' },\n  { code: 'NZ', label: 'New Zealand', phone: '64' },\n  { code: 'OM', label: 'Oman', phone: '968' },\n  { code: 'PA', label: 'Panama', phone: '507' },\n  { code: 'PE', label: 'Peru', phone: '51' },\n  { code: 'PF', label: 'French Polynesia', phone: '689' },\n  { code: 'PG', label: 'Papua New Guinea', phone: '675' },\n  { code: 'PH', label: 'Philippines', phone: '63' },\n  { code: 'PK', label: 'Pakistan', phone: '92' },\n  { code: 'PL', label: 'Poland', phone: '48' },\n  {\n    code: 'PM',\n    label: 'Saint Pierre and Miquelon',\n    phone: '508',\n  },\n  { code: 'PN', label: 'Pitcairn', phone: '870' },\n  { code: 'PR', label: 'Puerto Rico', phone: '1' },\n  {\n    code: 'PS',\n    label: 'Palestine, State of',\n    phone: '970',\n  },\n  { code: 'PT', label: 'Portugal', phone: '351' },\n  { code: 'PW', label: 'Palau', phone: '680' },\n  { code: 'PY', label: 'Paraguay', phone: '595' },\n  { code: 'QA', label: 'Qatar', phone: '974' },\n  { code: 'RE', label: 'Reunion', phone: '262' },\n  { code: 'RO', label: 'Romania', phone: '40' },\n  { code: 'RS', label: 'Serbia', phone: '381' },\n  { code: 'RU', label: 'Russian Federation', phone: '7' },\n  { code: 'RW', label: 'Rwanda', phone: '250' },\n  { code: 'SA', label: 'Saudi Arabia', phone: '966' },\n  { code: 'SB', label: 'Solomon Islands', phone: '677' },\n  { code: 'SC', label: 'Seychelles', phone: '248' },\n  { code: 'SD', label: 'Sudan', phone: '249' },\n  { code: 'SE', label: 'Sweden', phone: '46' },\n  { code: 'SG', label: 'Singapore', phone: '65' },\n  { code: 'SH', label: 'Saint Helena', phone: '290' },\n  { code: 'SI', label: 'Slovenia', phone: '386' },\n  {\n    code: 'SJ',\n    label: 'Svalbard and Jan Mayen',\n    phone: '47',\n  },\n  { code: 'SK', label: 'Slovakia', phone: '421' },\n  { code: 'SL', label: 'Sierra Leone', phone: '232' },\n  { code: 'SM', label: 'San Marino', phone: '378' },\n  { code: 'SN', label: 'Senegal', phone: '221' },\n  { code: 'SO', label: 'Somalia', phone: '252' },\n  { code: 'SR', label: 'Suriname', phone: '597' },\n  { code: 'SS', label: 'South Sudan', phone: '211' },\n  {\n    code: 'ST',\n    label: 'Sao Tome and Principe',\n    phone: '239',\n  },\n  { code: 'SV', label: 'El Salvador', phone: '503' },\n  {\n    code: 'SX',\n    label: 'Sint Maarten (Dutch part)',\n    phone: '1-721',\n  },\n  {\n    code: 'SY',\n    label: 'Syrian Arab Republic',\n    phone: '963',\n  },\n  { code: 'SZ', label: 'Swaziland', phone: '268' },\n  {\n    code: 'TC',\n    label: 'Turks and Caicos Islands',\n    phone: '1-649',\n  },\n  { code: 'TD', label: 'Chad', phone: '235' },\n  {\n    code: 'TF',\n    label: 'French Southern Territories',\n    phone: '262',\n  },\n  { code: 'TG', label: 'Togo', phone: '228' },\n  { code: 'TH', label: 'Thailand', phone: '66' },\n  { code: 'TJ', label: 'Tajikistan', phone: '992' },\n  { code: 'TK', label: 'Tokelau', phone: '690' },\n  { code: 'TL', label: 'Timor-Leste', phone: '670' },\n  { code: 'TM', label: 'Turkmenistan', phone: '993' },\n  { code: 'TN', label: 'Tunisia', phone: '216' },\n  { code: 'TO', label: 'Tonga', phone: '676' },\n  { code: 'TR', label: 'Turkey', phone: '90' },\n  {\n    code: 'TT',\n    label: 'Trinidad and Tobago',\n    phone: '1-868',\n  },\n  { code: 'TV', label: 'Tuvalu', phone: '688' },\n  {\n    code: 'TW',\n    label: 'Taiwan, Province of China',\n    phone: '886',\n  },\n  {\n    code: 'TZ',\n    label: 'United Republic of Tanzania',\n    phone: '255',\n  },\n  { code: 'UA', label: 'Ukraine', phone: '380' },\n  { code: 'UG', label: 'Uganda', phone: '256' },\n  {\n    code: 'US',\n    label: 'United States',\n    phone: '1',\n    suggested: true,\n  },\n  { code: 'UY', label: 'Uruguay', phone: '598' },\n  { code: 'UZ', label: 'Uzbekistan', phone: '998' },\n  {\n    code: 'VA',\n    label: 'Holy See (Vatican City State)',\n    phone: '379',\n  },\n  {\n    code: 'VC',\n    label: 'Saint Vincent and the Grenadines',\n    phone: '1-784',\n  },\n  { code: 'VE', label: 'Venezuela', phone: '58' },\n  {\n    code: 'VG',\n    label: 'British Virgin Islands',\n    phone: '1-284',\n  },\n  {\n    code: 'VI',\n    label: 'US Virgin Islands',\n    phone: '1-340',\n  },\n  { code: 'VN', label: 'Vietnam', phone: '84' },\n  { code: 'VU', label: 'Vanuatu', phone: '678' },\n  { code: 'WF', label: 'Wallis and Futuna', phone: '681' },\n  { code: 'WS', label: 'Samoa', phone: '685' },\n  { code: 'XK', label: 'Kosovo', phone: '383' },\n  { code: 'YE', label: 'Yemen', phone: '967' },\n  { code: 'YT', label: 'Mayotte', phone: '262' },\n  { code: 'ZA', label: 'South Africa', phone: '27' },\n  { code: 'ZM', label: 'Zambia', phone: '260' },\n  { code: 'ZW', label: 'Zimbabwe', phone: '263' },\n];\n",moduleTS:"./CountrySelect.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function CountrySelect() {\n  return (\n    <Autocomplete\n      id=\"country-select-demo\"\n      sx={{ width: 300 }}\n      options={countries}\n      autoHighlight\n      getOptionLabel={(option) => option.label}\n      renderOption={(props, option) => (\n        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n          <img\n            loading=\"lazy\"\n            width=\"20\"\n            src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n            srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n            alt=\"\"\n          />\n          {option.label} ({option.code}) +{option.phone}\n        </Box>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Choose a country\"\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n      )}\n    />\n  );\n}\n\ninterface CountryType {\n  code: string;\n  label: string;\n  phone: string;\n  suggested?: boolean;\n}\n\n// From https://bitbucket.org/atlassian/atlaskit-mk-2/raw/4ad0e56649c3e6c973e226b7efaeb28cb240ccb0/packages/core/select/src/data/countries.js\nconst countries: readonly CountryType[] = [\n  { code: 'AD', label: 'Andorra', phone: '376' },\n  {\n    code: 'AE',\n    label: 'United Arab Emirates',\n    phone: '971',\n  },\n  { code: 'AF', label: 'Afghanistan', phone: '93' },\n  {\n    code: 'AG',\n    label: 'Antigua and Barbuda',\n    phone: '1-268',\n  },\n  { code: 'AI', label: 'Anguilla', phone: '1-264' },\n  { code: 'AL', label: 'Albania', phone: '355' },\n  { code: 'AM', label: 'Armenia', phone: '374' },\n  { code: 'AO', label: 'Angola', phone: '244' },\n  { code: 'AQ', label: 'Antarctica', phone: '672' },\n  { code: 'AR', label: 'Argentina', phone: '54' },\n  { code: 'AS', label: 'American Samoa', phone: '1-684' },\n  { code: 'AT', label: 'Austria', phone: '43' },\n  {\n    code: 'AU',\n    label: 'Australia',\n    phone: '61',\n    suggested: true,\n  },\n  { code: 'AW', label: 'Aruba', phone: '297' },\n  { code: 'AX', label: 'Alland Islands', phone: '358' },\n  { code: 'AZ', label: 'Azerbaijan', phone: '994' },\n  {\n    code: 'BA',\n    label: 'Bosnia and Herzegovina',\n    phone: '387',\n  },\n  { code: 'BB', label: 'Barbados', phone: '1-246' },\n  { code: 'BD', label: 'Bangladesh', phone: '880' },\n  { code: 'BE', label: 'Belgium', phone: '32' },\n  { code: 'BF', label: 'Burkina Faso', phone: '226' },\n  { code: 'BG', label: 'Bulgaria', phone: '359' },\n  { code: 'BH', label: 'Bahrain', phone: '973' },\n  { code: 'BI', label: 'Burundi', phone: '257' },\n  { code: 'BJ', label: 'Benin', phone: '229' },\n  { code: 'BL', label: 'Saint Barthelemy', phone: '590' },\n  { code: 'BM', label: 'Bermuda', phone: '1-441' },\n  { code: 'BN', label: 'Brunei Darussalam', phone: '673' },\n  { code: 'BO', label: 'Bolivia', phone: '591' },\n  { code: 'BR', label: 'Brazil', phone: '55' },\n  { code: 'BS', label: 'Bahamas', phone: '1-242' },\n  { code: 'BT', label: 'Bhutan', phone: '975' },\n  { code: 'BV', label: 'Bouvet Island', phone: '47' },\n  { code: 'BW', label: 'Botswana', phone: '267' },\n  { code: 'BY', label: 'Belarus', phone: '375' },\n  { code: 'BZ', label: 'Belize', phone: '501' },\n  {\n    code: 'CA',\n    label: 'Canada',\n    phone: '1',\n    suggested: true,\n  },\n  {\n    code: 'CC',\n    label: 'Cocos (Keeling) Islands',\n    phone: '61',\n  },\n  {\n    code: 'CD',\n    label: 'Congo, Democratic Republic of the',\n    phone: '243',\n  },\n  {\n    code: 'CF',\n    label: 'Central African Republic',\n    phone: '236',\n  },\n  {\n    code: 'CG',\n    label: 'Congo, Republic of the',\n    phone: '242',\n  },\n  { code: 'CH', label: 'Switzerland', phone: '41' },\n  { code: 'CI', label: \"Cote d'Ivoire\", phone: '225' },\n  { code: 'CK', label: 'Cook Islands', phone: '682' },\n  { code: 'CL', label: 'Chile', phone: '56' },\n  { code: 'CM', label: 'Cameroon', phone: '237' },\n  { code: 'CN', label: 'China', phone: '86' },\n  { code: 'CO', label: 'Colombia', phone: '57' },\n  { code: 'CR', label: 'Costa Rica', phone: '506' },\n  { code: 'CU', label: 'Cuba', phone: '53' },\n  { code: 'CV', label: 'Cape Verde', phone: '238' },\n  { code: 'CW', label: 'Curacao', phone: '599' },\n  { code: 'CX', label: 'Christmas Island', phone: '61' },\n  { code: 'CY', label: 'Cyprus', phone: '357' },\n  { code: 'CZ', label: 'Czech Republic', phone: '420' },\n  {\n    code: 'DE',\n    label: 'Germany',\n    phone: '49',\n    suggested: true,\n  },\n  { code: 'DJ', label: 'Djibouti', phone: '253' },\n  { code: 'DK', label: 'Denmark', phone: '45' },\n  { code: 'DM', label: 'Dominica', phone: '1-767' },\n  {\n    code: 'DO',\n    label: 'Dominican Republic',\n    phone: '1-809',\n  },\n  { code: 'DZ', label: 'Algeria', phone: '213' },\n  { code: 'EC', label: 'Ecuador', phone: '593' },\n  { code: 'EE', label: 'Estonia', phone: '372' },\n  { code: 'EG', label: 'Egypt', phone: '20' },\n  { code: 'EH', label: 'Western Sahara', phone: '212' },\n  { code: 'ER', label: 'Eritrea', phone: '291' },\n  { code: 'ES', label: 'Spain', phone: '34' },\n  { code: 'ET', label: 'Ethiopia', phone: '251' },\n  { code: 'FI', label: 'Finland', phone: '358' },\n  { code: 'FJ', label: 'Fiji', phone: '679' },\n  {\n    code: 'FK',\n    label: 'Falkland Islands (Malvinas)',\n    phone: '500',\n  },\n  {\n    code: 'FM',\n    label: 'Micronesia, Federated States of',\n    phone: '691',\n  },\n  { code: 'FO', label: 'Faroe Islands', phone: '298' },\n  {\n    code: 'FR',\n    label: 'France',\n    phone: '33',\n    suggested: true,\n  },\n  { code: 'GA', label: 'Gabon', phone: '241' },\n  { code: 'GB', label: 'United Kingdom', phone: '44' },\n  { code: 'GD', label: 'Grenada', phone: '1-473' },\n  { code: 'GE', label: 'Georgia', phone: '995' },\n  { code: 'GF', label: 'French Guiana', phone: '594' },\n  { code: 'GG', label: 'Guernsey', phone: '44' },\n  { code: 'GH', label: 'Ghana', phone: '233' },\n  { code: 'GI', label: 'Gibraltar', phone: '350' },\n  { code: 'GL', label: 'Greenland', phone: '299' },\n  { code: 'GM', label: 'Gambia', phone: '220' },\n  { code: 'GN', label: 'Guinea', phone: '224' },\n  { code: 'GP', label: 'Guadeloupe', phone: '590' },\n  { code: 'GQ', label: 'Equatorial Guinea', phone: '240' },\n  { code: 'GR', label: 'Greece', phone: '30' },\n  {\n    code: 'GS',\n    label: 'South Georgia and the South Sandwich Islands',\n    phone: '500',\n  },\n  { code: 'GT', label: 'Guatemala', phone: '502' },\n  { code: 'GU', label: 'Guam', phone: '1-671' },\n  { code: 'GW', label: 'Guinea-Bissau', phone: '245' },\n  { code: 'GY', label: 'Guyana', phone: '592' },\n  { code: 'HK', label: 'Hong Kong', phone: '852' },\n  {\n    code: 'HM',\n    label: 'Heard Island and McDonald Islands',\n    phone: '672',\n  },\n  { code: 'HN', label: 'Honduras', phone: '504' },\n  { code: 'HR', label: 'Croatia', phone: '385' },\n  { code: 'HT', label: 'Haiti', phone: '509' },\n  { code: 'HU', label: 'Hungary', phone: '36' },\n  { code: 'ID', label: 'Indonesia', phone: '62' },\n  { code: 'IE', label: 'Ireland', phone: '353' },\n  { code: 'IL', label: 'Israel', phone: '972' },\n  { code: 'IM', label: 'Isle of Man', phone: '44' },\n  { code: 'IN', label: 'India', phone: '91' },\n  {\n    code: 'IO',\n    label: 'British Indian Ocean Territory',\n    phone: '246',\n  },\n  { code: 'IQ', label: 'Iraq', phone: '964' },\n  {\n    code: 'IR',\n    label: 'Iran, Islamic Republic of',\n    phone: '98',\n  },\n  { code: 'IS', label: 'Iceland', phone: '354' },\n  { code: 'IT', label: 'Italy', phone: '39' },\n  { code: 'JE', label: 'Jersey', phone: '44' },\n  { code: 'JM', label: 'Jamaica', phone: '1-876' },\n  { code: 'JO', label: 'Jordan', phone: '962' },\n  {\n    code: 'JP',\n    label: 'Japan',\n    phone: '81',\n    suggested: true,\n  },\n  { code: 'KE', label: 'Kenya', phone: '254' },\n  { code: 'KG', label: 'Kyrgyzstan', phone: '996' },\n  { code: 'KH', label: 'Cambodia', phone: '855' },\n  { code: 'KI', label: 'Kiribati', phone: '686' },\n  { code: 'KM', label: 'Comoros', phone: '269' },\n  {\n    code: 'KN',\n    label: 'Saint Kitts and Nevis',\n    phone: '1-869',\n  },\n  {\n    code: 'KP',\n    label: \"Korea, Democratic People's Republic of\",\n    phone: '850',\n  },\n  { code: 'KR', label: 'Korea, Republic of', phone: '82' },\n  { code: 'KW', label: 'Kuwait', phone: '965' },\n  { code: 'KY', label: 'Cayman Islands', phone: '1-345' },\n  { code: 'KZ', label: 'Kazakhstan', phone: '7' },\n  {\n    code: 'LA',\n    label: \"Lao People's Democratic Republic\",\n    phone: '856',\n  },\n  { code: 'LB', label: 'Lebanon', phone: '961' },\n  { code: 'LC', label: 'Saint Lucia', phone: '1-758' },\n  { code: 'LI', label: 'Liechtenstein', phone: '423' },\n  { code: 'LK', label: 'Sri Lanka', phone: '94' },\n  { code: 'LR', label: 'Liberia', phone: '231' },\n  { code: 'LS', label: 'Lesotho', phone: '266' },\n  { code: 'LT', label: 'Lithuania', phone: '370' },\n  { code: 'LU', label: 'Luxembourg', phone: '352' },\n  { code: 'LV', label: 'Latvia', phone: '371' },\n  { code: 'LY', label: 'Libya', phone: '218' },\n  { code: 'MA', label: 'Morocco', phone: '212' },\n  { code: 'MC', label: 'Monaco', phone: '377' },\n  {\n    code: 'MD',\n    label: 'Moldova, Republic of',\n    phone: '373',\n  },\n  { code: 'ME', label: 'Montenegro', phone: '382' },\n  {\n    code: 'MF',\n    label: 'Saint Martin (French part)',\n    phone: '590',\n  },\n  { code: 'MG', label: 'Madagascar', phone: '261' },\n  { code: 'MH', label: 'Marshall Islands', phone: '692' },\n  {\n    code: 'MK',\n    label: 'Macedonia, the Former Yugoslav Republic of',\n    phone: '389',\n  },\n  { code: 'ML', label: 'Mali', phone: '223' },\n  { code: 'MM', label: 'Myanmar', phone: '95' },\n  { code: 'MN', label: 'Mongolia', phone: '976' },\n  { code: 'MO', label: 'Macao', phone: '853' },\n  {\n    code: 'MP',\n    label: 'Northern Mariana Islands',\n    phone: '1-670',\n  },\n  { code: 'MQ', label: 'Martinique', phone: '596' },\n  { code: 'MR', label: 'Mauritania', phone: '222' },\n  { code: 'MS', label: 'Montserrat', phone: '1-664' },\n  { code: 'MT', label: 'Malta', phone: '356' },\n  { code: 'MU', label: 'Mauritius', phone: '230' },\n  { code: 'MV', label: 'Maldives', phone: '960' },\n  { code: 'MW', label: 'Malawi', phone: '265' },\n  { code: 'MX', label: 'Mexico', phone: '52' },\n  { code: 'MY', label: 'Malaysia', phone: '60' },\n  { code: 'MZ', label: 'Mozambique', phone: '258' },\n  { code: 'NA', label: 'Namibia', phone: '264' },\n  { code: 'NC', label: 'New Caledonia', phone: '687' },\n  { code: 'NE', label: 'Niger', phone: '227' },\n  { code: 'NF', label: 'Norfolk Island', phone: '672' },\n  { code: 'NG', label: 'Nigeria', phone: '234' },\n  { code: 'NI', label: 'Nicaragua', phone: '505' },\n  { code: 'NL', label: 'Netherlands', phone: '31' },\n  { code: 'NO', label: 'Norway', phone: '47' },\n  { code: 'NP', label: 'Nepal', phone: '977' },\n  { code: 'NR', label: 'Nauru', phone: '674' },\n  { code: 'NU', label: 'Niue', phone: '683' },\n  { code: 'NZ', label: 'New Zealand', phone: '64' },\n  { code: 'OM', label: 'Oman', phone: '968' },\n  { code: 'PA', label: 'Panama', phone: '507' },\n  { code: 'PE', label: 'Peru', phone: '51' },\n  { code: 'PF', label: 'French Polynesia', phone: '689' },\n  { code: 'PG', label: 'Papua New Guinea', phone: '675' },\n  { code: 'PH', label: 'Philippines', phone: '63' },\n  { code: 'PK', label: 'Pakistan', phone: '92' },\n  { code: 'PL', label: 'Poland', phone: '48' },\n  {\n    code: 'PM',\n    label: 'Saint Pierre and Miquelon',\n    phone: '508',\n  },\n  { code: 'PN', label: 'Pitcairn', phone: '870' },\n  { code: 'PR', label: 'Puerto Rico', phone: '1' },\n  {\n    code: 'PS',\n    label: 'Palestine, State of',\n    phone: '970',\n  },\n  { code: 'PT', label: 'Portugal', phone: '351' },\n  { code: 'PW', label: 'Palau', phone: '680' },\n  { code: 'PY', label: 'Paraguay', phone: '595' },\n  { code: 'QA', label: 'Qatar', phone: '974' },\n  { code: 'RE', label: 'Reunion', phone: '262' },\n  { code: 'RO', label: 'Romania', phone: '40' },\n  { code: 'RS', label: 'Serbia', phone: '381' },\n  { code: 'RU', label: 'Russian Federation', phone: '7' },\n  { code: 'RW', label: 'Rwanda', phone: '250' },\n  { code: 'SA', label: 'Saudi Arabia', phone: '966' },\n  { code: 'SB', label: 'Solomon Islands', phone: '677' },\n  { code: 'SC', label: 'Seychelles', phone: '248' },\n  { code: 'SD', label: 'Sudan', phone: '249' },\n  { code: 'SE', label: 'Sweden', phone: '46' },\n  { code: 'SG', label: 'Singapore', phone: '65' },\n  { code: 'SH', label: 'Saint Helena', phone: '290' },\n  { code: 'SI', label: 'Slovenia', phone: '386' },\n  {\n    code: 'SJ',\n    label: 'Svalbard and Jan Mayen',\n    phone: '47',\n  },\n  { code: 'SK', label: 'Slovakia', phone: '421' },\n  { code: 'SL', label: 'Sierra Leone', phone: '232' },\n  { code: 'SM', label: 'San Marino', phone: '378' },\n  { code: 'SN', label: 'Senegal', phone: '221' },\n  { code: 'SO', label: 'Somalia', phone: '252' },\n  { code: 'SR', label: 'Suriname', phone: '597' },\n  { code: 'SS', label: 'South Sudan', phone: '211' },\n  {\n    code: 'ST',\n    label: 'Sao Tome and Principe',\n    phone: '239',\n  },\n  { code: 'SV', label: 'El Salvador', phone: '503' },\n  {\n    code: 'SX',\n    label: 'Sint Maarten (Dutch part)',\n    phone: '1-721',\n  },\n  {\n    code: 'SY',\n    label: 'Syrian Arab Republic',\n    phone: '963',\n  },\n  { code: 'SZ', label: 'Swaziland', phone: '268' },\n  {\n    code: 'TC',\n    label: 'Turks and Caicos Islands',\n    phone: '1-649',\n  },\n  { code: 'TD', label: 'Chad', phone: '235' },\n  {\n    code: 'TF',\n    label: 'French Southern Territories',\n    phone: '262',\n  },\n  { code: 'TG', label: 'Togo', phone: '228' },\n  { code: 'TH', label: 'Thailand', phone: '66' },\n  { code: 'TJ', label: 'Tajikistan', phone: '992' },\n  { code: 'TK', label: 'Tokelau', phone: '690' },\n  { code: 'TL', label: 'Timor-Leste', phone: '670' },\n  { code: 'TM', label: 'Turkmenistan', phone: '993' },\n  { code: 'TN', label: 'Tunisia', phone: '216' },\n  { code: 'TO', label: 'Tonga', phone: '676' },\n  { code: 'TR', label: 'Turkey', phone: '90' },\n  {\n    code: 'TT',\n    label: 'Trinidad and Tobago',\n    phone: '1-868',\n  },\n  { code: 'TV', label: 'Tuvalu', phone: '688' },\n  {\n    code: 'TW',\n    label: 'Taiwan, Province of China',\n    phone: '886',\n  },\n  {\n    code: 'TZ',\n    label: 'United Republic of Tanzania',\n    phone: '255',\n  },\n  { code: 'UA', label: 'Ukraine', phone: '380' },\n  { code: 'UG', label: 'Uganda', phone: '256' },\n  {\n    code: 'US',\n    label: 'United States',\n    phone: '1',\n    suggested: true,\n  },\n  { code: 'UY', label: 'Uruguay', phone: '598' },\n  { code: 'UZ', label: 'Uzbekistan', phone: '998' },\n  {\n    code: 'VA',\n    label: 'Holy See (Vatican City State)',\n    phone: '379',\n  },\n  {\n    code: 'VC',\n    label: 'Saint Vincent and the Grenadines',\n    phone: '1-784',\n  },\n  { code: 'VE', label: 'Venezuela', phone: '58' },\n  {\n    code: 'VG',\n    label: 'British Virgin Islands',\n    phone: '1-284',\n  },\n  {\n    code: 'VI',\n    label: 'US Virgin Islands',\n    phone: '1-340',\n  },\n  { code: 'VN', label: 'Vietnam', phone: '84' },\n  { code: 'VU', label: 'Vanuatu', phone: '678' },\n  { code: 'WF', label: 'Wallis and Futuna', phone: '681' },\n  { code: 'WS', label: 'Samoa', phone: '685' },\n  { code: 'XK', label: 'Kosovo', phone: '383' },\n  { code: 'YE', label: 'Yemen', phone: '967' },\n  { code: 'YT', label: 'Mayotte', phone: '262' },\n  { code: 'ZA', label: 'South Africa', phone: '27' },\n  { code: 'ZM', label: 'Zambia', phone: '260' },\n  { code: 'ZW', label: 'Zimbabwe', phone: '263' },\n];\n"},"ComboBox.js":{module:"./ComboBox.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function ComboBox() {\n  return (\n    <Autocomplete\n      disablePortal\n      id=\"combo-box-demo\"\n      options={top100Films}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"Movie\" />}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { label: 'The Shawshank Redemption', year: 1994 },\n  { label: 'The Godfather', year: 1972 },\n  { label: 'The Godfather: Part II', year: 1974 },\n  { label: 'The Dark Knight', year: 2008 },\n  { label: '12 Angry Men', year: 1957 },\n  { label: \"Schindler's List\", year: 1993 },\n  { label: 'Pulp Fiction', year: 1994 },\n  {\n    label: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { label: 'The Good, the Bad and the Ugly', year: 1966 },\n  { label: 'Fight Club', year: 1999 },\n  {\n    label: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    label: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { label: 'Forrest Gump', year: 1994 },\n  { label: 'Inception', year: 2010 },\n  {\n    label: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { label: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { label: 'Goodfellas', year: 1990 },\n  { label: 'The Matrix', year: 1999 },\n  { label: 'Seven Samurai', year: 1954 },\n  {\n    label: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { label: 'City of God', year: 2002 },\n  { label: 'Se7en', year: 1995 },\n  { label: 'The Silence of the Lambs', year: 1991 },\n  { label: \"It's a Wonderful Life\", year: 1946 },\n  { label: 'Life Is Beautiful', year: 1997 },\n  { label: 'The Usual Suspects', year: 1995 },\n  { label: 'L\xe9on: The Professional', year: 1994 },\n  { label: 'Spirited Away', year: 2001 },\n  { label: 'Saving Private Ryan', year: 1998 },\n  { label: 'Once Upon a Time in the West', year: 1968 },\n  { label: 'American History X', year: 1998 },\n  { label: 'Interstellar', year: 2014 },\n  { label: 'Casablanca', year: 1942 },\n  { label: 'City Lights', year: 1931 },\n  { label: 'Psycho', year: 1960 },\n  { label: 'The Green Mile', year: 1999 },\n  { label: 'The Intouchables', year: 2011 },\n  { label: 'Modern Times', year: 1936 },\n  { label: 'Raiders of the Lost Ark', year: 1981 },\n  { label: 'Rear Window', year: 1954 },\n  { label: 'The Pianist', year: 2002 },\n  { label: 'The Departed', year: 2006 },\n  { label: 'Terminator 2: Judgment Day', year: 1991 },\n  { label: 'Back to the Future', year: 1985 },\n  { label: 'Whiplash', year: 2014 },\n  { label: 'Gladiator', year: 2000 },\n  { label: 'Memento', year: 2000 },\n  { label: 'The Prestige', year: 2006 },\n  { label: 'The Lion King', year: 1994 },\n  { label: 'Apocalypse Now', year: 1979 },\n  { label: 'Alien', year: 1979 },\n  { label: 'Sunset Boulevard', year: 1950 },\n  {\n    label: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { label: 'The Great Dictator', year: 1940 },\n  { label: 'Cinema Paradiso', year: 1988 },\n  { label: 'The Lives of Others', year: 2006 },\n  { label: 'Grave of the Fireflies', year: 1988 },\n  { label: 'Paths of Glory', year: 1957 },\n  { label: 'Django Unchained', year: 2012 },\n  { label: 'The Shining', year: 1980 },\n  { label: 'WALL\xb7E', year: 2008 },\n  { label: 'American Beauty', year: 1999 },\n  { label: 'The Dark Knight Rises', year: 2012 },\n  { label: 'Princess Mononoke', year: 1997 },\n  { label: 'Aliens', year: 1986 },\n  { label: 'Oldboy', year: 2003 },\n  { label: 'Once Upon a Time in America', year: 1984 },\n  { label: 'Witness for the Prosecution', year: 1957 },\n  { label: 'Das Boot', year: 1981 },\n  { label: 'Citizen Kane', year: 1941 },\n  { label: 'North by Northwest', year: 1959 },\n  { label: 'Vertigo', year: 1958 },\n  {\n    label: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { label: 'Reservoir Dogs', year: 1992 },\n  { label: 'Braveheart', year: 1995 },\n  { label: 'M', year: 1931 },\n  { label: 'Requiem for a Dream', year: 2000 },\n  { label: 'Am\xe9lie', year: 2001 },\n  { label: 'A Clockwork Orange', year: 1971 },\n  { label: 'Like Stars on Earth', year: 2007 },\n  { label: 'Taxi Driver', year: 1976 },\n  { label: 'Lawrence of Arabia', year: 1962 },\n  { label: 'Double Indemnity', year: 1944 },\n  {\n    label: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { label: 'Amadeus', year: 1984 },\n  { label: 'To Kill a Mockingbird', year: 1962 },\n  { label: 'Toy Story 3', year: 2010 },\n  { label: 'Logan', year: 2017 },\n  { label: 'Full Metal Jacket', year: 1987 },\n  { label: 'Dangal', year: 2016 },\n  { label: 'The Sting', year: 1973 },\n  { label: '2001: A Space Odyssey', year: 1968 },\n  { label: \"Singin' in the Rain\", year: 1952 },\n  { label: 'Toy Story', year: 1995 },\n  { label: 'Bicycle Thieves', year: 1948 },\n  { label: 'The Kid', year: 1921 },\n  { label: 'Inglourious Basterds', year: 2009 },\n  { label: 'Snatch', year: 2000 },\n  { label: '3 Idiots', year: 2009 },\n  { label: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",jsxPreview:'<Autocomplete\n  disablePortal\n  id="combo-box-demo"\n  options={top100Films}\n  sx={{ width: 300 }}\n  renderInput={(params) => <TextField {...params} label="Movie" />}\n/>',moduleTS:"./ComboBox.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function ComboBox() {\n  return (\n    <Autocomplete\n      disablePortal\n      id=\"combo-box-demo\"\n      options={top100Films}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"Movie\" />}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { label: 'The Shawshank Redemption', year: 1994 },\n  { label: 'The Godfather', year: 1972 },\n  { label: 'The Godfather: Part II', year: 1974 },\n  { label: 'The Dark Knight', year: 2008 },\n  { label: '12 Angry Men', year: 1957 },\n  { label: \"Schindler's List\", year: 1993 },\n  { label: 'Pulp Fiction', year: 1994 },\n  {\n    label: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { label: 'The Good, the Bad and the Ugly', year: 1966 },\n  { label: 'Fight Club', year: 1999 },\n  {\n    label: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    label: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { label: 'Forrest Gump', year: 1994 },\n  { label: 'Inception', year: 2010 },\n  {\n    label: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { label: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { label: 'Goodfellas', year: 1990 },\n  { label: 'The Matrix', year: 1999 },\n  { label: 'Seven Samurai', year: 1954 },\n  {\n    label: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { label: 'City of God', year: 2002 },\n  { label: 'Se7en', year: 1995 },\n  { label: 'The Silence of the Lambs', year: 1991 },\n  { label: \"It's a Wonderful Life\", year: 1946 },\n  { label: 'Life Is Beautiful', year: 1997 },\n  { label: 'The Usual Suspects', year: 1995 },\n  { label: 'L\xe9on: The Professional', year: 1994 },\n  { label: 'Spirited Away', year: 2001 },\n  { label: 'Saving Private Ryan', year: 1998 },\n  { label: 'Once Upon a Time in the West', year: 1968 },\n  { label: 'American History X', year: 1998 },\n  { label: 'Interstellar', year: 2014 },\n  { label: 'Casablanca', year: 1942 },\n  { label: 'City Lights', year: 1931 },\n  { label: 'Psycho', year: 1960 },\n  { label: 'The Green Mile', year: 1999 },\n  { label: 'The Intouchables', year: 2011 },\n  { label: 'Modern Times', year: 1936 },\n  { label: 'Raiders of the Lost Ark', year: 1981 },\n  { label: 'Rear Window', year: 1954 },\n  { label: 'The Pianist', year: 2002 },\n  { label: 'The Departed', year: 2006 },\n  { label: 'Terminator 2: Judgment Day', year: 1991 },\n  { label: 'Back to the Future', year: 1985 },\n  { label: 'Whiplash', year: 2014 },\n  { label: 'Gladiator', year: 2000 },\n  { label: 'Memento', year: 2000 },\n  { label: 'The Prestige', year: 2006 },\n  { label: 'The Lion King', year: 1994 },\n  { label: 'Apocalypse Now', year: 1979 },\n  { label: 'Alien', year: 1979 },\n  { label: 'Sunset Boulevard', year: 1950 },\n  {\n    label: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { label: 'The Great Dictator', year: 1940 },\n  { label: 'Cinema Paradiso', year: 1988 },\n  { label: 'The Lives of Others', year: 2006 },\n  { label: 'Grave of the Fireflies', year: 1988 },\n  { label: 'Paths of Glory', year: 1957 },\n  { label: 'Django Unchained', year: 2012 },\n  { label: 'The Shining', year: 1980 },\n  { label: 'WALL\xb7E', year: 2008 },\n  { label: 'American Beauty', year: 1999 },\n  { label: 'The Dark Knight Rises', year: 2012 },\n  { label: 'Princess Mononoke', year: 1997 },\n  { label: 'Aliens', year: 1986 },\n  { label: 'Oldboy', year: 2003 },\n  { label: 'Once Upon a Time in America', year: 1984 },\n  { label: 'Witness for the Prosecution', year: 1957 },\n  { label: 'Das Boot', year: 1981 },\n  { label: 'Citizen Kane', year: 1941 },\n  { label: 'North by Northwest', year: 1959 },\n  { label: 'Vertigo', year: 1958 },\n  {\n    label: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { label: 'Reservoir Dogs', year: 1992 },\n  { label: 'Braveheart', year: 1995 },\n  { label: 'M', year: 1931 },\n  { label: 'Requiem for a Dream', year: 2000 },\n  { label: 'Am\xe9lie', year: 2001 },\n  { label: 'A Clockwork Orange', year: 1971 },\n  { label: 'Like Stars on Earth', year: 2007 },\n  { label: 'Taxi Driver', year: 1976 },\n  { label: 'Lawrence of Arabia', year: 1962 },\n  { label: 'Double Indemnity', year: 1944 },\n  {\n    label: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { label: 'Amadeus', year: 1984 },\n  { label: 'To Kill a Mockingbird', year: 1962 },\n  { label: 'Toy Story 3', year: 2010 },\n  { label: 'Logan', year: 2017 },\n  { label: 'Full Metal Jacket', year: 1987 },\n  { label: 'Dangal', year: 2016 },\n  { label: 'The Sting', year: 1973 },\n  { label: '2001: A Space Odyssey', year: 1968 },\n  { label: \"Singin' in the Rain\", year: 1952 },\n  { label: 'Toy Story', year: 1995 },\n  { label: 'Bicycle Thieves', year: 1948 },\n  { label: 'The Kid', year: 1921 },\n  { label: 'Inglourious Basterds', year: 2009 },\n  { label: 'Snatch', year: 2000 },\n  { label: '3 Idiots', year: 2009 },\n  { label: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"FreeSolo.js":{module:"./FreeSolo.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function FreeSolo() {\n  return (\n    <Stack spacing={2} sx={{ width: 300 }}>\n      <Autocomplete\n        id=\"free-solo-demo\"\n        freeSolo\n        options={top100Films.map((option) => option.title)}\n        renderInput={(params) => <TextField {...params} label=\"freeSolo\" />}\n      />\n      <Autocomplete\n        freeSolo\n        id=\"free-solo-2-demo\"\n        disableClearable\n        options={top100Films.map((option) => option.title)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Search input\"\n            InputProps={{\n              ...params.InputProps,\n              type: 'search',\n            }}\n          />\n        )}\n      />\n    </Stack>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./FreeSolo.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function FreeSolo() {\n  return (\n    <Stack spacing={2} sx={{ width: 300 }}>\n      <Autocomplete\n        id=\"free-solo-demo\"\n        freeSolo\n        options={top100Films.map((option) => option.title)}\n        renderInput={(params) => <TextField {...params} label=\"freeSolo\" />}\n      />\n      <Autocomplete\n        freeSolo\n        id=\"free-solo-2-demo\"\n        disableClearable\n        options={top100Films.map((option) => option.title)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Search input\"\n            InputProps={{\n              ...params.InputProps,\n              type: 'search',\n            }}\n          />\n        )}\n      />\n    </Stack>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"ControllableStates.js":{module:"./ControllableStates.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst options = ['Option 1', 'Option 2'];\n\nexport default function ControllableStates() {\n  const [value, setValue] = React.useState(options[0]);\n  const [inputValue, setInputValue] = React.useState('');\n\n  return (\n    <div>\n      <div>{`value: ${value !== null ? `'${value}'` : 'null'}`}</div>\n      <div>{`inputValue: '${inputValue}'`}</div>\n      <br />\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        inputValue={inputValue}\n        onInputChange={(event, newInputValue) => {\n          setInputValue(newInputValue);\n        }}\n        id=\"controllable-states-demo\"\n        options={options}\n        sx={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label=\"Controllable\" />}\n      />\n    </div>\n  );\n}\n",moduleTS:"./ControllableStates.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst options = ['Option 1', 'Option 2'];\n\nexport default function ControllableStates() {\n  const [value, setValue] = React.useState<string | null>(options[0]);\n  const [inputValue, setInputValue] = React.useState('');\n\n  return (\n    <div>\n      <div>{`value: ${value !== null ? `'${value}'` : 'null'}`}</div>\n      <div>{`inputValue: '${inputValue}'`}</div>\n      <br />\n      <Autocomplete\n        value={value}\n        onChange={(event: any, newValue: string | null) => {\n          setValue(newValue);\n        }}\n        inputValue={inputValue}\n        onInputChange={(event, newInputValue) => {\n          setInputValue(newInputValue);\n        }}\n        id=\"controllable-states-demo\"\n        options={options}\n        sx={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label=\"Controllable\" />}\n      />\n    </div>\n  );\n}\n"},"FreeSoloCreateOptionDialog.js":{module:"./FreeSoloCreateOptionDialog.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filter = createFilterOptions();\n\nexport default function FreeSoloCreateOptionDialog() {\n  const [value, setValue] = React.useState(null);\n  const [open, toggleOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setDialogValue({\n      title: '',\n      year: '',\n    });\n\n    toggleOpen(false);\n  };\n\n  const [dialogValue, setDialogValue] = React.useState({\n    title: '',\n    year: '',\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setValue({\n      title: dialogValue.title,\n      year: parseInt(dialogValue.year, 10),\n    });\n\n    handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === 'string') {\n            // timeout to avoid instant validation of the dialog's form.\n            setTimeout(() => {\n              toggleOpen(true);\n              setDialogValue({\n                title: newValue,\n                year: '',\n              });\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              title: newValue.inputValue,\n              year: '',\n            });\n          } else {\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== '') {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`,\n            });\n          }\n\n          return filtered;\n        }}\n        id=\"free-solo-dialog-demo\"\n        options={top100Films}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          }\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          return option.title;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(props, option) => <li {...props}>{option.title}</li>}\n        sx={{ width: 300 }}\n        freeSolo\n        renderInput={(params) => <TextField {...params} label=\"Free solo dialog\" />}\n      />\n      <Dialog open={open} onClose={handleClose}>\n        <form onSubmit={handleSubmit}>\n          <DialogTitle>Add a new film</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Did you miss any film in our list? Please, add it!\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              value={dialogValue.title}\n              onChange={(event) =>\n                setDialogValue({\n                  ...dialogValue,\n                  title: event.target.value,\n                })\n              }\n              label=\"title\"\n              type=\"text\"\n              variant=\"standard\"\n            />\n            <TextField\n              margin=\"dense\"\n              id=\"name\"\n              value={dialogValue.year}\n              onChange={(event) =>\n                setDialogValue({\n                  ...dialogValue,\n                  year: event.target.value,\n                })\n              }\n              label=\"year\"\n              type=\"number\"\n              variant=\"standard\"\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button type=\"submit\">Add</Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./FreeSoloCreateOptionDialog.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filter = createFilterOptions<FilmOptionType>();\n\nexport default function FreeSoloCreateOptionDialog() {\n  const [value, setValue] = React.useState<FilmOptionType | null>(null);\n  const [open, toggleOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setDialogValue({\n      title: '',\n      year: '',\n    });\n    toggleOpen(false);\n  };\n\n  const [dialogValue, setDialogValue] = React.useState({\n    title: '',\n    year: '',\n  });\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setValue({\n      title: dialogValue.title,\n      year: parseInt(dialogValue.year, 10),\n    });\n    handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === 'string') {\n            // timeout to avoid instant validation of the dialog's form.\n            setTimeout(() => {\n              toggleOpen(true);\n              setDialogValue({\n                title: newValue,\n                year: '',\n              });\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              title: newValue.inputValue,\n              year: '',\n            });\n          } else {\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== '') {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`,\n            });\n          }\n\n          return filtered;\n        }}\n        id=\"free-solo-dialog-demo\"\n        options={top100Films}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          }\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          return option.title;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(props, option) => <li {...props}>{option.title}</li>}\n        sx={{ width: 300 }}\n        freeSolo\n        renderInput={(params) => <TextField {...params} label=\"Free solo dialog\" />}\n      />\n      <Dialog open={open} onClose={handleClose}>\n        <form onSubmit={handleSubmit}>\n          <DialogTitle>Add a new film</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Did you miss any film in our list? Please, add it!\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              value={dialogValue.title}\n              onChange={(event) =>\n                setDialogValue({\n                  ...dialogValue,\n                  title: event.target.value,\n                })\n              }\n              label=\"title\"\n              type=\"text\"\n              variant=\"standard\"\n            />\n            <TextField\n              margin=\"dense\"\n              id=\"name\"\n              value={dialogValue.year}\n              onChange={(event) =>\n                setDialogValue({\n                  ...dialogValue,\n                  year: event.target.value,\n                })\n              }\n              label=\"year\"\n              type=\"number\"\n              variant=\"standard\"\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button type=\"submit\">Add</Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\ninterface FilmOptionType {\n  inputValue?: string;\n  title: string;\n  year?: number;\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films: readonly FilmOptionType[] = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"Grouped.js":{module:"./Grouped.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function Grouped() {\n  const options = top100Films.map((option) => {\n    const firstLetter = option.title[0].toUpperCase();\n    return {\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n      ...option,\n    };\n  });\n\n  return (\n    <Autocomplete\n      id=\"grouped-demo\"\n      options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n      groupBy={(option) => option.firstLetter}\n      getOptionLabel={(option) => option.title}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"With categories\" />}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",jsxPreview:'<Autocomplete\n  id="grouped-demo"\n  options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n  groupBy={(option) => option.firstLetter}\n  getOptionLabel={(option) => option.title}\n  sx={{ width: 300 }}\n  renderInput={(params) => <TextField {...params} label="With categories" />}\n/>',moduleTS:"./Grouped.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function Grouped() {\n  const options = top100Films.map((option) => {\n    const firstLetter = option.title[0].toUpperCase();\n    return {\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n      ...option,\n    };\n  });\n\n  return (\n    <Autocomplete\n      id=\"grouped-demo\"\n      options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n      groupBy={(option) => option.firstLetter}\n      getOptionLabel={(option) => option.title}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"With categories\" />}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"DisabledOptions.js":{module:"./DisabledOptions.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function DisabledOptions() {\n  return (\n    <Autocomplete\n      id=\"disabled-options-demo\"\n      options={timeSlots}\n      getOptionDisabled={(option) =>\n        option === timeSlots[0] || option === timeSlots[2]\n      }\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"Disabled options\" />}\n    />\n  );\n}\n\n// One time slot every 30 minutes.\nconst timeSlots = Array.from(new Array(24 * 2)).map(\n  (_, index) =>\n    `${index < 20 ? '0' : ''}${Math.floor(index / 2)}:${\n      index % 2 === 0 ? '00' : '30'\n    }`,\n);\n",jsxPreview:'<Autocomplete\n  id="disabled-options-demo"\n  options={timeSlots}\n  getOptionDisabled={(option) =>\n    option === timeSlots[0] || option === timeSlots[2]\n  }\n  sx={{ width: 300 }}\n  renderInput={(params) => <TextField {...params} label="Disabled options" />}\n/>',moduleTS:"./DisabledOptions.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function DisabledOptions() {\n  return (\n    <Autocomplete\n      id=\"disabled-options-demo\"\n      options={timeSlots}\n      getOptionDisabled={(option) =>\n        option === timeSlots[0] || option === timeSlots[2]\n      }\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"Disabled options\" />}\n    />\n  );\n}\n\n// One time slot every 30 minutes.\nconst timeSlots = Array.from(new Array(24 * 2)).map(\n  (_, index) =>\n    `${index < 20 ? '0' : ''}${Math.floor(index / 2)}:${\n      index % 2 === 0 ? '00' : '30'\n    }`,\n);\n"},"FreeSoloCreateOption.js":{module:"./FreeSoloCreateOption.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filter = createFilterOptions();\n\nexport default function FreeSoloCreateOption() {\n  const [value, setValue] = React.useState(null);\n\n  return (\n    <Autocomplete\n      value={value}\n      onChange={(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue,\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue,\n          });\n        } else {\n          setValue(newValue);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        const { inputValue } = params;\n        // Suggest the creation of a new value\n        const isExisting = options.some((option) => inputValue === option.title);\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: `Add \"${inputValue}\"`,\n          });\n        }\n\n        return filtered;\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      id=\"free-solo-with-text-demo\"\n      options={top100Films}\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return option.title;\n      }}\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\n      sx={{ width: 300 }}\n      freeSolo\n      renderInput={(params) => (\n        <TextField {...params} label=\"Free solo with text demo\" />\n      )}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./FreeSoloCreateOption.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filter = createFilterOptions<FilmOptionType>();\n\nexport default function FreeSoloCreateOption() {\n  const [value, setValue] = React.useState<FilmOptionType | null>(null);\n\n  return (\n    <Autocomplete\n      value={value}\n      onChange={(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue,\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue,\n          });\n        } else {\n          setValue(newValue);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        const { inputValue } = params;\n        // Suggest the creation of a new value\n        const isExisting = options.some((option) => inputValue === option.title);\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: `Add \"${inputValue}\"`,\n          });\n        }\n\n        return filtered;\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      id=\"free-solo-with-text-demo\"\n      options={top100Films}\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return option.title;\n      }}\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\n      sx={{ width: 300 }}\n      freeSolo\n      renderInput={(params) => (\n        <TextField {...params} label=\"Free solo with text demo\" />\n      )}\n    />\n  );\n}\n\ninterface FilmOptionType {\n  inputValue?: string;\n  title: string;\n  year?: number;\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films: readonly FilmOptionType[] = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"UseAutocomplete.js":{module:"./UseAutocomplete.js",raw:"import * as React from 'react';\nimport { useAutocomplete } from '@mui/base/AutocompleteUnstyled';\nimport { styled } from '@mui/system';\n\nconst Label = styled('label')({\n  display: 'block',\n});\n\nconst Input = styled('input')(({ theme }) => ({\n  width: 200,\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#000',\n  color: theme.palette.mode === 'light' ? '#000' : '#fff',\n}));\n\nconst Listbox = styled('ul')(({ theme }) => ({\n  width: 200,\n  margin: 0,\n  padding: 0,\n  zIndex: 1,\n  position: 'absolute',\n  listStyle: 'none',\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#000',\n  overflow: 'auto',\n  maxHeight: 200,\n  border: '1px solid rgba(0,0,0,.25)',\n  '& li.Mui-focused': {\n    backgroundColor: '#4a8df6',\n    color: 'white',\n    cursor: 'pointer',\n  },\n  '& li:active': {\n    backgroundColor: '#2977f5',\n    color: 'white',\n  },\n}));\n\nexport default function UseAutocomplete() {\n  const {\n    getRootProps,\n    getInputLabelProps,\n    getInputProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n  } = useAutocomplete({\n    id: 'use-autocomplete-demo',\n    options: top100Films,\n    getOptionLabel: (option) => option.title,\n  });\n\n  return (\n    <div>\n      <div {...getRootProps()}>\n        <Label {...getInputLabelProps()}>useAutocomplete</Label>\n        <Input {...getInputProps()} />\n      </div>\n      {groupedOptions.length > 0 ? (\n        <Listbox {...getListboxProps()}>\n          {groupedOptions.map((option, index) => (\n            <li {...getOptionProps({ option, index })}>{option.title}</li>\n          ))}\n        </Listbox>\n      ) : null}\n    </div>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",jsxPreview:"<div {...getRootProps()}>\n  <Label {...getInputLabelProps()}>useAutocomplete</Label>\n  <Input {...getInputProps()} />\n</div>\n{groupedOptions.length > 0 ? (\n  <Listbox {...getListboxProps()}>\n    {(groupedOptions as typeof top100Films).map((option, index) => (\n      <li {...getOptionProps({ option, index })}>{option.title}</li>\n    ))}\n  </Listbox>\n) : null}",moduleTS:"./UseAutocomplete.js",rawTS:"import * as React from 'react';\nimport { useAutocomplete } from '@mui/base/AutocompleteUnstyled';\nimport { styled } from '@mui/system';\n\nconst Label = styled('label')({\n  display: 'block',\n});\n\nconst Input = styled('input')(({ theme }) => ({\n  width: 200,\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#000',\n  color: theme.palette.mode === 'light' ? '#000' : '#fff',\n}));\n\nconst Listbox = styled('ul')(({ theme }) => ({\n  width: 200,\n  margin: 0,\n  padding: 0,\n  zIndex: 1,\n  position: 'absolute',\n  listStyle: 'none',\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#000',\n  overflow: 'auto',\n  maxHeight: 200,\n  border: '1px solid rgba(0,0,0,.25)',\n  '& li.Mui-focused': {\n    backgroundColor: '#4a8df6',\n    color: 'white',\n    cursor: 'pointer',\n  },\n  '& li:active': {\n    backgroundColor: '#2977f5',\n    color: 'white',\n  },\n}));\n\nexport default function UseAutocomplete() {\n  const {\n    getRootProps,\n    getInputLabelProps,\n    getInputProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n  } = useAutocomplete({\n    id: 'use-autocomplete-demo',\n    options: top100Films,\n    getOptionLabel: (option) => option.title,\n  });\n\n  return (\n    <div>\n      <div {...getRootProps()}>\n        <Label {...getInputLabelProps()}>useAutocomplete</Label>\n        <Input {...getInputProps()} />\n      </div>\n      {groupedOptions.length > 0 ? (\n        <Listbox {...getListboxProps()}>\n          {(groupedOptions as typeof top100Films).map((option, index) => (\n            <li {...getOptionProps({ option, index })}>{option.title}</li>\n          ))}\n        </Listbox>\n      ) : null}\n    </div>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"CustomizedHook.js":{module:"./CustomizedHook.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useAutocomplete } from '@mui/base/AutocompleteUnstyled';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { styled } from '@mui/material/styles';\nimport { autocompleteClasses } from '@mui/material/Autocomplete';\n\nconst Root = styled('div')(\n  ({ theme }) => `\n  color: ${\n    theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.65)' : 'rgba(0,0,0,.85)'\n  };\n  font-size: 14px;\n`,\n);\n\nconst Label = styled('label')`\n  padding: 0 0 4px;\n  line-height: 1.5;\n  display: block;\n`;\n\nconst InputWrapper = styled('div')(\n  ({ theme }) => `\n  width: 300px;\n  border: 1px solid ${theme.palette.mode === 'dark' ? '#434343' : '#d9d9d9'};\n  background-color: ${theme.palette.mode === 'dark' ? '#141414' : '#fff'};\n  border-radius: 4px;\n  padding: 1px;\n  display: flex;\n  flex-wrap: wrap;\n\n  &:hover {\n    border-color: ${theme.palette.mode === 'dark' ? '#177ddc' : '#40a9ff'};\n  }\n\n  &.focused {\n    border-color: ${theme.palette.mode === 'dark' ? '#177ddc' : '#40a9ff'};\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    background-color: ${theme.palette.mode === 'dark' ? '#141414' : '#fff'};\n    color: ${\n      theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.65)' : 'rgba(0,0,0,.85)'\n    };\n    height: 30px;\n    box-sizing: border-box;\n    padding: 4px 6px;\n    width: 0;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    margin: 0;\n    outline: 0;\n  }\n`,\n);\n\nfunction Tag(props) {\n  const { label, onDelete, ...other } = props;\n  return (\n    <div {...other}>\n      <span>{label}</span>\n      <CloseIcon onClick={onDelete} />\n    </div>\n  );\n}\n\nTag.propTypes = {\n  label: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst StyledTag = styled(Tag)(\n  ({ theme }) => `\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 22px;\n  background-color: ${\n    theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.08)' : '#fafafa'\n  };\n  border: 1px solid ${theme.palette.mode === 'dark' ? '#303030' : '#e8e8e8'};\n  border-radius: 2px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n\n  &:focus {\n    border-color: ${theme.palette.mode === 'dark' ? '#177ddc' : '#40a9ff'};\n    background-color: ${theme.palette.mode === 'dark' ? '#003b57' : '#e6f7ff'};\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 12px;\n    cursor: pointer;\n    padding: 4px;\n  }\n`,\n);\n\nconst Listbox = styled('ul')(\n  ({ theme }) => `\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: ${theme.palette.mode === 'dark' ? '#141414' : '#fff'};\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 1;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: ${theme.palette.mode === 'dark' ? '#2b2b2b' : '#fafafa'};\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li.${autocompleteClasses.focused} {\n    background-color: ${theme.palette.mode === 'dark' ? '#003b57' : '#e6f7ff'};\n    cursor: pointer;\n\n    & svg {\n      color: currentColor;\n    }\n  }\n`,\n);\n\nexport default function CustomizedHook() {\n  const {\n    getRootProps,\n    getInputLabelProps,\n    getInputProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n    value,\n    focused,\n    setAnchorEl,\n  } = useAutocomplete({\n    id: 'customized-hook-demo',\n    defaultValue: [top100Films[1]],\n    multiple: true,\n    options: top100Films,\n    getOptionLabel: (option) => option.title,\n  });\n\n  return (\n    <Root>\n      <div {...getRootProps()}>\n        <Label {...getInputLabelProps()}>Customized hook</Label>\n        <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\n          {value.map((option, index) => (\n            <StyledTag label={option.title} {...getTagProps({ index })} />\n          ))}\n\n          <input {...getInputProps()} />\n        </InputWrapper>\n      </div>\n      {groupedOptions.length > 0 ? (\n        <Listbox {...getListboxProps()}>\n          {groupedOptions.map((option, index) => (\n            <li {...getOptionProps({ option, index })}>\n              <span>{option.title}</span>\n              <CheckIcon fontSize=\"small\" />\n            </li>\n          ))}\n        </Listbox>\n      ) : null}\n    </Root>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./CustomizedHook.js",rawTS:"import * as React from 'react';\nimport {\n  useAutocomplete,\n  AutocompleteGetTagProps,\n} from '@mui/base/AutocompleteUnstyled';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { styled } from '@mui/material/styles';\nimport { autocompleteClasses } from '@mui/material/Autocomplete';\n\nconst Root = styled('div')(\n  ({ theme }) => `\n  color: ${\n    theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.65)' : 'rgba(0,0,0,.85)'\n  };\n  font-size: 14px;\n`,\n);\n\nconst Label = styled('label')`\n  padding: 0 0 4px;\n  line-height: 1.5;\n  display: block;\n`;\n\nconst InputWrapper = styled('div')(\n  ({ theme }) => `\n  width: 300px;\n  border: 1px solid ${theme.palette.mode === 'dark' ? '#434343' : '#d9d9d9'};\n  background-color: ${theme.palette.mode === 'dark' ? '#141414' : '#fff'};\n  border-radius: 4px;\n  padding: 1px;\n  display: flex;\n  flex-wrap: wrap;\n\n  &:hover {\n    border-color: ${theme.palette.mode === 'dark' ? '#177ddc' : '#40a9ff'};\n  }\n\n  &.focused {\n    border-color: ${theme.palette.mode === 'dark' ? '#177ddc' : '#40a9ff'};\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    background-color: ${theme.palette.mode === 'dark' ? '#141414' : '#fff'};\n    color: ${\n      theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.65)' : 'rgba(0,0,0,.85)'\n    };\n    height: 30px;\n    box-sizing: border-box;\n    padding: 4px 6px;\n    width: 0;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    margin: 0;\n    outline: 0;\n  }\n`,\n);\n\ninterface TagProps extends ReturnType<AutocompleteGetTagProps> {\n  label: string;\n}\n\nfunction Tag(props: TagProps) {\n  const { label, onDelete, ...other } = props;\n  return (\n    <div {...other}>\n      <span>{label}</span>\n      <CloseIcon onClick={onDelete} />\n    </div>\n  );\n}\n\nconst StyledTag = styled(Tag)<TagProps>(\n  ({ theme }) => `\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 22px;\n  background-color: ${\n    theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.08)' : '#fafafa'\n  };\n  border: 1px solid ${theme.palette.mode === 'dark' ? '#303030' : '#e8e8e8'};\n  border-radius: 2px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n\n  &:focus {\n    border-color: ${theme.palette.mode === 'dark' ? '#177ddc' : '#40a9ff'};\n    background-color: ${theme.palette.mode === 'dark' ? '#003b57' : '#e6f7ff'};\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 12px;\n    cursor: pointer;\n    padding: 4px;\n  }\n`,\n);\n\nconst Listbox = styled('ul')(\n  ({ theme }) => `\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: ${theme.palette.mode === 'dark' ? '#141414' : '#fff'};\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 1;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: ${theme.palette.mode === 'dark' ? '#2b2b2b' : '#fafafa'};\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li.${autocompleteClasses.focused} {\n    background-color: ${theme.palette.mode === 'dark' ? '#003b57' : '#e6f7ff'};\n    cursor: pointer;\n\n    & svg {\n      color: currentColor;\n    }\n  }\n`,\n);\n\nexport default function CustomizedHook() {\n  const {\n    getRootProps,\n    getInputLabelProps,\n    getInputProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n    value,\n    focused,\n    setAnchorEl,\n  } = useAutocomplete({\n    id: 'customized-hook-demo',\n    defaultValue: [top100Films[1]],\n    multiple: true,\n    options: top100Films,\n    getOptionLabel: (option) => option.title,\n  });\n\n  return (\n    <Root>\n      <div {...getRootProps()}>\n        <Label {...getInputLabelProps()}>Customized hook</Label>\n        <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\n          {value.map((option: FilmOptionType, index: number) => (\n            <StyledTag label={option.title} {...getTagProps({ index })} />\n          ))}\n          <input {...getInputProps()} />\n        </InputWrapper>\n      </div>\n      {groupedOptions.length > 0 ? (\n        <Listbox {...getListboxProps()}>\n          {(groupedOptions as typeof top100Films).map((option, index) => (\n            <li {...getOptionProps({ option, index })}>\n              <span>{option.title}</span>\n              <CheckIcon fontSize=\"small\" />\n            </li>\n          ))}\n        </Listbox>\n      ) : null}\n    </Root>\n  );\n}\n\ninterface FilmOptionType {\n  title: string;\n  year: number;\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"Asynchronous.js":{module:"./Asynchronous.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function Asynchronous() {\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const loading = open && options.length === 0;\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      await sleep(1e3); // For demo purposes.\n\n      if (active) {\n        setOptions([...topFilms]);\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  return (\n    <Autocomplete\n      id=\"asynchronous-demo\"\n      sx={{ width: 300 }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      isOptionEqualToValue={(option, value) => option.title === value.title}\n      getOptionLabel={(option) => option.title}\n      options={options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Asynchronous\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n\n// Top films as rated by IMDb users. http://www.imdb.com/chart/top\nconst topFilms = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n];\n",moduleTS:"./Asynchronous.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\n\ninterface Film {\n  title: string;\n  year: number;\n}\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function Asynchronous() {\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState<readonly Film[]>([]);\n  const loading = open && options.length === 0;\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      await sleep(1e3); // For demo purposes.\n\n      if (active) {\n        setOptions([...topFilms]);\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  return (\n    <Autocomplete\n      id=\"asynchronous-demo\"\n      sx={{ width: 300 }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      isOptionEqualToValue={(option, value) => option.title === value.title}\n      getOptionLabel={(option) => option.title}\n      options={options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Asynchronous\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n\n// Top films as rated by IMDb users. http://www.imdb.com/chart/top\nconst topFilms = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n];\n"},"Tags.js":{module:"./Tags.js",raw:"import * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\n\nexport default function Tags() {\n  return (\n    <Stack spacing={3} sx={{ width: 500 }}>\n      <Autocomplete\n        multiple\n        id=\"tags-standard\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"standard\"\n            label=\"Multiple values\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"tags-outlined\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        filterSelectedOptions\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"filterSelectedOptions\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"tags-filled\"\n        options={top100Films.map((option) => option.title)}\n        defaultValue={[top100Films[13].title]}\n        freeSolo\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"filled\"\n            label=\"freeSolo\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"tags-readOnly\"\n        options={top100Films.map((option) => option.title)}\n        defaultValue={[top100Films[12].title, top100Films[13].title]}\n        readOnly\n        renderInput={(params) => (\n          <TextField {...params} label=\"readOnly\" placeholder=\"Favorites\" />\n        )}\n      />\n    </Stack>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./Tags.js",rawTS:"import * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\n\nexport default function Tags() {\n  return (\n    <Stack spacing={3} sx={{ width: 500 }}>\n      <Autocomplete\n        multiple\n        id=\"tags-standard\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"standard\"\n            label=\"Multiple values\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"tags-outlined\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        filterSelectedOptions\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"filterSelectedOptions\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"tags-filled\"\n        options={top100Films.map((option) => option.title)}\n        defaultValue={[top100Films[13].title]}\n        freeSolo\n        renderTags={(value: readonly string[], getTagProps) =>\n          value.map((option: string, index: number) => (\n            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"filled\"\n            label=\"freeSolo\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"tags-readOnly\"\n        options={top100Films.map((option) => option.title)}\n        defaultValue={[top100Films[12].title, top100Films[13].title]}\n        readOnly\n        renderInput={(params) => (\n          <TextField {...params} label=\"readOnly\" placeholder=\"Favorites\" />\n        )}\n      />\n    </Stack>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"GoogleMaps.js":{module:"./GoogleMaps.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\n// This key was created specifically for the demo in mui.com.\n// You need to create a new one for your application.\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyC3aviU6KHXAjoSnxcw6qbOhjnFctbxPkE';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nexport default function GoogleMaps() {\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(\n        `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`,\n        document.querySelector('head'),\n        'google-maps',\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    [],\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current =\n        new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      sx={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === 'string' ? option : option.description\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Add a location\" fullWidth />\n      )}\n      renderOption={(props, option) => {\n        const matches = option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length]),\n        );\n\n        return (\n          <li {...props}>\n            <Grid container alignItems=\"center\">\n              <Grid item>\n                <Box\n                  component={LocationOnIcon}\n                  sx={{ color: 'text.secondary', mr: 2 }}\n                />\n              </Grid>\n              <Grid item xs>\n                {parts.map((part, index) => (\n                  <span\n                    key={index}\n                    style={{\n                      fontWeight: part.highlight ? 700 : 400,\n                    }}\n                  >\n                    {part.text}\n                  </span>\n                ))}\n\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }}\n    />\n  );\n}\n",moduleTS:"./GoogleMaps.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\n// This key was created specifically for the demo in mui.com.\n// You need to create a new one for your application.\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyC3aviU6KHXAjoSnxcw6qbOhjnFctbxPkE';\n\nfunction loadScript(src: string, position: HTMLElement | null, id: string) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\ninterface MainTextMatchedSubstrings {\n  offset: number;\n  length: number;\n}\ninterface StructuredFormatting {\n  main_text: string;\n  secondary_text: string;\n  main_text_matched_substrings: readonly MainTextMatchedSubstrings[];\n}\ninterface PlaceType {\n  description: string;\n  structured_formatting: StructuredFormatting;\n}\n\nexport default function GoogleMaps() {\n  const [value, setValue] = React.useState<PlaceType | null>(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState<readonly PlaceType[]>([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(\n        `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`,\n        document.querySelector('head'),\n        'google-maps',\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle(\n        (\n          request: { input: string },\n          callback: (results?: readonly PlaceType[]) => void,\n        ) => {\n          (autocompleteService.current as any).getPlacePredictions(\n            request,\n            callback,\n          );\n        },\n        200,\n      ),\n    [],\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && (window as any).google) {\n      autocompleteService.current = new (\n        window as any\n      ).google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results?: readonly PlaceType[]) => {\n      if (active) {\n        let newOptions: readonly PlaceType[] = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      sx={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === 'string' ? option : option.description\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event: any, newValue: PlaceType | null) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Add a location\" fullWidth />\n      )}\n      renderOption={(props, option) => {\n        const matches = option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match: any) => [match.offset, match.offset + match.length]),\n        );\n\n        return (\n          <li {...props}>\n            <Grid container alignItems=\"center\">\n              <Grid item>\n                <Box\n                  component={LocationOnIcon}\n                  sx={{ color: 'text.secondary', mr: 2 }}\n                />\n              </Grid>\n              <Grid item xs>\n                {parts.map((part, index) => (\n                  <span\n                    key={index}\n                    style={{\n                      fontWeight: part.highlight ? 700 : 400,\n                    }}\n                  >\n                    {part.text}\n                  </span>\n                ))}\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }}\n    />\n  );\n}\n"},"FixedTags.js":{module:"./FixedTags.js",raw:"import * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function FixedTags() {\n  const fixedOptions = [top100Films[6]];\n  const [value, setValue] = React.useState([...fixedOptions, top100Films[13]]);\n\n  return (\n    <Autocomplete\n      multiple\n      id=\"fixed-tags-demo\"\n      value={value}\n      onChange={(event, newValue) => {\n        setValue([\n          ...fixedOptions,\n          ...newValue.filter((option) => fixedOptions.indexOf(option) === -1),\n        ]);\n      }}\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      renderTags={(tagValue, getTagProps) =>\n        tagValue.map((option, index) => (\n          <Chip\n            label={option.title}\n            {...getTagProps({ index })}\n            disabled={fixedOptions.indexOf(option) !== -1}\n          />\n        ))\n      }\n      style={{ width: 500 }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Fixed tag\" placeholder=\"Favorites\" />\n      )}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./FixedTags.js",rawTS:"import * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nexport default function FixedTags() {\n  const fixedOptions = [top100Films[6]];\n  const [value, setValue] = React.useState([...fixedOptions, top100Films[13]]);\n\n  return (\n    <Autocomplete\n      multiple\n      id=\"fixed-tags-demo\"\n      value={value}\n      onChange={(event, newValue) => {\n        setValue([\n          ...fixedOptions,\n          ...newValue.filter((option) => fixedOptions.indexOf(option) === -1),\n        ]);\n      }}\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      renderTags={(tagValue, getTagProps) =>\n        tagValue.map((option, index) => (\n          <Chip\n            label={option.title}\n            {...getTagProps({ index })}\n            disabled={fixedOptions.indexOf(option) !== -1}\n          />\n        ))\n      }\n      style={{ width: 500 }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Fixed tag\" placeholder=\"Favorites\" />\n      )}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"CheckboxesTags.js":{module:"./CheckboxesTags.js",raw:"import * as React from 'react';\nimport Checkbox from '@mui/material/Checkbox';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nexport default function CheckboxesTags() {\n  return (\n    <Autocomplete\n      multiple\n      id=\"checkboxes-tags-demo\"\n      options={top100Films}\n      disableCloseOnSelect\n      getOptionLabel={(option) => option.title}\n      renderOption={(props, option, { selected }) => (\n        <li {...props}>\n          <Checkbox\n            icon={icon}\n            checkedIcon={checkedIcon}\n            style={{ marginRight: 8 }}\n            checked={selected}\n          />\n          {option.title}\n        </li>\n      )}\n      style={{ width: 500 }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Checkboxes\" placeholder=\"Favorites\" />\n      )}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n];\n",moduleTS:"./CheckboxesTags.js",rawTS:"import * as React from 'react';\nimport Checkbox from '@mui/material/Checkbox';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nexport default function CheckboxesTags() {\n  return (\n    <Autocomplete\n      multiple\n      id=\"checkboxes-tags-demo\"\n      options={top100Films}\n      disableCloseOnSelect\n      getOptionLabel={(option) => option.title}\n      renderOption={(props, option, { selected }) => (\n        <li {...props}>\n          <Checkbox\n            icon={icon}\n            checkedIcon={checkedIcon}\n            style={{ marginRight: 8 }}\n            checked={selected}\n          />\n          {option.title}\n        </li>\n      )}\n      style={{ width: 500 }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Checkboxes\" placeholder=\"Favorites\" />\n      )}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n];\n"},"LimitTags.js":{module:"./LimitTags.js",raw:"import * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\n\nexport default function LimitTags() {\n  return (\n    <Autocomplete\n      multiple\n      limitTags={2}\n      id=\"multiple-limit-tags\"\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\n      renderInput={(params) => (\n        <TextField {...params} label=\"limitTags\" placeholder=\"Favorites\" />\n      )}\n      sx={{ width: '500px' }}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",jsxPreview:'<Autocomplete\n  multiple\n  limitTags={2}\n  id="multiple-limit-tags"\n  options={top100Films}\n  getOptionLabel={(option) => option.title}\n  defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\n  renderInput={(params) => (\n    <TextField {...params} label="limitTags" placeholder="Favorites" />\n  )}\n  sx={{ width: \'500px\' }}\n/>',moduleTS:"./LimitTags.js",rawTS:"import * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\n\nexport default function LimitTags() {\n  return (\n    <Autocomplete\n      multiple\n      limitTags={2}\n      id=\"multiple-limit-tags\"\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\n      renderInput={(params) => (\n        <TextField {...params} label=\"limitTags\" placeholder=\"Favorites\" />\n      )}\n      sx={{ width: '500px' }}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"Sizes.js":{module:"./Sizes.js",raw:"import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\n\nexport default function Sizes() {\n  return (\n    <Stack spacing={2} sx={{ width: 500 }}>\n      <Autocomplete\n        id=\"size-small-standard\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={top100Films[13]}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"standard\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"size-small-standard-multi\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"standard\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        id=\"size-small-outlined\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={top100Films[13]}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Size small\" placeholder=\"Favorites\" />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"size-small-outlined-multi\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Size small\" placeholder=\"Favorites\" />\n        )}\n      />\n      <Autocomplete\n        id=\"size-small-filled\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={top100Films[13]}\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip\n              variant=\"outlined\"\n              label={option.title}\n              size=\"small\"\n              {...getTagProps({ index })}\n            />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"filled\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"size-small-filled-multi\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip\n              variant=\"outlined\"\n              label={option.title}\n              size=\"small\"\n              {...getTagProps({ index })}\n            />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"filled\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n    </Stack>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./Sizes.js",rawTS:"import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\n\nexport default function Sizes() {\n  return (\n    <Stack spacing={2} sx={{ width: 500 }}>\n      <Autocomplete\n        id=\"size-small-standard\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={top100Films[13]}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"standard\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"size-small-standard-multi\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"standard\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        id=\"size-small-outlined\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={top100Films[13]}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Size small\" placeholder=\"Favorites\" />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"size-small-outlined-multi\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Size small\" placeholder=\"Favorites\" />\n        )}\n      />\n      <Autocomplete\n        id=\"size-small-filled\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={top100Films[13]}\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip\n              variant=\"outlined\"\n              label={option.title}\n              size=\"small\"\n              {...getTagProps({ index })}\n            />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"filled\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n      <Autocomplete\n        multiple\n        id=\"size-small-filled-multi\"\n        size=\"small\"\n        options={top100Films}\n        getOptionLabel={(option) => option.title}\n        defaultValue={[top100Films[13]]}\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip\n              variant=\"outlined\"\n              label={option.title}\n              size=\"small\"\n              {...getTagProps({ index })}\n            />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"filled\"\n            label=\"Size small\"\n            placeholder=\"Favorites\"\n          />\n        )}\n      />\n    </Stack>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"GitHubLabel.js":{module:"./GitHubLabel.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme, styled } from '@mui/material/styles';\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DoneIcon from '@mui/icons-material/Done';\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport InputBase from '@mui/material/InputBase';\nimport Box from '@mui/material/Box';\n\nconst StyledAutocompletePopper = styled('div')(({ theme }) => ({\n  [`& .${autocompleteClasses.paper}`]: {\n    boxShadow: 'none',\n    margin: 0,\n    color: 'inherit',\n    fontSize: 13,\n  },\n  [`& .${autocompleteClasses.listbox}`]: {\n    backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#1c2128',\n    padding: 0,\n    [`& .${autocompleteClasses.option}`]: {\n      minHeight: 'auto',\n      alignItems: 'flex-start',\n      padding: 8,\n      borderBottom: `1px solid  ${\n        theme.palette.mode === 'light' ? ' #eaecef' : '#30363d'\n      }`,\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: 'transparent',\n      },\n      [`&.${autocompleteClasses.focused}, &.${autocompleteClasses.focused}[aria-selected=\"true\"]`]:\n        {\n          backgroundColor: theme.palette.action.hover,\n        },\n    },\n  },\n  [`&.${autocompleteClasses.popperDisablePortal}`]: {\n    position: 'relative',\n  },\n}));\n\nfunction PopperComponent(props) {\n  const { disablePortal, anchorEl, open, ...other } = props;\n  return <StyledAutocompletePopper {...other} />;\n}\n\nPopperComponent.propTypes = {\n  anchorEl: PropTypes.any,\n  disablePortal: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n};\n\nconst StyledPopper = styled(Popper)(({ theme }) => ({\n  border: `1px solid ${theme.palette.mode === 'light' ? '#e1e4e8' : '#30363d'}`,\n  boxShadow: `0 8px 24px ${\n    theme.palette.mode === 'light' ? 'rgba(149, 157, 165, 0.2)' : 'rgb(1, 4, 9)'\n  }`,\n  borderRadius: 6,\n  width: 300,\n  zIndex: theme.zIndex.modal,\n  fontSize: 13,\n  color: theme.palette.mode === 'light' ? '#24292e' : '#c9d1d9',\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#1c2128',\n}));\n\nconst StyledInput = styled(InputBase)(({ theme }) => ({\n  padding: 10,\n  width: '100%',\n  borderBottom: `1px solid ${\n    theme.palette.mode === 'light' ? '#eaecef' : '#30363d'\n  }`,\n  '& input': {\n    borderRadius: 4,\n    backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#0d1117',\n    padding: 8,\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\n    border: `1px solid ${theme.palette.mode === 'light' ? '#eaecef' : '#30363d'}`,\n    fontSize: 14,\n    '&:focus': {\n      boxShadow: `0px 0px 0px 3px ${\n        theme.palette.mode === 'light'\n          ? 'rgba(3, 102, 214, 0.3)'\n          : 'rgb(12, 45, 107)'\n      }`,\n      borderColor: theme.palette.mode === 'light' ? '#0366d6' : '#388bfd',\n    },\n  },\n}));\n\nconst Button = styled(ButtonBase)(({ theme }) => ({\n  fontSize: 13,\n  width: '100%',\n  textAlign: 'left',\n  paddingBottom: 8,\n  color: theme.palette.mode === 'light' ? '#586069' : '#8b949e',\n  fontWeight: 600,\n  '&:hover,&:focus': {\n    color: theme.palette.mode === 'light' ? '#0366d6' : '#58a6ff',\n  },\n  '& span': {\n    width: '100%',\n  },\n  '& svg': {\n    width: 16,\n    height: 16,\n  },\n}));\n\nexport default function GitHubLabel() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [value, setValue] = React.useState([labels[1], labels[11]]);\n  const [pendingValue, setPendingValue] = React.useState([]);\n  const theme = useTheme();\n\n  const handleClick = (event) => {\n    setPendingValue(value);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setValue(pendingValue);\n    if (anchorEl) {\n      anchorEl.focus();\n    }\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'github-label' : undefined;\n\n  return (\n    <React.Fragment>\n      <Box sx={{ width: 221, fontSize: 13 }}>\n        <Button disableRipple aria-describedby={id} onClick={handleClick}>\n          <span>Labels</span>\n          <SettingsIcon />\n        </Button>\n        {value.map((label) => (\n          <Box\n            key={label.name}\n            sx={{\n              mt: '3px',\n              height: 20,\n              padding: '.15em 4px',\n              fontWeight: 600,\n              lineHeight: '15px',\n              borderRadius: '2px',\n            }}\n            style={{\n              backgroundColor: label.color,\n              color: theme.palette.getContrastText(label.color),\n            }}\n          >\n            {label.name}\n          </Box>\n        ))}\n      </Box>\n      <StyledPopper id={id} open={open} anchorEl={anchorEl} placement=\"bottom-start\">\n        <ClickAwayListener onClickAway={handleClose}>\n          <div>\n            <Box\n              sx={{\n                borderBottom: `1px solid ${\n                  theme.palette.mode === 'light' ? '#eaecef' : '#30363d'\n                }`,\n                padding: '8px 10px',\n                fontWeight: 600,\n              }}\n            >\n              Apply labels to this pull request\n            </Box>\n            <Autocomplete\n              open\n              multiple\n              onClose={(event, reason) => {\n                if (reason === 'escape') {\n                  handleClose();\n                }\n              }}\n              value={pendingValue}\n              onChange={(event, newValue, reason) => {\n                if (\n                  event.type === 'keydown' &&\n                  event.key === 'Backspace' &&\n                  reason === 'removeOption'\n                ) {\n                  return;\n                }\n                setPendingValue(newValue);\n              }}\n              disableCloseOnSelect\n              PopperComponent={PopperComponent}\n              renderTags={() => null}\n              noOptionsText=\"No labels\"\n              renderOption={(props, option, { selected }) => (\n                <li {...props}>\n                  <Box\n                    component={DoneIcon}\n                    sx={{ width: 17, height: 17, mr: '5px', ml: '-2px' }}\n                    style={{\n                      visibility: selected ? 'visible' : 'hidden',\n                    }}\n                  />\n                  <Box\n                    component=\"span\"\n                    sx={{\n                      width: 14,\n                      height: 14,\n                      flexShrink: 0,\n                      borderRadius: '3px',\n                      mr: 1,\n                      mt: '2px',\n                    }}\n                    style={{ backgroundColor: option.color }}\n                  />\n                  <Box\n                    sx={{\n                      flexGrow: 1,\n                      '& span': {\n                        color:\n                          theme.palette.mode === 'light' ? '#586069' : '#8b949e',\n                      },\n                    }}\n                  >\n                    {option.name}\n                    <br />\n                    <span>{option.description}</span>\n                  </Box>\n                  <Box\n                    component={CloseIcon}\n                    sx={{ opacity: 0.6, width: 18, height: 18 }}\n                    style={{\n                      visibility: selected ? 'visible' : 'hidden',\n                    }}\n                  />\n                </li>\n              )}\n              options={[...labels].sort((a, b) => {\n                // Display the selected labels first.\n                let ai = value.indexOf(a);\n                ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n                let bi = value.indexOf(b);\n                bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n                return ai - bi;\n              })}\n              getOptionLabel={(option) => option.name}\n              renderInput={(params) => (\n                <StyledInput\n                  ref={params.InputProps.ref}\n                  inputProps={params.inputProps}\n                  autoFocus\n                  placeholder=\"Filter labels\"\n                />\n              )}\n            />\n          </div>\n        </ClickAwayListener>\n      </StyledPopper>\n    </React.Fragment>\n  );\n}\n\n// From https://github.com/abdonrd/github-labels\nconst labels = [\n  {\n    name: 'good first issue',\n    color: '#7057ff',\n    description: 'Good for newcomers',\n  },\n  {\n    name: 'help wanted',\n    color: '#008672',\n    description: 'Extra attention is needed',\n  },\n  {\n    name: 'priority: critical',\n    color: '#b60205',\n    description: '',\n  },\n  {\n    name: 'priority: high',\n    color: '#d93f0b',\n    description: '',\n  },\n  {\n    name: 'priority: low',\n    color: '#0e8a16',\n    description: '',\n  },\n  {\n    name: 'priority: medium',\n    color: '#fbca04',\n    description: '',\n  },\n  {\n    name: \"status: can't reproduce\",\n    color: '#fec1c1',\n    description: '',\n  },\n  {\n    name: 'status: confirmed',\n    color: '#215cea',\n    description: '',\n  },\n  {\n    name: 'status: duplicate',\n    color: '#cfd3d7',\n    description: 'This issue or pull request already exists',\n  },\n  {\n    name: 'status: needs information',\n    color: '#fef2c0',\n    description: '',\n  },\n  {\n    name: 'status: wont do/fix',\n    color: '#eeeeee',\n    description: 'This will not be worked on',\n  },\n  {\n    name: 'type: bug',\n    color: '#d73a4a',\n    description: \"Something isn't working\",\n  },\n  {\n    name: 'type: discussion',\n    color: '#d4c5f9',\n    description: '',\n  },\n  {\n    name: 'type: documentation',\n    color: '#006b75',\n    description: '',\n  },\n  {\n    name: 'type: enhancement',\n    color: '#84b6eb',\n    description: '',\n  },\n  {\n    name: 'type: epic',\n    color: '#3e4b9e',\n    description: 'A theme of work that contain sub-tasks',\n  },\n  {\n    name: 'type: feature request',\n    color: '#fbca04',\n    description: 'New feature or request',\n  },\n  {\n    name: 'type: question',\n    color: '#d876e3',\n    description: 'Further information is requested',\n  },\n];\n",moduleTS:"./GitHubLabel.js",rawTS:"import * as React from 'react';\nimport { useTheme, styled } from '@mui/material/styles';\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DoneIcon from '@mui/icons-material/Done';\nimport Autocomplete, {\n  AutocompleteCloseReason,\n  autocompleteClasses,\n} from '@mui/material/Autocomplete';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport InputBase from '@mui/material/InputBase';\nimport Box from '@mui/material/Box';\n\ninterface PopperComponentProps {\n  anchorEl?: any;\n  disablePortal?: boolean;\n  open: boolean;\n}\n\nconst StyledAutocompletePopper = styled('div')(({ theme }) => ({\n  [`& .${autocompleteClasses.paper}`]: {\n    boxShadow: 'none',\n    margin: 0,\n    color: 'inherit',\n    fontSize: 13,\n  },\n  [`& .${autocompleteClasses.listbox}`]: {\n    backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#1c2128',\n    padding: 0,\n    [`& .${autocompleteClasses.option}`]: {\n      minHeight: 'auto',\n      alignItems: 'flex-start',\n      padding: 8,\n      borderBottom: `1px solid  ${\n        theme.palette.mode === 'light' ? ' #eaecef' : '#30363d'\n      }`,\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: 'transparent',\n      },\n      [`&.${autocompleteClasses.focused}, &.${autocompleteClasses.focused}[aria-selected=\"true\"]`]:\n        {\n          backgroundColor: theme.palette.action.hover,\n        },\n    },\n  },\n  [`&.${autocompleteClasses.popperDisablePortal}`]: {\n    position: 'relative',\n  },\n}));\n\nfunction PopperComponent(props: PopperComponentProps) {\n  const { disablePortal, anchorEl, open, ...other } = props;\n  return <StyledAutocompletePopper {...other} />;\n}\n\nconst StyledPopper = styled(Popper)(({ theme }) => ({\n  border: `1px solid ${theme.palette.mode === 'light' ? '#e1e4e8' : '#30363d'}`,\n  boxShadow: `0 8px 24px ${\n    theme.palette.mode === 'light' ? 'rgba(149, 157, 165, 0.2)' : 'rgb(1, 4, 9)'\n  }`,\n  borderRadius: 6,\n  width: 300,\n  zIndex: theme.zIndex.modal,\n  fontSize: 13,\n  color: theme.palette.mode === 'light' ? '#24292e' : '#c9d1d9',\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#1c2128',\n}));\n\nconst StyledInput = styled(InputBase)(({ theme }) => ({\n  padding: 10,\n  width: '100%',\n  borderBottom: `1px solid ${\n    theme.palette.mode === 'light' ? '#eaecef' : '#30363d'\n  }`,\n  '& input': {\n    borderRadius: 4,\n    backgroundColor: theme.palette.mode === 'light' ? '#fff' : '#0d1117',\n    padding: 8,\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\n    border: `1px solid ${theme.palette.mode === 'light' ? '#eaecef' : '#30363d'}`,\n    fontSize: 14,\n    '&:focus': {\n      boxShadow: `0px 0px 0px 3px ${\n        theme.palette.mode === 'light'\n          ? 'rgba(3, 102, 214, 0.3)'\n          : 'rgb(12, 45, 107)'\n      }`,\n      borderColor: theme.palette.mode === 'light' ? '#0366d6' : '#388bfd',\n    },\n  },\n}));\n\nconst Button = styled(ButtonBase)(({ theme }) => ({\n  fontSize: 13,\n  width: '100%',\n  textAlign: 'left',\n  paddingBottom: 8,\n  color: theme.palette.mode === 'light' ? '#586069' : '#8b949e',\n  fontWeight: 600,\n  '&:hover,&:focus': {\n    color: theme.palette.mode === 'light' ? '#0366d6' : '#58a6ff',\n  },\n  '& span': {\n    width: '100%',\n  },\n  '& svg': {\n    width: 16,\n    height: 16,\n  },\n}));\n\nexport default function GitHubLabel() {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [value, setValue] = React.useState<LabelType[]>([labels[1], labels[11]]);\n  const [pendingValue, setPendingValue] = React.useState<LabelType[]>([]);\n  const theme = useTheme();\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setPendingValue(value);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setValue(pendingValue);\n    if (anchorEl) {\n      anchorEl.focus();\n    }\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'github-label' : undefined;\n\n  return (\n    <React.Fragment>\n      <Box sx={{ width: 221, fontSize: 13 }}>\n        <Button disableRipple aria-describedby={id} onClick={handleClick}>\n          <span>Labels</span>\n          <SettingsIcon />\n        </Button>\n        {value.map((label) => (\n          <Box\n            key={label.name}\n            sx={{\n              mt: '3px',\n              height: 20,\n              padding: '.15em 4px',\n              fontWeight: 600,\n              lineHeight: '15px',\n              borderRadius: '2px',\n            }}\n            style={{\n              backgroundColor: label.color,\n              color: theme.palette.getContrastText(label.color),\n            }}\n          >\n            {label.name}\n          </Box>\n        ))}\n      </Box>\n      <StyledPopper id={id} open={open} anchorEl={anchorEl} placement=\"bottom-start\">\n        <ClickAwayListener onClickAway={handleClose}>\n          <div>\n            <Box\n              sx={{\n                borderBottom: `1px solid ${\n                  theme.palette.mode === 'light' ? '#eaecef' : '#30363d'\n                }`,\n                padding: '8px 10px',\n                fontWeight: 600,\n              }}\n            >\n              Apply labels to this pull request\n            </Box>\n            <Autocomplete\n              open\n              multiple\n              onClose={(\n                event: React.ChangeEvent<{}>,\n                reason: AutocompleteCloseReason,\n              ) => {\n                if (reason === 'escape') {\n                  handleClose();\n                }\n              }}\n              value={pendingValue}\n              onChange={(event, newValue, reason) => {\n                if (\n                  event.type === 'keydown' &&\n                  (event as React.KeyboardEvent).key === 'Backspace' &&\n                  reason === 'removeOption'\n                ) {\n                  return;\n                }\n                setPendingValue(newValue);\n              }}\n              disableCloseOnSelect\n              PopperComponent={PopperComponent}\n              renderTags={() => null}\n              noOptionsText=\"No labels\"\n              renderOption={(props, option, { selected }) => (\n                <li {...props}>\n                  <Box\n                    component={DoneIcon}\n                    sx={{ width: 17, height: 17, mr: '5px', ml: '-2px' }}\n                    style={{\n                      visibility: selected ? 'visible' : 'hidden',\n                    }}\n                  />\n                  <Box\n                    component=\"span\"\n                    sx={{\n                      width: 14,\n                      height: 14,\n                      flexShrink: 0,\n                      borderRadius: '3px',\n                      mr: 1,\n                      mt: '2px',\n                    }}\n                    style={{ backgroundColor: option.color }}\n                  />\n                  <Box\n                    sx={{\n                      flexGrow: 1,\n                      '& span': {\n                        color:\n                          theme.palette.mode === 'light' ? '#586069' : '#8b949e',\n                      },\n                    }}\n                  >\n                    {option.name}\n                    <br />\n                    <span>{option.description}</span>\n                  </Box>\n                  <Box\n                    component={CloseIcon}\n                    sx={{ opacity: 0.6, width: 18, height: 18 }}\n                    style={{\n                      visibility: selected ? 'visible' : 'hidden',\n                    }}\n                  />\n                </li>\n              )}\n              options={[...labels].sort((a, b) => {\n                // Display the selected labels first.\n                let ai = value.indexOf(a);\n                ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n                let bi = value.indexOf(b);\n                bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n                return ai - bi;\n              })}\n              getOptionLabel={(option) => option.name}\n              renderInput={(params) => (\n                <StyledInput\n                  ref={params.InputProps.ref}\n                  inputProps={params.inputProps}\n                  autoFocus\n                  placeholder=\"Filter labels\"\n                />\n              )}\n            />\n          </div>\n        </ClickAwayListener>\n      </StyledPopper>\n    </React.Fragment>\n  );\n}\n\ninterface LabelType {\n  name: string;\n  color: string;\n  description?: string;\n}\n\n// From https://github.com/abdonrd/github-labels\nconst labels = [\n  {\n    name: 'good first issue',\n    color: '#7057ff',\n    description: 'Good for newcomers',\n  },\n  {\n    name: 'help wanted',\n    color: '#008672',\n    description: 'Extra attention is needed',\n  },\n  {\n    name: 'priority: critical',\n    color: '#b60205',\n    description: '',\n  },\n  {\n    name: 'priority: high',\n    color: '#d93f0b',\n    description: '',\n  },\n  {\n    name: 'priority: low',\n    color: '#0e8a16',\n    description: '',\n  },\n  {\n    name: 'priority: medium',\n    color: '#fbca04',\n    description: '',\n  },\n  {\n    name: \"status: can't reproduce\",\n    color: '#fec1c1',\n    description: '',\n  },\n  {\n    name: 'status: confirmed',\n    color: '#215cea',\n    description: '',\n  },\n  {\n    name: 'status: duplicate',\n    color: '#cfd3d7',\n    description: 'This issue or pull request already exists',\n  },\n  {\n    name: 'status: needs information',\n    color: '#fef2c0',\n    description: '',\n  },\n  {\n    name: 'status: wont do/fix',\n    color: '#eeeeee',\n    description: 'This will not be worked on',\n  },\n  {\n    name: 'type: bug',\n    color: '#d73a4a',\n    description: \"Something isn't working\",\n  },\n  {\n    name: 'type: discussion',\n    color: '#d4c5f9',\n    description: '',\n  },\n  {\n    name: 'type: documentation',\n    color: '#006b75',\n    description: '',\n  },\n  {\n    name: 'type: enhancement',\n    color: '#84b6eb',\n    description: '',\n  },\n  {\n    name: 'type: epic',\n    color: '#3e4b9e',\n    description: 'A theme of work that contain sub-tasks',\n  },\n  {\n    name: 'type: feature request',\n    color: '#fbca04',\n    description: 'New feature or request',\n  },\n  {\n    name: 'type: question',\n    color: '#d876e3',\n    description: 'Further information is requested',\n  },\n];\n"},"CustomInputAutocomplete.js":{module:"./CustomInputAutocomplete.js",raw:"import * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst options = ['Option 1', 'Option 2'];\n\nexport default function CustomInputAutocomplete() {\n  return (\n    <label>\n      Value:{' '}\n      <Autocomplete\n        sx={{\n          display: 'inline-block',\n          '& input': {\n            width: 200,\n            bgcolor: 'background.paper',\n            color: (theme) =>\n              theme.palette.getContrastText(theme.palette.background.paper),\n          },\n        }}\n        id=\"custom-input-demo\"\n        options={options}\n        renderInput={(params) => (\n          <div ref={params.InputProps.ref}>\n            <input type=\"text\" {...params.inputProps} />\n          </div>\n        )}\n      />\n    </label>\n  );\n}\n",moduleTS:"./CustomInputAutocomplete.js",rawTS:"import * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst options = ['Option 1', 'Option 2'];\n\nexport default function CustomInputAutocomplete() {\n  return (\n    <label>\n      Value:{' '}\n      <Autocomplete\n        sx={{\n          display: 'inline-block',\n          '& input': {\n            width: 200,\n            bgcolor: 'background.paper',\n            color: (theme) =>\n              theme.palette.getContrastText(theme.palette.background.paper),\n          },\n        }}\n        id=\"custom-input-demo\"\n        options={options}\n        renderInput={(params) => (\n          <div ref={params.InputProps.ref}>\n            <input type=\"text\" {...params.inputProps} />\n          </div>\n        )}\n      />\n    </label>\n  );\n}\n"},"Highlights.js":{module:"./Highlights.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n\nexport default function Highlights() {\n  return (\n    <Autocomplete\n      id=\"highlights-demo\"\n      sx={{ width: 300 }}\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Highlights\" margin=\"normal\" />\n      )}\n      renderOption={(props, option, { inputValue }) => {\n        const matches = match(option.title, inputValue);\n        const parts = parse(option.title, matches);\n\n        return (\n          <li {...props}>\n            <div>\n              {parts.map((part, index) => (\n                <span\n                  key={index}\n                  style={{\n                    fontWeight: part.highlight ? 700 : 400,\n                  }}\n                >\n                  {part.text}\n                </span>\n              ))}\n            </div>\n          </li>\n        );\n      }}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",moduleTS:"./Highlights.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n\nexport default function Highlights() {\n  return (\n    <Autocomplete\n      id=\"highlights-demo\"\n      sx={{ width: 300 }}\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Highlights\" margin=\"normal\" />\n      )}\n      renderOption={(props, option, { inputValue }) => {\n        const matches = match(option.title, inputValue);\n        const parts = parse(option.title, matches);\n\n        return (\n          <li {...props}>\n            <div>\n              {parts.map((part, index) => (\n                <span\n                  key={index}\n                  style={{\n                    fontWeight: part.highlight ? 700 : 400,\n                  }}\n                >\n                  {part.text}\n                </span>\n              ))}\n            </div>\n          </li>\n        );\n      }}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"Filter.js":{module:"./Filter.js",raw:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: (option) => option.title,\n});\n\nexport default function Filter() {\n  return (\n    <Autocomplete\n      id=\"filter-demo\"\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      filterOptions={filterOptions}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"Custom filter\" />}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n",jsxPreview:'<Autocomplete\n  id="filter-demo"\n  options={top100Films}\n  getOptionLabel={(option) => option.title}\n  filterOptions={filterOptions}\n  sx={{ width: 300 }}\n  renderInput={(params) => <TextField {...params} label="Custom filter" />}\n/>',moduleTS:"./Filter.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: (option: FilmOptionType) => option.title,\n});\n\nexport default function Filter() {\n  return (\n    <Autocomplete\n      id=\"filter-demo\"\n      options={top100Films}\n      getOptionLabel={(option) => option.title}\n      filterOptions={filterOptions}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"Custom filter\" />}\n    />\n  );\n}\n\ninterface FilmOptionType {\n  title: string;\n  year: number;\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003,\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001,\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980,\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002,\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977,\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'L\xe9on: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL\xb7E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  {\n    title: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983,\n  },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Am\xe9lie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  {\n    title: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004,\n  },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"},"Virtualize.js":{module:"./Virtualize.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Popper from '@mui/material/Popper';\nimport { useTheme, styled } from '@mui/material/styles';\nimport { VariableSizeList } from 'react-window';\nimport Typography from '@mui/material/Typography';\n\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props) {\n  const { data, index, style } = props;\n  const dataSet = data[index];\n  const inlineStyle = {\n    ...style,\n    top: style.top + LISTBOX_PADDING,\n  };\n\n  if (dataSet.hasOwnProperty('group')) {\n    return (\n      <ListSubheader key={dataSet.key} component=\"div\" style={inlineStyle}>\n        {dataSet.group}\n      </ListSubheader>\n    );\n  }\n\n  return (\n    <Typography component=\"li\" {...dataSet[0]} noWrap style={inlineStyle}>\n      {dataSet[1]}\n    </Typography>\n  );\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n}\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\n  const { children, ...other } = props;\n  const itemData = [];\n  children.forEach((item) => {\n    itemData.push(item);\n    itemData.push(...(item.children || []));\n  });\n\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), {\n    noSsr: true,\n  });\n\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = (child) => {\n    if (child.hasOwnProperty('group')) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  const gridRef = useResetCache(itemCount);\n\n  return (\n    <div ref={ref}>\n      <OuterElementContext.Provider value={other}>\n        <VariableSizeList\n          itemData={itemData}\n          height={getHeight() + 2 * LISTBOX_PADDING}\n          width=\"100%\"\n          ref={gridRef}\n          outerElementType={OuterElementType}\n          innerElementType=\"ul\"\n          itemSize={(index) => getChildSize(itemData[index])}\n          overscanCount={5}\n          itemCount={itemCount}\n        >\n          {renderRow}\n        </VariableSizeList>\n      </OuterElementContext.Provider>\n    </div>\n  );\n});\n\nListboxComponent.propTypes = {\n  children: PropTypes.node,\n};\n\nfunction random(length) {\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n\n  for (let i = 0; i < length; i += 1) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n\n  return result;\n}\n\nconst StyledPopper = styled(Popper)({\n  [`& .${autocompleteClasses.listbox}`]: {\n    boxSizing: 'border-box',\n    '& ul': {\n      padding: 0,\n      margin: 0,\n    },\n  },\n});\n\nconst OPTIONS = Array.from(new Array(10000))\n  .map(() => random(10 + Math.ceil(Math.random() * 20)))\n  .sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\n\nexport default function Virtualize() {\n  return (\n    <Autocomplete\n      id=\"virtualize-demo\"\n      sx={{ width: 300 }}\n      disableListWrap\n      PopperComponent={StyledPopper}\n      ListboxComponent={ListboxComponent}\n      options={OPTIONS}\n      groupBy={(option) => option[0].toUpperCase()}\n      renderInput={(params) => <TextField {...params} label=\"10,000 options\" />}\n      renderOption={(props, option) => [props, option]}\n      // TODO: Post React 18 update - validate this conversion, look like a hidden bug\n      renderGroup={(params) => params}\n    />\n  );\n}\n",jsxPreview:'<Autocomplete\n  id="virtualize-demo"\n  sx={{ width: 300 }}\n  disableListWrap\n  PopperComponent={StyledPopper}\n  ListboxComponent={ListboxComponent}\n  options={OPTIONS}\n  groupBy={(option) => option[0].toUpperCase()}\n  renderInput={(params) => <TextField {...params} label="10,000 options" />}\n  renderOption={(props, option) => [props, option] as React.ReactNode}\n  // TODO: Post React 18 update - validate this conversion, look like a hidden bug\n  renderGroup={(params) => params as unknown as React.ReactNode}\n/>',moduleTS:"./Virtualize.js",rawTS:"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Popper from '@mui/material/Popper';\nimport { useTheme, styled } from '@mui/material/styles';\nimport { VariableSizeList, ListChildComponentProps } from 'react-window';\nimport Typography from '@mui/material/Typography';\n\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props: ListChildComponentProps) {\n  const { data, index, style } = props;\n  const dataSet = data[index];\n  const inlineStyle = {\n    ...style,\n    top: (style.top as number) + LISTBOX_PADDING,\n  };\n\n  if (dataSet.hasOwnProperty('group')) {\n    return (\n      <ListSubheader key={dataSet.key} component=\"div\" style={inlineStyle}>\n        {dataSet.group}\n      </ListSubheader>\n    );\n  }\n\n  return (\n    <Typography component=\"li\" {...dataSet[0]} noWrap style={inlineStyle}>\n      {dataSet[1]}\n    </Typography>\n  );\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data: any) {\n  const ref = React.useRef<VariableSizeList>(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n}\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLElement>\n>(function ListboxComponent(props, ref) {\n  const { children, ...other } = props;\n  const itemData: React.ReactChild[] = [];\n  (children as React.ReactChild[]).forEach(\n    (item: React.ReactChild & { children?: React.ReactChild[] }) => {\n      itemData.push(item);\n      itemData.push(...(item.children || []));\n    },\n  );\n\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), {\n    noSsr: true,\n  });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = (child: React.ReactChild) => {\n    if (child.hasOwnProperty('group')) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  const gridRef = useResetCache(itemCount);\n\n  return (\n    <div ref={ref}>\n      <OuterElementContext.Provider value={other}>\n        <VariableSizeList\n          itemData={itemData}\n          height={getHeight() + 2 * LISTBOX_PADDING}\n          width=\"100%\"\n          ref={gridRef}\n          outerElementType={OuterElementType}\n          innerElementType=\"ul\"\n          itemSize={(index) => getChildSize(itemData[index])}\n          overscanCount={5}\n          itemCount={itemCount}\n        >\n          {renderRow}\n        </VariableSizeList>\n      </OuterElementContext.Provider>\n    </div>\n  );\n});\n\nfunction random(length: number) {\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n\n  for (let i = 0; i < length; i += 1) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n\n  return result;\n}\n\nconst StyledPopper = styled(Popper)({\n  [`& .${autocompleteClasses.listbox}`]: {\n    boxSizing: 'border-box',\n    '& ul': {\n      padding: 0,\n      margin: 0,\n    },\n  },\n});\n\nconst OPTIONS = Array.from(new Array(10000))\n  .map(() => random(10 + Math.ceil(Math.random() * 20)))\n  .sort((a: string, b: string) => a.toUpperCase().localeCompare(b.toUpperCase()));\n\nexport default function Virtualize() {\n  return (\n    <Autocomplete\n      id=\"virtualize-demo\"\n      sx={{ width: 300 }}\n      disableListWrap\n      PopperComponent={StyledPopper}\n      ListboxComponent={ListboxComponent}\n      options={OPTIONS}\n      groupBy={(option) => option[0].toUpperCase()}\n      renderInput={(params) => <TextField {...params} label=\"10,000 options\" />}\n      renderOption={(props, option) => [props, option] as React.ReactNode}\n      // TODO: Post React 18 update - validate this conversion, look like a hidden bug\n      renderGroup={(params) => params as unknown as React.ReactNode}\n    />\n  );\n}\n"}},mt={"./Playground.js":function(){var e={options:d,getOptionLabel:function(e){return e.title}},t={options:d.map((function(e){return e.title}))},n=a.useState(null),o=(0,l.Z)(n,2),h=o[0],u=o[1];return(0,c.jsxs)(p.Z,{spacing:1,sx:{width:300},children:[(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"disable-close-on-select",disableCloseOnSelect:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"disableCloseOnSelect",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"clear-on-escape",clearOnEscape:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"clearOnEscape",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"disable-clearable",disableClearable:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"disableClearable",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"include-input-in-list",includeInputInList:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"includeInputInList",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},t),{},{id:"flat-demo",renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"flat",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"controlled-demo",value:h,onChange:function(e,t){u(t)},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"controlled",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"auto-complete",autoComplete:!0,includeInputInList:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"autoComplete",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"disable-list-wrap",disableListWrap:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"disableListWrap",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"open-on-focus",openOnFocus:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"openOnFocus",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"auto-highlight",autoHighlight:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"autoHighlight",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"auto-select",autoSelect:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"autoSelect",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"disabled",disabled:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"disabled",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"disable-portal",disablePortal:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"disablePortal",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"blur-on-select",blurOnSelect:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"blurOnSelect",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"clear-on-blur",clearOnBlur:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"clearOnBlur",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},e),{},{id:"select-on-focus",selectOnFocus:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"selectOnFocus",variant:"standard"}))}})),(0,c.jsx)(s.Z,(0,i.Z)((0,i.Z)({},t),{},{id:"readOnly",readOnly:!0,defaultValue:t.options[13],renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"readOnly",variant:"standard"}))}}))]})},"./CountrySelect.js":function(){return(0,c.jsx)(s.Z,{id:"country-select-demo",sx:{width:300},options:u,autoHighlight:!0,getOptionLabel:function(e){return e.label},renderOption:function(e,t){return(0,c.jsxs)(h.Z,(0,i.Z)((0,i.Z)({component:"li",sx:{"& > img":{mr:2,flexShrink:0}}},e),{},{children:[(0,c.jsx)("img",{loading:"lazy",width:"20",src:"https://flagcdn.com/w20/".concat(t.code.toLowerCase(),".png"),srcSet:"https://flagcdn.com/w40/".concat(t.code.toLowerCase(),".png 2x"),alt:""}),t.label," (",t.code,") +",t.phone]}))},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Choose a country",inputProps:(0,i.Z)((0,i.Z)({},e.inputProps),{},{autoComplete:"new-password"})}))}})},"./ComboBox.js":function(){return(0,c.jsx)(s.Z,{disablePortal:!0,id:"combo-box-demo",options:y,sx:{width:300},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Movie"}))}})},"./FreeSolo.js":function(){return(0,c.jsxs)(p.Z,{spacing:2,sx:{width:300},children:[(0,c.jsx)(s.Z,{id:"free-solo-demo",freeSolo:!0,options:g.map((function(e){return e.title})),renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"freeSolo"}))}}),(0,c.jsx)(s.Z,{freeSolo:!0,id:"free-solo-2-demo",disableClearable:!0,options:g.map((function(e){return e.title})),renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Search input",InputProps:(0,i.Z)((0,i.Z)({},e.InputProps),{},{type:"search"})}))}})]})},"./ControllableStates.js":function(){var e=a.useState(f[0]),t=(0,l.Z)(e,2),n=t[0],o=t[1],p=a.useState(""),d=(0,l.Z)(p,2),h=d[0],u=d[1];return(0,c.jsxs)("div",{children:[(0,c.jsx)("div",{children:"value: ".concat(null!==n?"'".concat(n,"'"):"null")}),(0,c.jsx)("div",{children:"inputValue: '".concat(h,"'")}),m||(m=(0,c.jsx)("br",{})),(0,c.jsx)(s.Z,{value:n,onChange:function(e,t){o(t)},inputValue:h,onInputChange:function(e,t){u(t)},id:"controllable-states-demo",options:f,sx:{width:300},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Controllable"}))}})]})},"./FreeSoloCreateOptionDialog.js":function(){var e=a.useState(null),t=(0,l.Z)(e,2),n=t[0],o=t[1],p=a.useState(!1),d=(0,l.Z)(p,2),h=d[0],u=d[1],y=function(){v({title:"",year:""}),u(!1)},m=a.useState({title:"",year:""}),g=(0,l.Z)(m,2),f=g[0],v=g[1];return(0,c.jsxs)(a.Fragment,{children:[(0,c.jsx)(s.Z,{value:n,onChange:function(e,t){"string"===typeof t?setTimeout((function(){u(!0),v({title:t,year:""})})):t&&t.inputValue?(u(!0),v({title:t.inputValue,year:""})):o(t)},filterOptions:function(e,t){var n=R(e,t);return""!==t.inputValue&&n.push({inputValue:t.inputValue,title:'Add "'.concat(t.inputValue,'"')}),n},id:"free-solo-dialog-demo",options:F,getOptionLabel:function(e){return"string"===typeof e?e:e.inputValue?e.inputValue:e.title},selectOnFocus:!0,clearOnBlur:!0,handleHomeEndKeys:!0,renderOption:function(e,t){return(0,c.jsx)("li",(0,i.Z)((0,i.Z)({},e),{},{children:t.title}))},sx:{width:300},freeSolo:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Free solo dialog"}))}}),(0,c.jsx)(x.Z,{open:h,onClose:y,children:(0,c.jsxs)("form",{onSubmit:function(e){e.preventDefault(),o({title:f.title,year:S()(f.year,10)}),y()},children:[b||(b=(0,c.jsx)(w.Z,{children:"Add a new film"})),(0,c.jsxs)(A.Z,{children:[T||(T=(0,c.jsx)(C.Z,{children:"Did you miss any film in our list? Please, add it!"})),(0,c.jsx)(r.Z,{autoFocus:!0,margin:"dense",id:"name",value:f.title,onChange:function(e){return v((0,i.Z)((0,i.Z)({},f),{},{title:e.target.value}))},label:"title",type:"text",variant:"standard"}),(0,c.jsx)(r.Z,{margin:"dense",id:"name",value:f.year,onChange:function(e){return v((0,i.Z)((0,i.Z)({},f),{},{year:e.target.value}))},label:"year",type:"number",variant:"standard"})]}),(0,c.jsxs)(L.Z,{children:[(0,c.jsx)(I.Z,{onClick:y,children:"Cancel"}),k||(k=(0,c.jsx)(I.Z,{type:"submit",children:"Add"}))]})]})})]})},"./Grouped.js":function(){var e=O.map((function(e){var t=e.title[0].toUpperCase();return(0,i.Z)({firstLetter:/[0-9]/.test(t)?"0-9":t},e)}));return(0,c.jsx)(s.Z,{id:"grouped-demo",options:e.sort((function(e,t){return-t.firstLetter.localeCompare(e.firstLetter)})),groupBy:function(e){return e.firstLetter},getOptionLabel:function(e){return e.title},sx:{width:300},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"With categories"}))}})},"./DisabledOptions.js":function(){return(0,c.jsx)(s.Z,{id:"disabled-options-demo",options:B,getOptionDisabled:function(e){return e===B[0]||e===B[2]},sx:{width:300},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Disabled options"}))}})},"./FreeSoloCreateOption.js":function(){var e=a.useState(null),t=(0,l.Z)(e,2),n=t[0],o=t[1];return(0,c.jsx)(s.Z,{value:n,onChange:function(e,t){"string"===typeof t?o({title:t}):t&&t.inputValue?o({title:t.inputValue}):o(t)},filterOptions:function(e,t){var n=G(e,t),a=t.inputValue,o=e.some((function(e){return a===e.title}));return""===a||o||n.push({inputValue:a,title:'Add "'.concat(a,'"')}),n},selectOnFocus:!0,clearOnBlur:!0,handleHomeEndKeys:!0,id:"free-solo-with-text-demo",options:W,getOptionLabel:function(e){return"string"===typeof e?e:e.inputValue?e.inputValue:e.title},renderOption:function(e,t){return(0,c.jsx)("li",(0,i.Z)((0,i.Z)({},e),{},{children:t.title}))},sx:{width:300},freeSolo:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Free solo with text demo"}))}})},"./UseAutocomplete.js":function(){var e=(0,P.Z)({id:"use-autocomplete-demo",options:N,getOptionLabel:function(e){return e.title}}),t=e.getRootProps,n=e.getInputLabelProps,a=e.getInputProps,o=e.getListboxProps,l=e.getOptionProps,r=e.groupedOptions;return(0,c.jsxs)("div",{children:[(0,c.jsxs)("div",(0,i.Z)((0,i.Z)({},t()),{},{children:[(0,c.jsx)(V,(0,i.Z)((0,i.Z)({},n()),{},{children:"useAutocomplete"})),(0,c.jsx)(Z,(0,i.Z)({},a()))]})),r.length>0?(0,c.jsx)(j,(0,i.Z)((0,i.Z)({},o()),{},{children:r.map((function(e,t){return(0,c.jsx)("li",(0,i.Z)((0,i.Z)({},l({option:e,index:t})),{},{children:e.title}))}))})):null]})},"./CustomizedHook.js":function(){var e=(0,P.Z)({id:"customized-hook-demo",defaultValue:[oe[1]],multiple:!0,options:oe,getOptionLabel:function(e){return e.title}}),t=e.getRootProps,n=e.getInputLabelProps,a=e.getInputProps,o=e.getTagProps,l=e.getListboxProps,r=e.getOptionProps,s=e.groupedOptions,p=e.value,d=e.focused,h=e.setAnchorEl;return(0,c.jsxs)(Y,{children:[(0,c.jsxs)("div",(0,i.Z)((0,i.Z)({},t()),{},{children:[(0,c.jsx)(Q,(0,i.Z)((0,i.Z)({},n()),{},{children:"Customized hook"})),(0,c.jsxs)(ee,{ref:h,className:d?"focused":"",children:[p.map((function(e,t){return(0,c.jsx)(te,(0,i.Z)({label:e.title},o({index:t})))})),(0,c.jsx)("input",(0,i.Z)({},a()))]})]})),s.length>0?(0,c.jsx)(ne,(0,i.Z)((0,i.Z)({},l()),{},{children:s.map((function(e,t){return(0,c.jsxs)("li",(0,i.Z)((0,i.Z)({},r({option:e,index:t})),{},{children:[(0,c.jsx)("span",{children:e.title}),z||(z=(0,c.jsx)(q.default,{fontSize:"small"}))]}))}))})):null]})},"./Asynchronous.js":function(){var e=a.useState(!1),t=(0,l.Z)(e,2),n=t[0],o=t[1],p=a.useState([]),d=(0,l.Z)(p,2),h=d[0],u=d[1],y=n&&0===h.length;return a.useEffect((function(){var e=!0;if(y)return(0,le.Z)((0,ie.Z)().mark((function t(){return(0,ie.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ce(1e3);case 2:e&&u([].concat(de));case 3:case"end":return t.stop()}}),t)})))(),function(){e=!1}}),[y]),a.useEffect((function(){n||u([])}),[n]),(0,c.jsx)(s.Z,{id:"asynchronous-demo",sx:{width:300},open:n,onOpen:function(){o(!0)},onClose:function(){o(!1)},isOptionEqualToValue:function(e,t){return e.title===t.title},getOptionLabel:function(e){return e.title},options:h,loading:y,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Asynchronous",InputProps:(0,i.Z)((0,i.Z)({},e.InputProps),{},{endAdornment:(0,c.jsxs)(a.Fragment,{children:[y?ae||(ae=(0,c.jsx)(pe.Z,{color:"inherit",size:20})):null,e.InputProps.endAdornment]})})}))}})},"./Tags.js":function(){return(0,c.jsxs)(p.Z,{spacing:3,sx:{width:500},children:[(0,c.jsx)(s.Z,{multiple:!0,id:"tags-standard",options:ue,getOptionLabel:function(e){return e.title},defaultValue:[ue[13]],renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{variant:"standard",label:"Multiple values",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{multiple:!0,id:"tags-outlined",options:ue,getOptionLabel:function(e){return e.title},defaultValue:[ue[13]],filterSelectedOptions:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"filterSelectedOptions",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{multiple:!0,id:"tags-filled",options:ue.map((function(e){return e.title})),defaultValue:[ue[13].title],freeSolo:!0,renderTags:function(e,t){return e.map((function(e,n){return(0,c.jsx)(he.Z,(0,i.Z)({variant:"outlined",label:e},t({index:n})))}))},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{variant:"filled",label:"freeSolo",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{multiple:!0,id:"tags-readOnly",options:ue.map((function(e){return e.title})),defaultValue:[ue[12].title,ue[13].title],readOnly:!0,renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"readOnly",placeholder:"Favorites"}))}})]})},"./GoogleMaps.js":function(){var e=a.useState(null),t=(0,l.Z)(e,2),n=t[0],o=t[1],p=a.useState(""),d=(0,l.Z)(p,2),u=d[0],y=d[1],m=a.useState([]),g=(0,l.Z)(m,2),f=g[0],b=g[1],T=a.useRef(!1);T.current||(document.querySelector("#google-maps")||function(e,t,n){if(t){var a=document.createElement("script");a.setAttribute("async",""),a.setAttribute("id",n),a.src=e,t.appendChild(a)}}("https://maps.googleapis.com/maps/api/js?key=".concat("AIzaSyC3aviU6KHXAjoSnxcw6qbOhjnFctbxPkE","&libraries=places"),document.querySelector("head"),"google-maps"),T.current=!0);var k=a.useMemo((function(){return ve()((function(e,t){Se.current.getPlacePredictions(e,t)}),200)}),[]);return a.useEffect((function(){var e=!0;if(!Se.current&&window.google&&(Se.current=new window.google.maps.places.AutocompleteService),Se.current){if(""!==u)return k({input:u},(function(t){if(e){var a=[];n&&(a=[n]),t&&(a=[].concat((0,ye.Z)(a),(0,ye.Z)(t))),b(a)}})),function(){e=!1};b(n?[n]:[])}}),[n,u,k]),(0,c.jsx)(s.Z,{id:"google-map-demo",sx:{width:300},getOptionLabel:function(e){return"string"===typeof e?e:e.description},filterOptions:function(e){return e},options:f,autoComplete:!0,includeInputInList:!0,filterSelectedOptions:!0,value:n,onChange:function(e,t){b(t?[t].concat((0,ye.Z)(f)):f),o(t)},onInputChange:function(e,t){y(t)},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Add a location",fullWidth:!0}))},renderOption:function(e,t){var n=t.structured_formatting.main_text_matched_substrings,a=Te()(t.structured_formatting.main_text,n.map((function(e){return[e.offset,e.offset+e.length]})));return(0,c.jsx)("li",(0,i.Z)((0,i.Z)({},e),{},{children:(0,c.jsxs)(ge.ZP,{container:!0,alignItems:"center",children:[(0,c.jsx)(ge.ZP,{item:!0,children:(0,c.jsx)(h.Z,{component:me.default,sx:{color:"text.secondary",mr:2}})}),(0,c.jsxs)(ge.ZP,{item:!0,xs:!0,children:[a.map((function(e,t){return(0,c.jsx)("span",{style:{fontWeight:e.highlight?700:400},children:e.text},t)})),(0,c.jsx)(fe.Z,{variant:"body2",color:"text.secondary",children:t.structured_formatting.secondary_text})]})]})}))}})},"./FixedTags.js":function(){var e=[xe[6]],t=a.useState([].concat(e,[xe[13]])),n=(0,l.Z)(t,2),o=n[0],p=n[1];return(0,c.jsx)(s.Z,{multiple:!0,id:"fixed-tags-demo",value:o,onChange:function(t,n){p([].concat(e,(0,ye.Z)(n.filter((function(t){return-1===e.indexOf(t)})))))},options:xe,getOptionLabel:function(e){return e.title},renderTags:function(t,n){return t.map((function(t,a){return(0,c.jsx)(he.Z,(0,i.Z)((0,i.Z)({label:t.title},n({index:a})),{},{disabled:-1!==e.indexOf(t)}))}))},style:{width:500},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Fixed tag",placeholder:"Favorites"}))}})},"./CheckboxesTags.js":function(){return(0,c.jsx)(s.Z,{multiple:!0,id:"checkboxes-tags-demo",options:Pe,disableCloseOnSelect:!0,getOptionLabel:function(e){return e.title},renderOption:function(e,t,n){var a=n.selected;return(0,c.jsxs)("li",(0,i.Z)((0,i.Z)({},e),{},{children:[(0,c.jsx)(we.Z,{icon:Le,checkedIcon:Ie,style:{marginRight:8},checked:a}),t.title]}))},style:{width:500},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Checkboxes",placeholder:"Favorites"}))}})},"./LimitTags.js":function(){return(0,c.jsx)(s.Z,{multiple:!0,limitTags:2,id:"multiple-limit-tags",options:Re,getOptionLabel:function(e){return e.title},defaultValue:[Re[13],Re[12],Re[11]],renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"limitTags",placeholder:"Favorites"}))},sx:{width:"500px"}})},"./Sizes.js":function(){return(0,c.jsxs)(p.Z,{spacing:2,sx:{width:500},children:[(0,c.jsx)(s.Z,{id:"size-small-standard",size:"small",options:De,getOptionLabel:function(e){return e.title},defaultValue:De[13],renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{variant:"standard",label:"Size small",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{multiple:!0,id:"size-small-standard-multi",size:"small",options:De,getOptionLabel:function(e){return e.title},defaultValue:[De[13]],renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{variant:"standard",label:"Size small",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{id:"size-small-outlined",size:"small",options:De,getOptionLabel:function(e){return e.title},defaultValue:De[13],renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Size small",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{multiple:!0,id:"size-small-outlined-multi",size:"small",options:De,getOptionLabel:function(e){return e.title},defaultValue:[De[13]],renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Size small",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{id:"size-small-filled",size:"small",options:De,getOptionLabel:function(e){return e.title},defaultValue:De[13],renderTags:function(e,t){return e.map((function(e,n){return(0,c.jsx)(he.Z,(0,i.Z)({variant:"outlined",label:e.title,size:"small"},t({index:n})))}))},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{variant:"filled",label:"Size small",placeholder:"Favorites"}))}}),(0,c.jsx)(s.Z,{multiple:!0,id:"size-small-filled-multi",size:"small",options:De,getOptionLabel:function(e){return e.title},defaultValue:[De[13]],renderTags:function(e,t){return e.map((function(e,n){return(0,c.jsx)(he.Z,(0,i.Z)({variant:"outlined",label:e.title,size:"small"},t({index:n})))}))},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{variant:"filled",label:"Size small",placeholder:"Favorites"}))}})]})},"./GitHubLabel.js":function(){var e=a.useState(null),t=(0,l.Z)(e,2),n=t[0],o=t[1],r=a.useState([$e[1],$e[11]]),p=(0,l.Z)(r,2),d=p[0],u=p[1],y=a.useState([]),m=(0,l.Z)(y,2),g=m[0],f=m[1],b=(0,Ge.Z)(),T=function(){u(g),n&&n.focus(),o(null)},k=Boolean(n),v=k?"github-label":void 0;return(0,c.jsxs)(a.Fragment,{children:[(0,c.jsxs)(h.Z,{sx:{width:221,fontSize:13},children:[(0,c.jsxs)(Je,{disableRipple:!0,"aria-describedby":v,onClick:function(e){f(d),o(e.currentTarget)},children:[Fe||(Fe=(0,c.jsx)("span",{children:"Labels"})),Oe||(Oe=(0,c.jsx)(Ve.default,{}))]}),d.map((function(e){return(0,c.jsx)(h.Z,{sx:{mt:"3px",height:20,padding:".15em 4px",fontWeight:600,lineHeight:"15px",borderRadius:"2px"},style:{backgroundColor:e.color,color:b.palette.getContrastText(e.color)},children:e.name},e.name)}))]}),(0,c.jsx)(Ue,{id:v,open:k,anchorEl:n,placement:"bottom-start",children:(0,c.jsx)(Ee.Z,{onClickAway:T,children:(0,c.jsxs)("div",{children:[(0,c.jsx)(h.Z,{sx:{borderBottom:"1px solid ".concat("light"===b.palette.mode?"#eaecef":"#30363d"),padding:"8px 10px",fontWeight:600},children:"Apply labels to this pull request"}),(0,c.jsx)(s.Z,{open:!0,multiple:!0,onClose:function(e,t){"escape"===t&&T()},value:g,onChange:function(e,t,n){"keydown"===e.type&&"Backspace"===e.key&&"removeOption"===n||f(t)},disableCloseOnSelect:!0,PopperComponent:He,renderTags:function(){return null},noOptionsText:"No labels",renderOption:function(e,t,n){var a=n.selected;return(0,c.jsxs)("li",(0,i.Z)((0,i.Z)({},e),{},{children:[(0,c.jsx)(h.Z,{component:Ze.default,sx:{width:17,height:17,mr:"5px",ml:"-2px"},style:{visibility:a?"visible":"hidden"}}),(0,c.jsx)(h.Z,{component:"span",sx:{width:14,height:14,flexShrink:0,borderRadius:"3px",mr:1,mt:"2px"},style:{backgroundColor:t.color}}),(0,c.jsxs)(h.Z,{sx:{flexGrow:1,"& span":{color:"light"===b.palette.mode?"#586069":"#8b949e"}},children:[t.name,Me||(Me=(0,c.jsx)("br",{})),(0,c.jsx)("span",{children:t.description})]}),(0,c.jsx)(h.Z,{component:J.default,sx:{opacity:.6,width:18,height:18},style:{visibility:a?"visible":"hidden"}})]}))},options:[].concat($e).sort((function(e,t){var n=d.indexOf(e);n=-1===n?d.length+$e.indexOf(e):n;var a=d.indexOf(t);return n-(a=-1===a?d.length+$e.indexOf(t):a)})),getOptionLabel:function(e){return e.name},renderInput:function(e){return(0,c.jsx)(qe,{ref:e.InputProps.ref,inputProps:e.inputProps,autoFocus:!0,placeholder:"Filter labels"})}})]})})})]})},"./CustomInputAutocomplete.js":function(){return(0,c.jsxs)("label",{children:["Value:"," ",(0,c.jsx)(s.Z,{sx:{display:"inline-block","& input":{width:200,bgcolor:"background.paper",color:function(e){return e.palette.getContrastText(e.palette.background.paper)}}},id:"custom-input-demo",options:Xe,renderInput:function(e){return(0,c.jsx)("div",{ref:e.InputProps.ref,children:(0,c.jsx)("input",(0,i.Z)({type:"text"},e.inputProps))})}})]})},"./Highlights.js":function(){return(0,c.jsx)(s.Z,{id:"highlights-demo",sx:{width:300},options:Qe,getOptionLabel:function(e){return e.title},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Highlights",margin:"normal"}))},renderOption:function(e,t,n){var a=n.inputValue,o=Ye()(t.title,a),l=Te()(t.title,o);return(0,c.jsx)("li",(0,i.Z)((0,i.Z)({},e),{},{children:(0,c.jsx)("div",{children:l.map((function(e,t){return(0,c.jsx)("span",{style:{fontWeight:e.highlight?700:400},children:e.text},t)}))})}))}})},"./Filter.js":function(){return(0,c.jsx)(s.Z,{id:"filter-demo",options:tt,getOptionLabel:function(e){return e.title},filterOptions:et,sx:{width:300},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"Custom filter"}))}})},"./Virtualize.js":function(){return(0,c.jsx)(s.Z,{id:"virtualize-demo",sx:{width:300},disableListWrap:!0,PopperComponent:ct,ListboxComponent:pt,options:dt,groupBy:function(e){return e[0].toUpperCase()},renderInput:function(e){return(0,c.jsx)(r.Z,(0,i.Z)((0,i.Z)({},e),{},{label:"10,000 options"}))},renderOption:function(e,t){return[e,t]},renderGroup:function(e){return e}})}};function gt(){return ht||(ht=(0,c.jsx)(o.Z,{demos:yt,docs:ut,demoComponents:mt}))}},486193:function(e,t,n){"use strict";n.d(t,{Z:function(){return L}});var a=n(481936),o=n(957379),i=n(295649),l=n(827378),r=n(138944),s=n(501330),p=n(240120),c=n(481371),d=n(403503),h=n(824246),u=(0,d.Z)((0,h.jsx)("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),y=(0,d.Z)((0,h.jsx)("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),m=(0,d.Z)((0,h.jsx)("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox"),g=n(326162),f=n(906205),b=n(290763),T=n(618932);function k(e){return(0,T.Z)("MuiCheckbox",e)}var v=(0,n(761424).Z)("MuiCheckbox",["root","checked","disabled","indeterminate","colorPrimary","colorSecondary"]),S=["checkedIcon","color","icon","indeterminate","indeterminateIcon","inputProps","size","className"],x=(0,b.ZP)(c.Z,{shouldForwardProp:function(e){return(0,b.FO)(e)||"classes"===e},name:"MuiCheckbox",slot:"Root",overridesResolver:function(e,t){var n=e.ownerState;return[t.root,n.indeterminate&&t.indeterminate,"default"!==n.color&&t["color".concat((0,g.Z)(n.color))]]}})((function(e){var t,n=e.theme,a=e.ownerState;return(0,i.Z)((0,i.Z)({color:(n.vars||n).palette.text.secondary},!a.disableRipple&&{"&:hover":{backgroundColor:n.vars?"rgba(".concat("default"===a.color?n.vars.palette.action.activeChannel:n.vars.palette.primary.mainChannel," / ").concat(n.vars.palette.action.hoverOpacity,")"):(0,p.Fq)("default"===a.color?n.palette.action.active:n.palette[a.color].main,n.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}}),"default"!==a.color&&(t={},(0,o.Z)(t,"&.".concat(v.checked,", &.").concat(v.indeterminate),{color:(n.vars||n).palette[a.color].main}),(0,o.Z)(t,"&.".concat(v.disabled),{color:(n.vars||n).palette.action.disabled}),t))})),w=(0,h.jsx)(y,{}),A=(0,h.jsx)(u,{}),C=(0,h.jsx)(m,{}),L=l.forwardRef((function(e,t){var n,o,p=(0,f.Z)({props:e,name:"MuiCheckbox"}),c=p.checkedIcon,d=void 0===c?w:c,u=p.color,y=void 0===u?"primary":u,m=p.icon,b=void 0===m?A:m,T=p.indeterminate,v=void 0!==T&&T,L=p.indeterminateIcon,I=void 0===L?C:L,P=p.inputProps,R=p.size,F=void 0===R?"medium":R,O=p.className,M=(0,a.Z)(p,S),D=v?I:b,B=v?I:d,G=(0,i.Z)((0,i.Z)({},p),{},{color:y,indeterminate:v,size:F}),W=function(e){var t=e.classes,n=e.indeterminate,a=e.color,o={root:["root",n&&"indeterminate","color".concat((0,g.Z)(a))]},l=(0,s.Z)(o,k,t);return(0,i.Z)((0,i.Z)({},t),l)}(G);return(0,h.jsx)(x,(0,i.Z)((0,i.Z)({type:"checkbox",inputProps:(0,i.Z)({"data-indeterminate":v},P),icon:l.cloneElement(D,{fontSize:null!==(n=D.props.fontSize)&&void 0!==n?n:F}),checkedIcon:l.cloneElement(B,{fontSize:null!==(o=B.props.fontSize)&&void 0!==o?o:F}),ownerState:G,ref:t,className:(0,r.default)(W.root,O)},M),{},{classes:W}))}))},478768:function(e,t,n){"use strict";n.d(t,{Z:function(){return I}});var a=n(481936),o=n(957379),i=n(295649),l=n(827378),r=n(138944),s=n(501330),p=n(549303),c=n(326162),d=n(159420),h=n(844244),u=n(709497),y=n(906205),m=n(290763),g=n(618932);function f(e){return(0,g.Z)("MuiDialog",e)}var b=(0,n(761424).Z)("MuiDialog",["root","scrollPaper","scrollBody","container","paper","paperScrollPaper","paperScrollBody","paperWidthFalse","paperWidthXs","paperWidthSm","paperWidthMd","paperWidthLg","paperWidthXl","paperFullWidth","paperFullScreen"]),T=n(30037),k=n(637919),v=n(146010),S=n(824246),x=["aria-describedby","aria-labelledby","BackdropComponent","BackdropProps","children","className","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClose","open","PaperComponent","PaperProps","scroll","TransitionComponent","transitionDuration","TransitionProps"],w=(0,m.ZP)(k.Z,{name:"MuiDialog",slot:"Backdrop",overrides:function(e,t){return t.backdrop}})({zIndex:-1}),A=(0,m.ZP)(d.Z,{name:"MuiDialog",slot:"Root",overridesResolver:function(e,t){return t.root}})({"@media print":{position:"absolute !important"}}),C=(0,m.ZP)("div",{name:"MuiDialog",slot:"Container",overridesResolver:function(e,t){var n=e.ownerState;return[t.container,t["scroll".concat((0,c.Z)(n.scroll))]]}})((function(e){var t=e.ownerState;return(0,i.Z)((0,i.Z)({height:"100%","@media print":{height:"auto"},outline:0},"paper"===t.scroll&&{display:"flex",justifyContent:"center",alignItems:"center"}),"body"===t.scroll&&{overflowY:"auto",overflowX:"hidden",textAlign:"center","&:after":{content:'""',display:"inline-block",verticalAlign:"middle",height:"100%",width:"0"}})})),L=(0,m.ZP)(u.Z,{name:"MuiDialog",slot:"Paper",overridesResolver:function(e,t){var n=e.ownerState;return[t.paper,t["scrollPaper".concat((0,c.Z)(n.scroll))],t["paperWidth".concat((0,c.Z)(String(n.maxWidth)))],n.fullWidth&&t.paperFullWidth,n.fullScreen&&t.paperFullScreen]}})((function(e){var t=e.theme,n=e.ownerState;return(0,i.Z)((0,i.Z)((0,i.Z)((0,i.Z)((0,i.Z)((0,i.Z)((0,i.Z)({margin:32,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"}},"paper"===n.scroll&&{display:"flex",flexDirection:"column",maxHeight:"calc(100% - 64px)"}),"body"===n.scroll&&{display:"inline-block",verticalAlign:"middle",textAlign:"left"}),!n.maxWidth&&{maxWidth:"calc(100% - 64px)"}),"xs"===n.maxWidth&&(0,o.Z)({maxWidth:"px"===t.breakpoints.unit?Math.max(t.breakpoints.values.xs,444):"".concat(t.breakpoints.values.xs).concat(t.breakpoints.unit)},"&.".concat(b.paperScrollBody),(0,o.Z)({},t.breakpoints.down(Math.max(t.breakpoints.values.xs,444)+64),{maxWidth:"calc(100% - 64px)"}))),n.maxWidth&&"xs"!==n.maxWidth&&(0,o.Z)({maxWidth:"".concat(t.breakpoints.values[n.maxWidth]).concat(t.breakpoints.unit)},"&.".concat(b.paperScrollBody),(0,o.Z)({},t.breakpoints.down(t.breakpoints.values[n.maxWidth]+64),{maxWidth:"calc(100% - 64px)"}))),n.fullWidth&&{width:"calc(100% - 64px)"}),n.fullScreen&&(0,o.Z)({margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0},"&.".concat(b.paperScrollBody),{margin:0,maxWidth:"100%"}))})),I=l.forwardRef((function(e,t){var n=(0,y.Z)({props:e,name:"MuiDialog"}),o=(0,v.Z)(),d={enter:o.transitions.duration.enteringScreen,exit:o.transitions.duration.leavingScreen},m=n["aria-describedby"],g=n["aria-labelledby"],b=n.BackdropComponent,k=n.BackdropProps,I=n.children,P=n.className,R=n.disableEscapeKeyDown,F=void 0!==R&&R,O=n.fullScreen,M=void 0!==O&&O,D=n.fullWidth,B=void 0!==D&&D,G=n.maxWidth,W=void 0===G?"sm":G,E=n.onBackdropClick,V=n.onClose,Z=n.open,j=n.PaperComponent,K=void 0===j?u.Z:j,z=n.PaperProps,N=void 0===z?{}:z,H=n.scroll,U=void 0===H?"paper":H,q=n.TransitionComponent,J=void 0===q?h.Z:q,$=n.transitionDuration,X=void 0===$?d:$,_=n.TransitionProps,Y=(0,a.Z)(n,x),Q=(0,i.Z)((0,i.Z)({},n),{},{disableEscapeKeyDown:F,fullScreen:M,fullWidth:B,maxWidth:W,scroll:U}),ee=function(e){var t=e.classes,n=e.scroll,a=e.maxWidth,o=e.fullWidth,i=e.fullScreen,l={root:["root"],container:["container","scroll".concat((0,c.Z)(n))],paper:["paper","paperScroll".concat((0,c.Z)(n)),"paperWidth".concat((0,c.Z)(String(a))),o&&"paperFullWidth",i&&"paperFullScreen"]};return(0,s.Z)(l,f,t)}(Q),te=l.useRef(),ne=(0,p.Z)(g),ae=l.useMemo((function(){return{titleId:ne}}),[ne]);return(0,S.jsx)(A,(0,i.Z)((0,i.Z)({className:(0,r.default)(ee.root,P),closeAfterTransition:!0,components:{Backdrop:w},componentsProps:{backdrop:(0,i.Z)({transitionDuration:X,as:b},k)},disableEscapeKeyDown:F,onClose:V,open:Z,ref:t,onClick:function(e){te.current&&(te.current=null,E&&E(e),V&&V(e,"backdropClick"))},ownerState:Q},Y),{},{children:(0,S.jsx)(J,(0,i.Z)((0,i.Z)({appear:!0,in:Z,timeout:X,role:"presentation"},_),{},{children:(0,S.jsx)(C,{className:(0,r.default)(ee.container),onMouseDown:function(e){te.current=e.target===e.currentTarget},ownerState:Q,children:(0,S.jsx)(L,(0,i.Z)((0,i.Z)({as:K,elevation:24,role:"dialog","aria-describedby":m,"aria-labelledby":ne},N),{},{className:(0,r.default)(ee.paper,N.className),ownerState:Q,children:(0,S.jsx)(T.Z.Provider,{value:ae,children:I})}))})}))}))}))},30037:function(e,t,n){"use strict";var a=(0,n(827378).createContext)({});t.Z=a},584567:function(e,t,n){"use strict";n.d(t,{Z:function(){return f}});var a=n(481936),o=n(957379),i=n(295649),l=n(827378),r=n(138944),s=n(501330),p=n(290763),c=n(906205),d=n(618932);function h(e){return(0,d.Z)("MuiDialogContent",e)}(0,n(761424).Z)("MuiDialogContent",["root","dividers"]);var u=n(103362),y=n(824246),m=["className","dividers"],g=(0,p.ZP)("div",{name:"MuiDialogContent",slot:"Root",overridesResolver:function(e,t){var n=e.ownerState;return[t.root,n.dividers&&t.dividers]}})((function(e){var t=e.theme,n=e.ownerState;return(0,i.Z)({flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"20px 24px"},n.dividers?{padding:"16px 24px",borderTop:"1px solid ".concat((t.vars||t).palette.divider),borderBottom:"1px solid ".concat((t.vars||t).palette.divider)}:(0,o.Z)({},".".concat(u.Z.root," + &"),{paddingTop:0}))})),f=l.forwardRef((function(e,t){var n=(0,c.Z)({props:e,name:"MuiDialogContent"}),o=n.className,l=n.dividers,p=void 0!==l&&l,d=(0,a.Z)(n,m),u=(0,i.Z)((0,i.Z)({},n),{},{dividers:p}),f=function(e){var t=e.classes,n={root:["root",e.dividers&&"dividers"]};return(0,s.Z)(n,h,t)}(u);return(0,y.jsx)(g,(0,i.Z)({className:(0,r.default)(f.root,o),ownerState:u,ref:t},d))}))},701417:function(e,t,n){"use strict";n.d(t,{Z:function(){return g}});var a=n(481936),o=n(295649),i=n(827378),l=n(138944),r=n(501330),s=n(290763),p=n(906205),c=n(376811),d=n(618932);function h(e){return(0,d.Z)("MuiDialogContentText",e)}(0,n(761424).Z)("MuiDialogContentText",["root"]);var u=n(824246),y=["children","className"],m=(0,s.ZP)(c.Z,{shouldForwardProp:function(e){return(0,s.FO)(e)||"classes"===e},name:"MuiDialogContentText",slot:"Root",overridesResolver:function(e,t){return t.root}})({}),g=i.forwardRef((function(e,t){var n=(0,p.Z)({props:e,name:"MuiDialogContentText"}),i=(n.children,n.className),s=(0,a.Z)(n,y),c=function(e){var t=e.classes,n=(0,r.Z)({root:["root"]},h,t);return(0,o.Z)((0,o.Z)({},t),n)}(s);return(0,u.jsx)(m,(0,o.Z)((0,o.Z)({component:"p",variant:"body1",color:"text.secondary",ref:t,ownerState:s,className:(0,l.default)(c.root,i)},n),{},{classes:c}))}))},470126:function(e,t,n){"use strict";var a=n(295649),o=n(481936),i=n(827378),l=n(138944),r=n(501330),s=n(376811),p=n(290763),c=n(906205),d=n(103362),h=n(30037),u=n(824246),y=["className","id"],m=(0,p.ZP)(s.Z,{name:"MuiDialogTitle",slot:"Root",overridesResolver:function(e,t){return t.root}})({padding:"16px 24px",flex:"0 0 auto"}),g=i.forwardRef((function(e,t){var n=(0,c.Z)({props:e,name:"MuiDialogTitle"}),s=n.className,p=n.id,g=(0,o.Z)(n,y),f=n,b=function(e){var t=e.classes;return(0,r.Z)({root:["root"]},d.a,t)}(f),T=i.useContext(h.Z).titleId,k=void 0===T?p:T;return(0,u.jsx)(m,(0,a.Z)({component:"h2",className:(0,l.default)(b.root,s),ownerState:f,ref:t,variant:"h6",id:k},g))}));t.Z=g},103362:function(e,t,n){"use strict";n.d(t,{a:function(){return o}});var a=n(618932);function o(e){return(0,a.Z)("MuiDialogTitle",e)}var i=(0,n(761424).Z)("MuiDialogTitle",["root"]);t.Z=i},481371:function(e,t,n){"use strict";n.d(t,{Z:function(){return k}});var a=n(25778),o=n(481936),i=n(295649),l=n(827378),r=n(138944),s=n(501330),p=n(326162),c=n(290763),d=n(781702),h=n(760163),u=n(161980),y=n(618932);function m(e){return(0,y.Z)("PrivateSwitchBase",e)}(0,n(761424).Z)("PrivateSwitchBase",["root","checked","disabled","input","edgeStart","edgeEnd"]);var g=n(824246),f=["autoFocus","checked","checkedIcon","className","defaultChecked","disabled","disableFocusRipple","edge","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"],b=(0,c.ZP)(u.Z)((function(e){var t=e.ownerState;return(0,i.Z)((0,i.Z)({padding:9,borderRadius:"50%"},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12}),"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})})),T=(0,c.ZP)("input")({cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1}),k=l.forwardRef((function(e,t){var n=e.autoFocus,l=e.checked,c=e.checkedIcon,u=e.className,y=e.defaultChecked,k=e.disabled,v=e.disableFocusRipple,S=void 0!==v&&v,x=e.edge,w=void 0!==x&&x,A=e.icon,C=e.id,L=e.inputProps,I=e.inputRef,P=e.name,R=e.onBlur,F=e.onChange,O=e.onFocus,M=e.readOnly,D=e.required,B=e.tabIndex,G=e.type,W=e.value,E=(0,o.Z)(e,f),V=(0,d.Z)({controlled:l,default:Boolean(y),name:"SwitchBase",state:"checked"}),Z=(0,a.Z)(V,2),j=Z[0],K=Z[1],z=(0,h.Z)(),N=k;z&&"undefined"===typeof N&&(N=z.disabled);var H="checkbox"===G||"radio"===G,U=(0,i.Z)((0,i.Z)({},e),{},{checked:j,disabled:N,disableFocusRipple:S,edge:w}),q=function(e){var t=e.classes,n=e.checked,a=e.disabled,o=e.edge,i={root:["root",n&&"checked",a&&"disabled",o&&"edge".concat((0,p.Z)(o))],input:["input"]};return(0,s.Z)(i,m,t)}(U);return(0,g.jsxs)(b,(0,i.Z)((0,i.Z)({component:"span",className:(0,r.default)(q.root,u),centerRipple:!0,focusRipple:!S,disabled:N,tabIndex:null,role:void 0,onFocus:function(e){O&&O(e),z&&z.onFocus&&z.onFocus(e)},onBlur:function(e){R&&R(e),z&&z.onBlur&&z.onBlur(e)},ownerState:U,ref:t},E),{},{children:[(0,g.jsx)(T,(0,i.Z)((0,i.Z)({autoFocus:n,checked:l,defaultChecked:y,className:q.input,disabled:N,id:H&&C,name:P,onChange:function(e){if(!e.nativeEvent.defaultPrevented){var t=e.target.checked;K(t),F&&F(e,t)}},readOnly:M,ref:I,required:D,ownerState:U,tabIndex:B,type:G},"checkbox"===G&&void 0===W?{}:{value:W}),L)),j?c:A]}))}))},10071:function(e,t,n){"use strict";n(827378);var a=n(403503),o=n(824246);t.Z=(0,a.Z)((0,o.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close")},741611:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/react-autocomplete",function(){return n(498731)}])},467778:function(e,t,n){"use strict";var a=n(573203);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=a(n(122268)),i=n(824246),l=(0,o.default)((0,i.jsx)("path",{d:"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}),"Check");t.default=l},836693:function(e,t,n){"use strict";var a=n(573203);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=a(n(122268)),i=n(824246),l=(0,o.default)((0,i.jsx)("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox");t.default=l},161281:function(e,t,n){"use strict";var a=n(573203);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=a(n(122268)),i=n(824246),l=(0,o.default)((0,i.jsx)("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank");t.default=l},298690:function(e,t,n){"use strict";var a=n(573203);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=a(n(122268)),i=n(824246),l=(0,o.default)((0,i.jsx)("path",{d:"M9 16.2 4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"}),"Done");t.default=l},81933:function(e,t,n){"use strict";var a=n(573203);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=a(n(122268)),i=n(824246),l=(0,o.default)((0,i.jsx)("path",{d:"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"}),"LocationOn");t.default=l},867385:function(e,t,n){"use strict";var a=n(573203);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=a(n(122268)),i=n(824246),l=(0,o.default)((0,i.jsx)("path",{d:"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"}),"Settings");t.default=l}},function(e){e.O(0,[75760,31194,91642,35408,85992,51588,70072,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,60489,49774,92888,40179],(function(){return t=741611,e(e.s=t);var t}));var t=e.O();_N_E=t}]);