(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[81617],{178986:function(e,n,a){"use strict";a.r(n),a.d(n,{default:function(){return r}});a(827378);var o,t=a(494616),s={en:{description:"You can add static typing to JavaScript to improve developer productivity and code quality thanks to TypeScript.",location:"/docs/data/material/guides/typescript/typescript.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>TypeScript</h1><p class="description">You can add static typing to JavaScript to improve developer productivity and code quality thanks to TypeScript.</p>\n\n<h2 id="minimum-configuration">Minimum configuration<a aria-labelledby="minimum-configuration" class="anchor-link-style" href="#minimum-configuration" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>\x3c!-- #default-branch-switch --\x3e\n\n<p>MUI requires a minimum version of TypeScript 3.5. Have a look at the <a href="https://github.com/mui/material-ui/tree/master/examples/create-react-app-with-typescript">Create React App with TypeScript</a> example.</p>\n<p>For types to work, it&#39;s recommended that you have at least the following options enabled in your <code>tsconfig.json</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es6"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The strict mode options are the same that are required for every types package\npublished in the <code>@types/</code> namespace.\nUsing a less strict <code>tsconfig.json</code> or omitting some of the libraries might cause errors.\nTo get the best type experience with the types we recommend setting <code>&quot;strict&quot;: true</code>.</p>\n<h2 id="handling-value-and-event-handlers">Handling <code>value</code> and event handlers<a aria-labelledby="handling-value-and-event-handlers" class="anchor-link-style" href="#handling-value-and-event-handlers" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Many components concerned with user input offer a <code>value</code> prop or event handlers\nwhich include the current <code>value</code>. In most situations that <code>value</code> is only handled\nwithin React which allows it be of any type, such as objects or arrays.</p>\n<p>However, that type cannot be verified at compile time in situations where it depends\non the component&#39;s children e.g. for <code>Select</code> or <code>RadioGroup</code>. This means that\nthe soundest option is to type it as <code>unknown</code> and let the developer decide\nhow they want to narrow that type down. We do not offer the possibility to use a generic\ntype in those cases for <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682">the same reasons <code>event.target</code> is not generic in React</a>.</p>\n<p>The demos include typed variants that use type casting. It is an acceptable tradeoff\nbecause the types are all located in a single file and are very basic. You have to decide for yourself\nif the same tradeoff is acceptable for you. The library types are strict\nby default and loose via opt-in.</p>\n<h2 id="customization-of-theme">Customization of <code>Theme</code><a aria-labelledby="customization-of-theme" class="anchor-link-style" href="#customization-of-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Moved to <a href="/material-ui/customization/theming/#custom-variables">/customization/theming/#custom-variables</a>.</p>\n<h2 id="complications-with-the-component-prop">Complications with the <code>component</code> prop<a aria-labelledby="complications-with-the-component-prop" class="anchor-link-style" href="#complications-with-the-component-prop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Because of some TypeScript limitations, using the <code>component</code> prop can be problematic if you are creating your custom component based on the Material UI&#39;s components.\nFor the composition of the components, you will likely need to use one of these two options:</p>\n<ol>\n<li>Wrap the Material UI component in order to enhance it</li>\n<li>Use the <code>styled()</code> utility in order to customize the styles of the component</li>\n</ol>\n<p>If you are using the first option, take a look at the <a href="/material-ui/guides/composition/#with-typescript">composition guide</a> for more details.</p>\n<p>If you are using the <code>styled()</code> utility (regardless of whether it comes from <code>@mui/material</code> or <code>@emotion/styled</code>), you will need to cast the resulting component as shown below:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">\'@mui/material/Button\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CustomButton <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// your custom styles go here</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">typeof</span> Button<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n'],toc:[{text:"Minimum configuration",level:2,hash:"minimum-configuration",children:[]},{text:"Handling value and event handlers",level:2,hash:"handling-value-and-event-handlers",children:[]},{text:"Customization of Theme",level:2,hash:"customization-of-theme",children:[]},{text:"Complications with the component prop",level:2,hash:"complications-with-the-component-prop",children:[]}],title:"TypeScript",headers:{components:[]}},pt:{description:"Voc\xea pode adicionar tipagem est\xe1tica para o JavaScript para melhorar a produtividade do desenvolvimento e a qualidade do c\xf3digo gra\xe7as ao TypeScript.",location:"/docs/data/material/guides/typescript/typescript-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>TypeScript</h1><p class="description">Voc\xea pode adicionar tipagem est\xe1tica para o JavaScript para melhorar a produtividade do desenvolvimento e a qualidade do c\xf3digo gra\xe7as ao TypeScript.</p>\n\n<h2 id="minimum-configuration">Uso de <code>withStyles</code><a aria-labelledby="minimum-configuration" class="anchor-link-style" href="#minimum-configuration" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>\x3c!-- #default-branch-switch --\x3e\n\n<p>Material-UI requires a minimum version of TypeScript 3.5. Have a look at the <a href="https://github.com/mui/material-ui/tree/master/examples/create-react-app-with-typescript">Create React App with TypeScript</a> example.</p>\n<p>D\xea uma olhada no exemplo <a href="https://github.com/mui/material-ui/tree/master/examples/create-react-app-with-typescript">Create React App com TypeScript</a>.</p>\n<div class="MuiCode-root"><pre><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es6"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>As op\xe7\xf5es do modo strict s\xe3o as mesmas que s\xe3o necess\xe1rias para todos os tipos de pacote publicados no namespace <code>@types/</code>. Usando uma <code>tsconfig.json</code> menos rigorosa ou omitindo algumas das bibliotecas podem causar erros. Para obter a melhor experi\xeancia com os tipos, recomendamos configurar <code>&quot;strict&quot;: true</code>.</p>\n<h2 id="handling-value-and-event-handlers">Manipulando <code>value</code> e manipuladores de eventos<a aria-labelledby="handling-value-and-event-handlers" class="anchor-link-style" href="#handling-value-and-event-handlers" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Muitos componentes preocupados com a entrada do usu\xe1rio oferecem uma propriedade <code>value</code> ou manipuladores de eventos que incluem o valor atual em <code>value</code>. Na maioria das situa\xe7\xf5es, <code>value</code> s\xf3 \xe9 manipulado dentro do React, o que permite que seja de qualquer tipo, como objetos ou matrizes.</p>\n<p>No entanto, esse tipo n\xe3o pode ser verificado em tempo de compila\xe7\xe3o em situa\xe7\xf5es em que depende de n\xf3s filhos do componente, por exemplo, para <code>Select</code> ou <code>RadioGroup</code>. Isso significa que a op\xe7\xe3o mais segura \xe9 tipando como <code>unknown</code> e deixar que o desenvolvedor decida como deseja restringir esse tipo. N\xe3o oferecemos a possibilidade de usar um tipo gen\xe9rico nesses casos, devido <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682">as mesmas raz\xf5es que <code>event.target</code> n\xe3o \xe9 gen\xe9rico no React</a>.</p>\n<p>As demonstra\xe7\xf5es incluem variantes tipadas que usam convers\xe3o de tipo. \xc9 uma troca aceit\xe1vel porque os tipos est\xe3o todos localizados em um \xfanico arquivo e s\xe3o muito b\xe1sicos. Voc\xea tem que decidir por si mesmo se a mesma troca \xe9 aceit\xe1vel para voc\xea. The library types are strict by default and loose via opt-in.</p>\n<h2 id="customization-of-theme">Uso da propriedade <code>component</code><a aria-labelledby="customization-of-theme" class="anchor-link-style" href="#customization-of-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Moved to <a href="/pt/material-ui/customization/theming/#custom-variables">/customization/theming/#custom-variables</a>.</p>\n<h2 id="complications-with-the-component-prop">Complications with the <code>component</code> prop<a aria-labelledby="complications-with-the-component-prop" class="anchor-link-style" href="#complications-with-the-component-prop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Because of some TypeScript limitations, using the <code>component</code> prop can be problematic if you are creating your custom component based on the Material UI&#39;s components. For the composition of the components, you will likely need to use one of these two options:</p>\n<ol>\n<li>Wrap the Material UI component in order to enhance it</li>\n<li>Use the <code>styled()</code> utility in order to customize the styles of the component</li>\n</ol>\n<p>If you are using the first option, take a look at the <a href="/pt/material-ui/guides/composition/#with-typescript">composition guide</a> for more details.</p>\n<p>If you are using the <code>styled()</code> utility (regardless of whether it comes from <code>@mui/material</code> or <code>@emotion/styled</code>), you will need to cast the resulting component as shown below:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">\'@mui/material/Button\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CustomButton <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// your custom styles go here</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">typeof</span> Button<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n'],toc:[{text:"Uso de withStyles",level:2,hash:"minimum-configuration",children:[]},{text:"Manipulando value e manipuladores de eventos",level:2,hash:"handling-value-and-event-handlers",children:[]},{text:"Uso da propriedade component",level:2,hash:"customization-of-theme",children:[]},{text:"Complications with the component prop",level:2,hash:"complications-with-the-component-prop",children:[]}],title:"TypeScript",headers:{components:[]}},zh:{description:"\u501f\u52a9 TypeScript\uff0c\u4f60\u53ef\u4ee5\u4e3a JavaScript \u6dfb\u52a0\u9759\u6001\u7c7b\u578b\uff0c\u4ece\u800c\u63d0\u9ad8\u4ee3\u7801\u8d28\u91cf\u53ca\u5f00\u53d1\u8005\u7684\u5de5\u4f5c\u6548\u7387\u3002",location:"/docs/data/material/guides/typescript/typescript-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>TypeScript</h1><p class="description">\u501f\u52a9 TypeScript\uff0c\u4f60\u53ef\u4ee5\u4e3a JavaScript \u6dfb\u52a0\u9759\u6001\u7c7b\u578b\uff0c\u4ece\u800c\u63d0\u9ad8\u4ee3\u7801\u8d28\u91cf\u53ca\u5f00\u53d1\u8005\u7684\u5de5\u4f5c\u6548\u7387\u3002</p>\n\n<h2 id="minimum-configuration"><code>withStyles</code> \u7684\u4f7f\u7528<a aria-labelledby="minimum-configuration" class="anchor-link-style" href="#minimum-configuration" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>\x3c!-- #default-branch-switch --\x3e\n\n<p>MUI requires a minimum version of TypeScript 3.5. Material-UI requires a minimum version of TypeScript 3.5. \u8bf7\u67e5\u770b\u4e00\u4e0b <a href="https://github.com/mui/material-ui/tree/master/examples/create-react-app-with-typescript">Create React App with TypeScript</a> \u7684\u4f8b\u5b50\u3002</p>\n<p>\u8bf7\u67e5\u770b <a href="https://github.com/mui/material-ui/tree/next/examples/create-react-app-with-typescript">Create React App with TypeScript</a> \u7684\u4f8b\u5b50\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es6"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u5bf9\u6bcf\u4e2a\u53d1\u5e03\u5728 <code>@types/</code> \u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u7c7b\u578b\u58f0\u660e\u5305\uff0c\u540c\u6837\u9700\u8981\u542f\u7528\u4e25\u683c\u6a21\u5f0f\uff08strict mode\uff09\u3002 \u4f7f\u7528\u4e0d\u592a\u4e25\u683c\u7684 <code>tsconfig.json</code> \u6216\u7701\u7565\u67d0\u4e9b\u5e93\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u4e9b\u9519\u8bef\u3002 \u82e5\u60a8\u60f3\u83b7\u5f97\u6700\u4f73\u7c7b\u578b\uff08type\uff09\u7684\u4f53\u9a8c\uff0c\u6211\u4eec\u5efa\u8bae\u8bbe\u7f6e <code>&quot;strict&quot;: true</code> \u3002</p>\n<h2 id="handling-value-and-event-handlers">\u5904\u7406<code>\u503c</code>\u548c\u4e8b\u4ef6\u5904\u7406\u5668<a aria-labelledby="handling-value-and-event-handlers" class="anchor-link-style" href="#handling-value-and-event-handlers" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u5f88\u591a\u4e0e\u7528\u6237\u8f93\u5165\u6709\u5173\u7684\u7ec4\u4ef6\u4f1a\u63d0\u4f9b\u4e00\u4e2a <code>value</code> \u5c5e\u6027\u6216\u8005\u5305\u542b\u5f53\u524d<code>\u503c</code>\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b<code>\u503c</code>\u53ea\u5728 React \u5185\u88ab\u5904\u7406\uff0c\u8fd9\u6837\u7684\u8bdd\u5b83\u80fd\u591f\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u8b6c\u5982 objects \u6216\u8005 arrays\u3002</p>\n<p>\u7136\u800c\uff0c\u5982\u679c\u662f\u5b83\u4f9d\u8d56\u4e8e\u7ec4\u4ef6\u5b50\u9879\u7684\u60c5\u51b5\uff0c\u6b64\u7c7b\u578b\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u88ab\u9a8c\u8bc1\uff0c\u4f8b\u5982\u5bf9\u4e8e <code>Select</code> \u6216\u8005 <code>RadioGroup</code> \u6765\u8bf4\u3002 \u8fd9\u610f\u5473\u7740\u7559\u7ed9\u6211\u4eec\u7684\u6700\u5408\u9002\u7684\u9009\u9879\u662f\u5c06\u5176\u8f93\u5165\u4e3a <code>unknown</code> \u5e76\u8ba9\u5f00\u53d1\u8005\u81ea\u884c\u51b3\u5b9a\u5982\u4f55\u6765\u7f29\u5c0f\u8be5\u7c7b\u578b\u3002 \u4e0e <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682"><code>event.target</code> \u5728 React \u4e2d\u5e76\u4e0d\u901a\u7528\u7684\u539f\u56e0</a>\u76f8\u540c\uff0c\u6211\u4eec\u5e76\u4e0d\u63a8\u8350\u60a8\u5728\u8fd9\u4e9b\u6848\u4f8b\u4e2d\u5c1d\u8bd5\u4f7f\u7528\u4e00\u4e2a\u901a\u7528\u7684\u7c7b\u578b\u3002</p>\n<p>\u8fd9\u4e9b\u6f14\u793a\u5305\u62ec\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u7684\u7c7b\u578b\u53d8\u91cf\u3002 \u9274\u4e8e\u6240\u6709\u7684\u7c7b\u578b\u90fd\u4f4d\u4e8e\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u90fd\u662f\u975e\u5e38\u57fa\u672c\u7684\uff0c\u8fd9\u6837\u7684\u6298\u8877\u53ef\u4ee5\u63a5\u53d7\u3002 \u60a8\u5fc5\u987b\u81ea\u884c\u51b3\u5b9a\u662f\u5426\u80fd\u591f\u63a5\u53d7\u540c\u6837\u7684\u6298\u8877\u3002 The library types are strict by default and loose via opt-in.</p>\n<h2 id="customization-of-theme"><code>component</code> \u5c5e\u6027\u7684\u7528\u6cd5<a aria-labelledby="customization-of-theme" class="anchor-link-style" href="#customization-of-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Moved to <a href="/zh/material-ui/customization/theming/#custom-variables">/customization/theming/#custom-variables</a>.</p>\n<h2 id="complications-with-the-component-prop">Complications with the <code>component</code> prop<a aria-labelledby="complications-with-the-component-prop" class="anchor-link-style" href="#complications-with-the-component-prop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Because of some TypeScript limitations, using the <code>component</code> prop can be problematic if you are creating your custom component based on the Material UI&#39;s components. For the composition of the components, you will likely need to use one of these two options:</p>\n<ol>\n<li>Wrap the Material UI component in order to enhance it</li>\n<li>Use the <code>styled()</code> utility in order to customize the styles of the component</li>\n</ol>\n<p>If you are using the first option, take a look at the <a href="/zh/material-ui/guides/composition/#with-typescript">composition guide</a> for more details.</p>\n<p>If you are using the <code>styled()</code> utility (regardless of whether it comes from <code>@mui/material</code> or <code>@emotion/styled</code>), you will need to cast the resulting component as shown below:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">\'@mui/material/Button\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CustomButton <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// your custom styles go here</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">typeof</span> Button<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n'],toc:[{text:"withStyles \u7684\u4f7f\u7528",level:2,hash:"minimum-configuration",children:[]},{text:"\u5904\u7406\u503c\u548c\u4e8b\u4ef6\u5904\u7406\u5668",level:2,hash:"handling-value-and-event-handlers",children:[]},{text:"component \u5c5e\u6027\u7684\u7528\u6cd5",level:2,hash:"customization-of-theme",children:[]},{text:"Complications with the component prop",level:2,hash:"complications-with-the-component-prop",children:[]}],title:"TypeScript",headers:{components:[]}}},p={},i={},c=a(824246);function r(){return o||(o=(0,c.jsx)(t.Z,{demos:p,docs:s,demoComponents:i}))}},574907:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/guides/typescript",function(){return a(178986)}])}},function(e){e.O(0,[75760,31194,91642,35408,85992,51588,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,49774,92888,40179],(function(){return n=574907,e(e.s=n);var n}));var n=e.O();_N_E=n}]);