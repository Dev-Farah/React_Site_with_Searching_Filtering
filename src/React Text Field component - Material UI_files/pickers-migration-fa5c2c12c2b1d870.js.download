(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[76880],{79627:function(n,a,s){"use strict";s.r(a),s.d(a,{default:function(){return l}});s(827378);var e,t=s(494616),p={en:{description:"@material-ui/pickers was moved to the @mui/lab.",location:"/docs/data/material/guides/pickers-migration/pickers-migration.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Migration from @material-ui-pickers</h1><p class="description">@material-ui/pickers was moved to the @mui/lab.</p>\n\n<aside class="MuiCallout-root MuiCallout-warning"><p><strong>\u26a0\ufe0f The date picker components were rewritten</strong>. In most places, the logic was rewritten from scratch, so it isn&#39;t possible to maintain the whole list of changes. Here&#39;s an overview of the most important concepts that were changed. If you are going to upgrade,\xa0the easiest way might be to go through each picker usage in your codebase, and rewrite them one at a time. Don&#39;t forget to run your tests after each!</p>\n\n</aside><p>This guide is an overview of the core concepts that were changed from pickers v3.2.10.</p>\n<h2 id="installation">Installation<a aria-labelledby="installation" class="anchor-link-style" href="#installation" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You need to install the <code>@mui/lab</code> package if it&#39;s not already installed.\n\u26a0\ufe0f Make sure you have installed the latest version, <code>&quot;@mui/lab&quot;: ^5.0.0-alpha.30&quot;</code> or above.</p>\n<h2 id="imports">Imports<a aria-labelledby="imports" class="anchor-link-style" href="#imports" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>keyboard</code> version of pickers is no longer published. All versions of mobile and desktop pickers implement keyboard input for accessibility.</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { KeyboardDatePicker } from \'@material-ui/pickers\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import DatePicker from \'@mui/lab/DatePicker\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">&lt;KeyboardDatePicker />\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">&lt;DatePicker /></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Also, instead of providing a <code>variant</code> prop, these were moved to different imports, meaning that your bundle won&#39;t include <code>Dialog</code> if you are using only the desktop picker.</p>\n<ul>\n<li><code>&lt;DesktopDatePicker /&gt;</code> \u2013\xa0Only desktop view.</li>\n<li><code>&lt;MobileDatePicker /&gt;</code> \u2013\xa0Only mobile view.</li>\n<li><code>&lt;DatePicker /&gt;</code> \u2013 Mobile or Desktop view according to the user <strong>pointer</strong> preference.</li>\n<li><code>&lt;StaticDatePicker /&gt;</code> \u2013 The picker view itself, without input or any other wrapper.</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { DatePicker } from \'@material-ui/pickers\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import DesktopDatePicker from \'@mui/lab/DesktopDatePicker\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">&lt;DatePicker variant="inline" />\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">&lt;DesktopDatePicker /></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The same convention applies to <code>TimePicker</code> \u2013 <code>&lt;DesktopTimePicker&gt;</code> and <code>&lt;MobileTimePicker /&gt;</code>.</p>\n<h2 id="muipickersutilsprovider">MuiPickersUtilsProvider<a aria-labelledby="muipickersutilsprovider" class="anchor-link-style" href="#muipickersutilsprovider" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>MuiPickersUtilsProvider</code> was removed in favor of <code>LocalizationProvider</code>. Also, pickers do not require you to install date-io adapters manually. Everything is included with the <code>lab</code>.</p>\n<p>\u274c Before:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> AdapterDateFns <span class="token keyword">from</span> <span class="token string">\'@date-io/date-fns\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> MuiPickersUtilsProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/pickers\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u2705 After:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> AdapterDateFns <span class="token keyword">from</span> <span class="token string">\'@mui/lab/AdapterDateFns\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> LocalizationProvider <span class="token keyword">from</span> <span class="token string">\'@mui/lab/LocalizationProvider\'</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocalizationProvider</span></span> <span class="token attr-name">dateAdapter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>AdapterDateFns<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocalizationProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="render-input">Render input<a aria-labelledby="render-input" class="anchor-link-style" href="#render-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We introduced a new <strong>required</strong> <code>renderInput</code> prop. This simplifies using non-MUI text field input components.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span> <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TimePicker</span></span> <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Previously, props were spread on the <code>&lt;TextField /&gt;</code> component. From now on you will need to use the new <code>renderInput</code> prop to provide these:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&lt;DatePicker\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  label="Date"\n</span><span class="token prefix deleted">-</span><span class="token line">  helperText="Something"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  renderInput={props => &lt;TextField label="Date" helperText="Something" /> }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="state-management">State management<a aria-labelledby="state-management" class="anchor-link-style" href="#state-management" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The state/value management logic for pickers was rewritten from scratch. Pickers will now call the <code>onChange</code> prop when each view of the date picker ends is completed. The <code>onError</code> handler is also completely different. Triple-check your pickers with forms integration, because form-integration issues can be subtle.</p>\n<h2 id="no-required-mask">No required mask<a aria-labelledby="no-required-mask" class="anchor-link-style" href="#no-required-mask" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Mask is no longer required. Also, if your provided mask is not valid, pickers will just ignore the mask, and allow arbitrary input.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span>\n  <span class="token attr-name">mask</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mm<span class="token punctuation">"</span></span>\n  <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span>log<span class="token punctuation">}</span></span>\n  <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invalid mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span>\n  <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span>log<span class="token punctuation">}</span></span>\n  <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valid mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="and-many-more">And many more<a aria-labelledby="and-many-more" class="anchor-link-style" href="#and-many-more" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&lt;DatePicker\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  format="DD-MMM-YYYY"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  inputFormat="DD-MMM-YYYY"</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n</ul>\n<p>There are many changes, be careful, make sure your tests, and build pass.\nIn the event you have an advanced usage of the date picker, it will likely be simpler to rewrite it.</p>\n<p>Please open a pull request to improve the guide if you notice an opportunity for doing such.</p>\n'],toc:[{text:"Installation",level:2,hash:"installation",children:[]},{text:"Imports",level:2,hash:"imports",children:[]},{text:"MuiPickersUtilsProvider",level:2,hash:"muipickersutilsprovider",children:[]},{text:"Render input",level:2,hash:"render-input",children:[]},{text:"State management",level:2,hash:"state-management",children:[]},{text:"No required mask",level:2,hash:"no-required-mask",children:[]},{text:"And many more",level:2,hash:"and-many-more",children:[]}],title:"Migration from @material-ui-pickers",headers:{components:[]}},pt:{description:"@material-ui/pickers foi movido para o @material-ui/lab.",location:"/docs/data/material/guides/pickers-migration/pickers-migration-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Migra\xe7\xe3o do @material-ui-pickers</h1><p class="description">@material-ui/pickers foi movido para o @material-ui/lab.</p>\n\n<aside class="MuiCallout-root MuiCallout-warning"><p><strong>\u26a0\ufe0f The date picker components were rewritten</strong>. In most places, the logic was rewritten from scratch, so it isn&#39;t possible to maintain the whole list of changes. Here&#39;s an overview of the most important concepts that were changed. If you are going to upgrade,\xa0the easiest way might be to go through each picker usage in your codebase, and rewrite them one at a time. Don&#39;t forget to run your tests after each!</p>\n\n</aside><p>This guide is an overview of the core concepts that were changed from pickers v3.2.10.</p>\n<h2 id="installation">Instala\xe7\xe3o<a aria-labelledby="installation" class="anchor-link-style" href="#installation" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You need to install the <code>@mui/lab</code> package if it&#39;s not already installed. \u26a0\ufe0f Make sure you have installed the latest version, <code>&quot;@mui/lab&quot;: ^5.0.0-alpha.30&quot;</code> or above.</p>\n<h2 id="imports">Importa\xe7\xf5es<a aria-labelledby="imports" class="anchor-link-style" href="#imports" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>keyboard</code> version of pickers is no longer published. All versions of mobile and desktop pickers implement keyboard input for accessibility.</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { KeyboardDatePicker } from \'@material-ui/pickers\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import DatePicker from \'@material-ui/lab/DatePicker\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">&lt;KeyboardDatePicker />\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">&lt;DatePicker /></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Also, instead of providing a <code>variant</code> prop, these were moved to different imports, meaning that your bundle won&#39;t include <code>Dialog</code> if you are using only the desktop picker.</p>\n<ul>\n<li><code>&lt;DesktopDatePicker /&gt;</code> \u2013\xa0Somente visualiza\xe7\xe3o em desktop.</li>\n<li><code>&lt;MobileDatePicker /&gt;</code> \u2013\xa0Somente visualiza\xe7\xe3o em dispositivos m\xf3veis.</li>\n<li><code>&lt;DatePicker /&gt;</code> \u2013 Visualiza\xe7\xe3o m\xf3vel ou desktop de acordo com a prefer\xeancia de <strong>pointer</strong> do usu\xe1rio.</li>\n<li><code>&lt;StaticDatePicker /&gt;</code> \u2013 A pr\xf3pria visualiza\xe7\xe3o do seletor em si, sem um input ou qualquer componente encapsulado.</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { DatePicker } from \'@material-ui/pickers\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import DesktopDatePicker from \'@material-ui/lab/DesktopDatePicker\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">&lt;DatePicker variant="inline" />\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">&lt;DesktopDatePicker /></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The same convention applies to <code>TimePicker</code> \u2013 <code>&lt;DesktopTimePicker&gt;</code> and <code>&lt;MobileTimePicker /&gt;</code>.</p>\n<h2 id="muipickersutilsprovider">MuiPickersUtilsProvider<a aria-labelledby="muipickersutilsprovider" class="anchor-link-style" href="#muipickersutilsprovider" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>MuiPickersUtilsProvider</code> was removed in favor of <code>LocalizationProvider</code>. Also, pickers do not require you to install date-io adapters manually. Everything is included with the <code>lab</code>.</p>\n<p>\u274c Before:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> AdapterDateFns <span class="token keyword">from</span> <span class="token string">\'@date-io/date-fns\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> MuiPickersUtilsProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/pickers\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u2705 After:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> AdapterDateFns <span class="token keyword">from</span> <span class="token string">\'@material-ui/lab/AdapterDateFns\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> LocalizationProvider <span class="token keyword">from</span> <span class="token string">\'@material-ui/lab/LocalizationProvider\'</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocalizationProvider</span></span> <span class="token attr-name">dateAdapter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>AdapterDateFns<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocalizationProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="render-input">Renderizando input<a aria-labelledby="render-input" class="anchor-link-style" href="#render-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We introduced a new <strong>required</strong> <code>renderInput</code> prop. This simplifies using non-MUI text field input components.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span> <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TimePicker</span></span> <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Previously, props were spread on the <code>&lt;TextField /&gt;</code> component. From now on you will need to use the new <code>renderInput</code> prop to provide these:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&lt;DatePicker\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> label="Date"\n</span><span class="token prefix deleted">-</span><span class="token line"> helperText="Something"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> renderInput={props => &lt;TextField label="Date" helperText="Something" /> }\n</span></span>/>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="state-management">Gerenciamento do estado<a aria-labelledby="state-management" class="anchor-link-style" href="#state-management" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The state/value management logic for pickers was rewritten from scratch. Pickers will now call the <code>onChange</code> prop when each view of the date picker ends is completed. The <code>onError</code> handler is also completely different. Triple-check your pickers with forms integration, because form-integration issues can be subtle.</p>\n<h2 id="no-required-mask">Nenhuma m\xe1scara necess\xe1ria<a aria-labelledby="no-required-mask" class="anchor-link-style" href="#no-required-mask" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Mask is no longer required. Also, if your provided mask is not valid, pickers will just ignore the mask, and allow arbitrary input.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span>\n  <span class="token attr-name">mask</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mm<span class="token punctuation">"</span></span>\n  <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span>log<span class="token punctuation">}</span></span>\n  <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invalid mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span>\n  <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span>log<span class="token punctuation">}</span></span>\n  <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valid mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="and-many-more">E muito mais<a aria-labelledby="and-many-more" class="anchor-link-style" href="#and-many-more" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li>````diff &lt;DatePicker<ul>\n<li>format=&quot;DD-MMM-YYYY&quot;</li>\n</ul>\n<ul>\n<li>inputFormat=&quot;DD-MMM-YYYY&quot; ``` ````</li>\n</ul>\n</li>\n</ul>\n<p>There are many changes, be careful, make sure your tests, and build pass. In the event you have an advanced usage of the date picker, it will likely be simpler to rewrite it.</p>\n<p>Please open a pull request to improve the guide if you notice an opportunity for doing such.</p>\n'],toc:[{text:"Instala\xe7\xe3o",level:2,hash:"installation",children:[]},{text:"Importa\xe7\xf5es",level:2,hash:"imports",children:[]},{text:"MuiPickersUtilsProvider",level:2,hash:"muipickersutilsprovider",children:[]},{text:"Renderizando input",level:2,hash:"render-input",children:[]},{text:"Gerenciamento do estado",level:2,hash:"state-management",children:[]},{text:"Nenhuma m\xe1scara necess\xe1ria",level:2,hash:"no-required-mask",children:[]},{text:"E muito mais",level:2,hash:"and-many-more",children:[]}],title:"Migra\xe7\xe3o do @material-ui-pickers",headers:{components:[]}},zh:{description:"@mui/pickers \u73b0\u5728\u5df2\u7ecf\u6574\u5408\u8fdb\u4e86 @mui/lab\u3002",location:"/docs/data/material/guides/pickers-migration/pickers-migration-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>\u4ece @mui-pickers \u8fdb\u884c\u8fc1\u79fb</h1><p class="description">@mui/pickers \u73b0\u5728\u5df2\u7ecf\u6574\u5408\u8fdb\u4e86 @mui/lab\u3002</p>\n\n<aside class="MuiCallout-root MuiCallout-warning"><p><strong>\u26a0\ufe0f The date picker components were rewritten</strong>. In most places, the logic was rewritten from scratch, so it isn&#39;t possible to maintain the whole list of changes. Here&#39;s an overview of the most important concepts that were changed. If you are going to upgrade,\xa0the easiest way might be to go through each picker usage in your codebase, and rewrite them one at a time. Don&#39;t forget to run your tests after each!</p>\n\n</aside><p>This guide is an overview of the core concepts that were changed from pickers v3.2.10.</p>\n<h2 id="installation">\u5b89\u88c5<a aria-labelledby="installation" class="anchor-link-style" href="#installation" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You need to install the <code>@mui/lab</code> package if it&#39;s not already installed. \u26a0\ufe0f Make sure you have installed the latest version, <code>&quot;@mui/lab&quot;: ^5.0.0-alpha.30&quot;</code> or above.</p>\n<h2 id="imports">\u5bfc\u5165<a aria-labelledby="imports" class="anchor-link-style" href="#imports" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>keyboard</code> version of pickers is no longer published. All versions of mobile and desktop pickers implement keyboard input for accessibility.</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { KeyboardDatePicker } from \'@mui/pickers\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import DatePicker from \'@mui/lab/DatePicker\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">&lt;KeyboardDatePicker />\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">&lt;DatePicker /></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Also, instead of providing a <code>variant</code> prop, these were moved to different imports, meaning that your bundle won&#39;t include <code>Dialog</code> if you are using only the desktop picker.</p>\n<ul>\n<li><code>&lt;DesktopDatePicker /&gt;</code> \u2013 \u4ec5\u684c\u9762\u89c6\u56fe\u3002</li>\n<li><code>&lt;MobileDatePicker /&gt;</code> \u2013 \u4ec5\u79fb\u52a8\u89c6\u56fe\u3002</li>\n<li><code>&lt;DatePicker /&gt;</code> \u2013 \u6839\u636e\u7528\u6237<strong>\u6307\u9488</strong>\u7684\u504f\u597d\u6765\u63d0\u4f9b\u79fb\u52a8\u6216\u684c\u9762\u89c6\u56fe\u3002</li>\n<li><code>&lt;StaticDatePicker /&gt;</code> \u2013 \u9009\u62e9\u5668\u672c\u8eab\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u8f93\u5165\u6216\u8005\u5176\u4ed6\u7684\u5305\u88c5\u5668\u3002</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import { DatePicker } from \'@mui/pickers\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import DesktopDatePicker from \'@mui/lab/DesktopDatePicker\';\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">&lt;DatePicker variant="inline" />\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">&lt;DesktopDatePicker /></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The same convention applies to <code>TimePicker</code> \u2013 <code>&lt;DesktopTimePicker&gt;</code> and <code>&lt;MobileTimePicker /&gt;</code>.</p>\n<h2 id="muipickersutilsprovider">MuiPickersUtilsProvider<a aria-labelledby="muipickersutilsprovider" class="anchor-link-style" href="#muipickersutilsprovider" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>MuiPickersUtilsProvider</code> was removed in favor of <code>LocalizationProvider</code>. Also, pickers do not require you to install date-io adapters manually. Everything is included with the <code>lab</code>.</p>\n<p>\u274c Before:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> AdapterDateFns <span class="token keyword">from</span> <span class="token string">\'@date-io/date-fns\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> MuiPickersUtilsProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/pickers\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u2705 After:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> AdapterDateFns <span class="token keyword">from</span> <span class="token string">\'@mui/lab/AdapterDateFns\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> LocalizationProvider <span class="token keyword">from</span> <span class="token string">\'@mui/lab/LocalizationProvider\'</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocalizationProvider</span></span> <span class="token attr-name">dateAdapter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>AdapterDateFns<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocalizationProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocalizationProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocalizationProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="render-input">\u6e32\u67d3\u8f93\u5165<a aria-labelledby="render-input" class="anchor-link-style" href="#render-input" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We introduced a new <strong>required</strong> <code>renderInput</code> prop. This simplifies using non-MUI text field input components.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span> <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TimePicker</span></span> <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Previously, props were spread on the <code>&lt;TextField /&gt;</code> component. From now on you will need to use the new <code>renderInput</code> prop to provide these:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&lt;DatePicker\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> label="Date"\n</span><span class="token prefix deleted">-</span><span class="token line"> helperText="Something"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> renderInput={props => &lt;TextField label="Date" helperText="Something" /> }\n</span></span>/>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="state-management">\u72b6\u6001\u7ba1\u7406<a aria-labelledby="state-management" class="anchor-link-style" href="#state-management" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The state/value management logic for pickers was rewritten from scratch. Pickers will now call the <code>onChange</code> prop when each view of the date picker ends is completed. The <code>onError</code> handler is also completely different. Triple-check your pickers with forms integration, because form-integration issues can be subtle.</p>\n<h2 id="no-required-mask">\u65e0\u5fc5\u586b\u7684\u63a9\u7801\uff08mask\uff09<a aria-labelledby="no-required-mask" class="anchor-link-style" href="#no-required-mask" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Mask is no longer required. Also, if your provided mask is not valid, pickers will just ignore the mask, and allow arbitrary input.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span>\n  <span class="token attr-name">mask</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mm<span class="token punctuation">"</span></span>\n  <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span>log<span class="token punctuation">}</span></span>\n  <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invalid mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DatePicker</span></span>\n  <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span>log<span class="token punctuation">}</span></span>\n  <span class="token attr-name">renderInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">helperText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valid mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="and-many-more">\u66f4\u591a\u5185\u5bb9<a aria-labelledby="and-many-more" class="anchor-link-style" href="#and-many-more" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li>````diff &lt;DatePicker<ul>\n<li>format=&quot;DD-MMM-YYYY&quot;</li>\n</ul>\n<ul>\n<li>inputFormat=&quot;DD-MMM-YYYY&quot; ``` ````</li>\n</ul>\n</li>\n</ul>\n<p>There are many changes, be careful, make sure your tests, and build pass. In the event you have an advanced usage of the date picker, it will likely be simpler to rewrite it.</p>\n<p>Please open a pull request to improve the guide if you notice an opportunity for doing such.</p>\n'],toc:[{text:"\u5b89\u88c5",level:2,hash:"installation",children:[]},{text:"\u5bfc\u5165",level:2,hash:"imports",children:[]},{text:"MuiPickersUtilsProvider",level:2,hash:"muipickersutilsprovider",children:[]},{text:"\u6e32\u67d3\u8f93\u5165",level:2,hash:"render-input",children:[]},{text:"\u72b6\u6001\u7ba1\u7406",level:2,hash:"state-management",children:[]},{text:"\u65e0\u5fc5\u586b\u7684\u63a9\u7801\uff08mask\uff09",level:2,hash:"no-required-mask",children:[]},{text:"\u66f4\u591a\u5185\u5bb9",level:2,hash:"and-many-more",children:[]}],title:"\u4ece @mui-pickers \u8fdb\u884c\u8fc1\u79fb",headers:{components:[]}}},o={},c={},i=s(824246);function l(){return e||(e=(0,i.jsx)(t.Z,{demos:o,docs:p,demoComponents:c}))}},984317:function(n,a,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/guides/pickers-migration",function(){return s(79627)}])}},function(n){n.O(0,[75760,31194,91642,35408,85992,51588,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,49774,92888,40179],(function(){return a=984317,n(n.s=a);var a}));var a=n.O();_N_E=a}]);