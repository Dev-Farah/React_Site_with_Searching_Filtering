(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[62809],{585482:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return i}});a(827378);var t,e=a(494616),p={en:{description:"The most common use case for server-side rendering is to handle the initial render when a user (or search engine crawler) first requests your app.",location:"/docs/data/material/guides/server-rendering/server-rendering.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Server rendering</h1><p class="description">The most common use case for server-side rendering is to handle the initial render when a user (or search engine crawler) first requests your app.</p>\n\n<p>When the server receives the request, it renders the required component(s) into an HTML string, and then sends it as a response to the client.\nFrom that point on, the client takes over rendering duties.</p>\n<h2 id="mui-on-the-server">MUI on the server<a aria-labelledby="mui-on-the-server" class="anchor-link-style" href="#mui-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>MUI was designed from the ground-up with the constraint of rendering on the server, but it&#39;s up to you to make sure it&#39;s correctly integrated.\nIt&#39;s important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC).\nTo inject the style down to the client, we need to:</p>\n<ol>\n<li>Create a fresh, new <a href="https://emotion.sh/docs/@emotion/cache"><code>emotion cache</code></a> instance on every request.</li>\n<li>Render the React tree with the server-side collector.</li>\n<li>Pull the CSS out.</li>\n<li>Pass the CSS along to the client.</li>\n</ol>\n<p>On the client-side, the CSS will be injected a second time before removing the server-side injected CSS.</p>\n<h2 id="setting-up">Setting up<a aria-labelledby="setting-up" class="anchor-link-style" href="#setting-up" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>In the following recipe, we are going to look at how to set up server-side rendering.</p>\n<h3 id="the-theme">The theme<a aria-labelledby="the-theme" class="anchor-link-style" href="#the-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Create a theme that will be shared between the client and the server:</p>\n<p><code>theme.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> red <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/colors\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create a theme instance.</span>\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#556cd6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">secondary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#19857b\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> red<span class="token punctuation">.</span><span class="token constant">A400</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> theme<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-server-side">The server-side<a aria-labelledby="the-server-side" class="anchor-link-style" href="#the-server-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The following is the outline for what the server-side is going to look like.\nWe are going to set up an <a href="https://expressjs.com/en/guide/using-middleware.html">Express middleware</a> using <a href="https://expressjs.com/en/api.html">app.use</a> to handle all requests that come into the server.\nIf you&#39;re unfamiliar with Express or middleware, know that the <code>handleRender</code> function will be called every time the server receives a request.</p>\n<p><code>server.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// We are going to fill these out in the sections to follow.</span>\n<span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="handling-the-request">Handling the request<a aria-labelledby="handling-the-request" class="anchor-link-style" href="#handling-the-request" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The first thing that we need to do on every request is to create a new <code>emotion cache</code>.</p>\n<p>When rendering, we will wrap <code>App</code>, the root component,\ninside a <a href="https://emotion.sh/docs/cache-provider"><code>CacheProvider</code></a> and <a href="/system/styles/api/#themeprovider"><code>ThemeProvider</code></a> to make the style configuration and the <code>theme</code> available to all components in the component tree.</p>\n<p>The key step in server-side rendering is to render the initial HTML of the component <strong>before</strong> we send it to the client-side. To do this, we use <a href="https://reactjs.org/docs/react-dom-server.html">ReactDOMServer.renderToString()</a>.</p>\n<p>MUI is using Emotion as its default styled engine.\nWe need to extract the styles from the Emotion instance.\nFor this, we need to share the same cache configuration for both the client and server:</p>\n<p><code>createEmotionCache.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createEmotionCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>With this we are creating a new Emotion cache instance and using this to extract the critical styles for the html as well.</p>\n<p>We will see how this is passed along in the <code>renderFullPage</code> function.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@mui/material/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionServer <span class="token keyword">from</span> <span class="token string">\'@emotion/server/create-instance\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionCache <span class="token keyword">from</span> <span class="token string">\'./createEmotionCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createEmotionCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> extractCriticalToChunks<span class="token punctuation">,</span> constructStyleTagsFromChunks <span class="token punctuation">}</span> <span class="token operator">=</span>\n    <span class="token function">createEmotionServer</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Render the component to a string.</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Grab the CSS from emotion</span>\n  <span class="token keyword">const</span> emotionChunks <span class="token operator">=</span> <span class="token function">extractCriticalToChunks</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> emotionCss <span class="token operator">=</span> <span class="token function">constructStyleTagsFromChunks</span><span class="token punctuation">(</span>emotionChunks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send the rendered page back to the client.</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderFullPage</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> emotionCss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">\'/build\'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">\'build\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="inject-initial-component-html-and-css">Inject initial component HTML and CSS<a aria-labelledby="inject-initial-component-html-and-css" class="anchor-link-style" href="#inject-initial-component-html-and-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client-side.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;!DOCTYPE html>\n    &lt;html>\n      &lt;head>\n        &lt;title>My page&lt;/title>\n        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>css<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n        &lt;meta name="viewport" content="initial-scale=1, width=device-width" />\n        &lt;link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap" />\n      &lt;/head>\n      &lt;body>\n        &lt;div id="root"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>\n      &lt;/body>\n    &lt;/html>\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-client-side">The client-side<a aria-labelledby="the-client-side" class="anchor-link-style" href="#the-client-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The client-side is straightforward.\nAll we need to do is use the same cache configuration as the server-side.\nLet&#39;s take a look at the client file:</p>\n<p><code>client.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@mui/material/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionCache <span class="token keyword">from</span> <span class="token string">\'./createEmotionCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createEmotionCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="reference-implementations">Reference implementations<a aria-labelledby="reference-implementations" class="anchor-link-style" href="#reference-implementations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We host different reference implementations which you can find in the <a href="https://github.com/mui/material-ui">GitHub repository</a> under the <a href="https://github.com/mui/material-ui/tree/HEAD/examples"><code>/examples</code></a> folder:</p>\n<ul>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/ssr">The reference implementation of this tutorial</a></li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/gatsby">Gatsby</a></li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/nextjs">Next.js</a> (<a href="https://github.com/mui/material-ui/tree/HEAD/examples/nextjs-with-typescript">TypeScript version</a>)</li>\n</ul>\n<h2 id="troubleshooting">Troubleshooting<a aria-labelledby="troubleshooting" class="anchor-link-style" href="#troubleshooting" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Check out the FAQ answer: <a href="/material-ui/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server">My App doesn&#39;t render correctly on the server</a>.</p>\n'],toc:[{text:"MUI on the server",level:2,hash:"mui-on-the-server",children:[]},{text:"Setting up",level:2,hash:"setting-up",children:[{text:"The theme",level:3,hash:"the-theme"},{text:"The server-side",level:3,hash:"the-server-side"},{text:"Handling the request",level:3,hash:"handling-the-request"},{text:"Inject initial component HTML and CSS",level:3,hash:"inject-initial-component-html-and-css"},{text:"The client-side",level:3,hash:"the-client-side"}]},{text:"Reference implementations",level:2,hash:"reference-implementations",children:[]},{text:"Troubleshooting",level:2,hash:"troubleshooting",children:[]}],title:"Server rendering",headers:{components:[]}},pt:{description:"A situa\xe7\xe3o de uso mais comum para a renderiza\xe7\xe3o do lado do servidor, \xe9 manipular a renderiza\xe7\xe3o inicial quando um usu\xe1rio (ou rastreador de mecanismo de pesquisa) solicita sua aplica\xe7\xe3o.",location:"/docs/data/material/guides/server-rendering/server-rendering-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Renderiza\xe7\xe3o no servidor</h1><p class="description">A situa\xe7\xe3o de uso mais comum para a renderiza\xe7\xe3o do lado do servidor, \xe9 manipular a renderiza\xe7\xe3o inicial quando um usu\xe1rio (ou rastreador de mecanismo de pesquisa) solicita sua aplica\xe7\xe3o.</p>\n\n<p>Quando o servidor recebe a solicita\xe7\xe3o, ele renderiza o(s) componente(s) requerido(s) em uma cadeia HTML e o envia como uma resposta ao cliente. A partir desse momento, o cliente assume as fun\xe7\xf5es de renderiza\xe7\xe3o.</p>\n<h2 id="mui-on-the-server">Material-UI no servidor<a aria-labelledby="mui-on-the-server" class="anchor-link-style" href="#mui-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>O Material-UI foi projetado em base com garantias de renderiza\xe7\xe3o no servidor, mas cabe a voc\xea certificar-se de que ele ser\xe1 integrado corretamente. \xc9 importante fornecer a p\xe1gina com o CSS necess\xe1rio, caso contr\xe1rio a p\xe1gina ir\xe1 renderizar somente o HTML at\xe9 o CSS ser injetado pelo cliente, causando uma tremula\xe7\xe3o (FOUC). Para injetar o estilo no cliente, precisamos:</p>\n<ol>\n<li>Create a fresh, new <a href="https://emotion.sh/docs/@emotion/cache"><code>emotion cache</code></a> instance on every request.</li>\n<li>Renderize a \xe1rvore React com o coletor do lado do servidor.</li>\n<li>Capture o CSS.</li>\n<li>Passe o CSS junto ao cliente.</li>\n</ol>\n<p>On the client-side, the CSS will be injected a second time before removing the server-side injected CSS.</p>\n<h2 id="setting-up">Setting up<a aria-labelledby="setting-up" class="anchor-link-style" href="#setting-up" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>No passo a passo a seguir, vamos ver como configurar a renderiza\xe7\xe3o do lado do servidor.</p>\n<h3 id="the-theme">O tema<a aria-labelledby="the-theme" class="anchor-link-style" href="#the-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Crie um tema que ser\xe1 compartilhado entre o cliente e o servidor:</p>\n<p><code>theme.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> red <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/colors/red\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Cria a inst\xe2ncia do tema.</span>\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#556cd6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">secondary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#19857b\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> red<span class="token punctuation">.</span> <span class="token constant">A400</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> theme<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-server-side">O lado do servidor<a aria-labelledby="the-server-side" class="anchor-link-style" href="#the-server-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A seguir um esbo\xe7o para o aspecto do que o servidor deve lidar. We are going to set up an <a href="https://expressjs.com/en/guide/using-middleware.html">Express middleware</a> using <a href="https://expressjs.com/en/api.html">app.use</a> to handle all requests that come into the server. If you&#39;re unfamiliar with Express or middleware, know that the <code>handleRender</code> function will be called every time the server receives a request.</p>\n<p><code>server.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Vamos preench\xea-las nas se\xe7\xf5es a seguir.</span>\n<span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Isso \xe9 acionado toda vez que o servidor recebe uma solicita\xe7\xe3o.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="handling-the-request">### Manipulando as requests<a aria-labelledby="handling-the-request" class="anchor-link-style" href="#handling-the-request" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A primeira coisa que n\xf3s precisamos fazer em cada request \xe9 criar um novo <code>emotion cache</code>.</p>\n<p>When rendering, we will wrap <code>App</code>, the root component, inside a <a href="https://emotion.sh/docs/cache-provider"><code>CacheProvider</code></a> and <a href="/pt/system/styles/api/#themeprovider"><code>ThemeProvider</code></a> to make the style configuration and the <code>theme</code> available to all components in the component tree.</p>\n<p>The key step in server-side rendering is to render the initial HTML of the component <strong>before</strong> we send it to the client-side. Para fazer isso, usamos <a href="https://reactjs.org/docs/react-dom-server.html">ReactDOMServer.renderToString()</a>.</p>\n<p>MUI is using Emotion as its default styled engine. We need to extract the styles from the Emotion instance. For this, we need to share the same cache configuration for both the client and server:</p>\n<p><code>getCache.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  cache<span class="token punctuation">.</span>compat <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> cache<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>With this we are creating a new Emotion cache instance and using this to extract the critical styles for the html as well.</p>\n<p>Vamos ver como isso \xe9 passado na fun\xe7\xe3o <code>renderFullPage</code>.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionServer <span class="token keyword">from</span> <span class="token string">\'@emotion/server/create-instance\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> getCache <span class="token keyword">from</span> <span class="token string">\'./getCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> extractCriticalToChunks<span class="token punctuation">,</span> constructStyleTagsFromChunks <span class="token punctuation">}</span> <span class="token operator">=</span>\n    <span class="token function">createEmotionServer</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Render the component to a string.</span>\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Grab the CSS from emotion</span>\n  <span class="token keyword">const</span> emotionChunks <span class="token operator">=</span> <span class="token function">extractCriticalToChunks</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> emotionCss <span class="token operator">=</span> <span class="token function">constructStyleTagsFromChunks</span><span class="token punctuation">(</span>emotionChunks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send the rendered page back to the client.</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderFullPage</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> emotionCss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">\'/build\'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">\'build\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="inject-initial-component-html-and-css">Inject initial component HTML and CSS<a aria-labelledby="inject-initial-component-html-and-css" class="anchor-link-style" href="#inject-initial-component-html-and-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client-side.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;!DOCTYPE html>\n    &lt;html>\n      &lt;head>\n        &lt;title>My page&lt;/title>\n        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>css<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n        &lt;meta name="viewport" content="initial-scale=1, width=device-width" />\n        &lt;link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap" />\n      &lt;/head>\n      &lt;body>\n        &lt;div id="root"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>\n      &lt;/body>\n    &lt;/html>\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-client-side">The client-side<a aria-labelledby="the-client-side" class="anchor-link-style" href="#the-client-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The client-side is straightforward. All we need to do is use the same cache configuration as the server-side. Vamos dar uma olhada no arquivo do cliente:</p>\n<p><code>client.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> getCache <span class="token keyword">from</span> <span class="token string">\'./getCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getCache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> ReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="reference-implementations">Implementa\xe7\xf5es de refer\xeancia<a aria-labelledby="reference-implementations" class="anchor-link-style" href="#reference-implementations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We host different reference implementations which you can find in the <a href="https://github.com/mui/material-ui">GitHub repository</a> under the <a href="https://github.com/mui/material-ui/tree/HEAD/examples"><code>/examples</code></a> folder:</p>\n<ul>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/ssr">A implementa\xe7\xe3o de refer\xeancia deste tutorial</a></li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/gatsby">Gatsby</a></li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/nextjs">Next.js</a> (<a href="https://github.com/mui/material-ui/tree/HEAD/examples/nextjs-with-typescript">TypeScript version</a>)</li>\n</ul>\n<h2 id="troubleshooting">Resolu\xe7\xe3o de problemas<a aria-labelledby="troubleshooting" class="anchor-link-style" href="#troubleshooting" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Check out the FAQ answer: <a href="/pt/material-ui/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server">My App doesn&#39;t render correctly on the server</a>.</p>\n'],toc:[{text:"Material-UI no servidor",level:2,hash:"mui-on-the-server",children:[]},{text:"Setting up",level:2,hash:"setting-up",children:[{text:"O tema",level:3,hash:"the-theme"},{text:"O lado do servidor",level:3,hash:"the-server-side"},{text:"### Manipulando as requests",level:3,hash:"handling-the-request"},{text:"Inject initial component HTML and CSS",level:3,hash:"inject-initial-component-html-and-css"},{text:"The client-side",level:3,hash:"the-client-side"}]},{text:"Implementa\xe7\xf5es de refer\xeancia",level:2,hash:"reference-implementations",children:[]},{text:"Resolu\xe7\xe3o de problemas",level:2,hash:"troubleshooting",children:[]}],title:"Renderiza\xe7\xe3o no servidor",headers:{components:[]}},zh:{description:"\u670d\u52a1\u5668\u7aef\u5448\u73b0\u7684\u6700\u5e38\u89c1\u7528\u4f8b\u662f\u5728\u7528\u6237\uff08\u6216\u641c\u7d22\u5f15\u64ce\u722c\u866b\uff09\u9996\u6b21\u8bf7\u6c42\u60a8\u7684\u5e94\u7528\u65f6\u5904\u7406\u521d\u6b21\u6e32\u67d3\u3002",location:"/docs/data/material/guides/server-rendering/server-rendering-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>\u670d\u52a1\u7aef\u6e32\u67d3</h1><p class="description">\u670d\u52a1\u5668\u7aef\u5448\u73b0\u7684\u6700\u5e38\u89c1\u7528\u4f8b\u662f\u5728\u7528\u6237\uff08\u6216\u641c\u7d22\u5f15\u64ce\u722c\u866b\uff09\u9996\u6b21\u8bf7\u6c42\u60a8\u7684\u5e94\u7528\u65f6\u5904\u7406\u521d\u6b21\u6e32\u67d3\u3002</p>\n\n<p>\u5f53\u670d\u52a1\u5668\u6536\u5230\u8bf7\u6c42\u65f6\uff0c\u5b83\u4f1a\u5c06\u6240\u9700\u7684\u7ec4\u4ef6\u5448\u73b0\u4e3a HTML \u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u5176\u4f5c\u4e3a\u54cd\u5e94\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002 \u4ece\u90a3\u65f6\u8d77\uff0c\u5ba2\u6237\u7aef\u5c06\u63a5\u7ba1\u6e32\u67d3\u7684\u804c\u8d23\u3002</p>\n<h2 id="mui-on-the-server">\u5728\u670d\u52a1\u5668\u7aef\u7684 Material-UI<a aria-labelledby="mui-on-the-server" class="anchor-link-style" href="#mui-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>MUI was designed from the ground-up with the constraint of rendering on the server, but it&#39;s up to you to make sure it&#39;s correctly integrated. \u4e3a\u9875\u9762\u63d0\u4f9b\u6240\u9700\u7684 CSS \u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u5426\u5219\u9875\u9762\u53ea\u4f1a\u6e32\u67d3 HTML \u800c\u7b49\u5f85\u5ba2\u6237\u7aef\u6ce8\u5165 CSS\uff0c\u4ece\u800c\u5bfc\u81f4\u6d4f\u89c8\u5668\u6837\u5f0f\u95ea\u70c1\uff08FOUC\uff09\u3002 It&#39;s important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC). \u82e5\u60f3\u5c06\u6837\u5f0f\u6ce8\u5165\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u9700\u8981\uff1a</p>\n<ol>\n<li>Create a fresh, new <a href="https://emotion.sh/docs/@emotion/cache"><code>emotion cache</code></a> instance on every request.</li>\n<li>\u7528\u670d\u52a1\u7aef\u6536\u96c6\u5668\u6e32\u67d3 React \u6811\u7ec4\u4ef6\u3002</li>\n<li>\u5c06 CSS \u5355\u72ec\u62ff\u51fa\u3002</li>\n<li>\u5c06 CSS \u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\u3002</li>\n</ol>\n<p>On the client-side, the CSS will be injected a second time before removing the server-side injected CSS.</p>\n<h2 id="setting-up">Setting up<a aria-labelledby="setting-up" class="anchor-link-style" href="#setting-up" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u5728\u4e0b\u9762\u7684\u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u8bbe\u7f6e\u670d\u52a1\u5668\u7aef\u7684\u6e32\u67d3\u3002</p>\n<h3 id="the-theme">\u4e3b\u9898<a aria-labelledby="the-theme" class="anchor-link-style" href="#the-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u521b\u5efa\u4e00\u4e2a\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u4e4b\u95f4\u5171\u4eab\u7684\u4e3b\u9898\uff1a</p>\n<p><code>theme.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> red <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/colors\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create a theme instance.</span>\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#556cd6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">secondary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#19857b\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> red<span class="token punctuation">.</span><span class="token constant">A400</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> theme<span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> red <span class="token keyword">from</span> <span class="token string">\'@mui/core/colors/red\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// \u521b\u5efa\u4e00\u4e2a\u4e3b\u9898\u7684\u5b9e\u4f8b\u3002</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-server-side">\u670d\u52a1\u5668\u7aef<a aria-labelledby="the-server-side" class="anchor-link-style" href="#the-server-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u4e0b\u9762\u7684\u5927\u7eb2\u53ef\u4ee5\u5927\u81f4\u5c55\u73b0\u4e00\u4e0b\u670d\u52a1\u5668\u7aef\u3002 We are going to set up an <a href="https://expressjs.com/en/guide/using-middleware.html">Express middleware</a> using <a href="https://expressjs.com/en/api.html">app.use</a> to handle all requests that come into the server. If you&#39;re unfamiliar with Express or middleware, know that the <code>handleRender</code> function will be called every time the server receives a request. If you&#39;re unfamiliar with Express or middleware, know that the <code>handleRender</code> function will be called every time the server receives a request. If you&#39;re unfamiliar with Express or middleware, know that the <code>handleRender</code> function will be called every time the server receives a request.</p>\n<p><code>server.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// \u6211\u4eec\u5c06\u5728\u7ae0\u8282\u4e2d\u586b\u5199\u8fd9\u4e9b\u9700\u8981\u9075\u5b88\u7684\u5185\u5bb9\u3002</span>\n<span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// \u6bcf\u5f53\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u8fd9\u4e2a\u529f\u80fd\u5c31\u4f1a\u88ab\u89e6\u53d1\u3002</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="handling-the-request">Handling the request<a aria-labelledby="handling-the-request" class="anchor-link-style" href="#handling-the-request" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The first thing that we need to do on every request is to create a new <code>emotion cache</code>.</p>\n<p>When rendering, we will wrap <code>App</code>, the root component, inside a <a href="https://emotion.sh/docs/cache-provider"><code>CacheProvider</code></a> and <a href="/zh/system/styles/api/#themeprovider"><code>ThemeProvider</code></a> to make the style configuration and the <code>theme</code> available to all components in the component tree.</p>\n<p>The key step in server-side rendering is to render the initial HTML of the component <strong>before</strong> we send it to the client-side. \u6211\u4eec\u7528 <a href="https://reactjs.org/docs/react-dom-server.html">ReactDOMServer.renderToString()</a> \u6765\u5b9e\u73b0\u6b64\u64cd\u4f5c\u3002 \u6211\u4eec\u7528 <a href="https://reactjs.org/docs/react-dom-server.html">ReactDOMServer.renderToString()</a> \u6765\u5b9e\u73b0\u6b64\u64cd\u4f5c\u3002</p>\n<p>MUI is using Emotion as its default styled engine. We need to extract the styles from the Emotion instance. The client-side is straightforward. All we need to do is use the same cache configuration as the server-side. \u8ba9\u6211\u4eec\u6765\u770b\u770b\u5ba2\u6237\u7aef\u7684\u6587\u4ef6\uff1a</p>\n<p><code>getCache.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  cache<span class="token punctuation">.</span>compat <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> cache<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>With this we are creating a new Emotion cache instance and using this to extract the critical styles for the html as well.</p>\n<p>\u6211\u4eec\u5c06\u770b\u5230\u5728 <code>renderFullPage</code> \u51fd\u6570\u4e2d\uff0c\u662f\u5982\u4f55\u4f20\u9012\u8fd9\u4e9b\u4fe1\u606f\u7684\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@mui/material/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionServer <span class="token keyword">from</span> <span class="token string">\'@emotion/server/create-instance\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionCache <span class="token keyword">from</span> <span class="token string">\'./createEmotionCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createEmotionCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> extractCriticalToChunks<span class="token punctuation">,</span> constructStyleTagsFromChunks <span class="token punctuation">}</span> <span class="token operator">=</span>\n    <span class="token function">createEmotionServer</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Render the component to a string.</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Grab the CSS from emotion</span>\n  <span class="token keyword">const</span> emotionChunks <span class="token operator">=</span> <span class="token function">extractCriticalToChunks</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> emotionCss <span class="token operator">=</span> <span class="token function">constructStyleTagsFromChunks</span><span class="token punctuation">(</span>emotionChunks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send the rendered page back to the client.</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderFullPage</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> emotionCss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">\'/build\'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">\'build\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@mui/core/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionServer <span class="token keyword">from</span> <span class="token string">\'@emotion/server/create-instance\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> getCache <span class="token keyword">from</span> <span class="token string">\'./getCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> extractCriticalToChunks<span class="token punctuation">,</span> constructStyleTagsFromChunks <span class="token punctuation">}</span> <span class="token operator">=</span>\n    <span class="token function">createEmotionServer</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u5c06\u7ec4\u4ef6\u6e32\u67d3\u6210\u5b57\u7b26\u4e32\u3002 */}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Grab the CSS from emotion</span>\n  <span class="token keyword">const</span> emotionChunks <span class="token operator">=</span> <span class="token function">extractCriticalToChunks</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> emotionCss <span class="token operator">=</span> <span class="token function">constructStyleTagsFromChunks</span><span class="token punctuation">(</span>emotionChunks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send the rendered page back to the client.</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderFullPage</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> emotionCss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">\'/build\'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">\'build\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="inject-initial-component-html-and-css">Inject initial component HTML and CSS<a aria-labelledby="inject-initial-component-html-and-css" class="anchor-link-style" href="#inject-initial-component-html-and-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client-side.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;!DOCTYPE html>\n    &lt;html>\n      &lt;head>\n        &lt;title>My page&lt;/title>\n        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>css<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n        &lt;meta name="viewport" content="initial-scale=1, width=device-width" />\n        &lt;link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap" />\n      &lt;/head>\n      &lt;body>\n        &lt;div id="root"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>\n      &lt;/body>\n    &lt;/html>\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-client-side">The client-side<a aria-labelledby="the-client-side" class="anchor-link-style" href="#the-client-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The client-side is straightforward. All we need to do is use the same cache configuration as the server-side. Let&#39;s take a look at the client file:</p>\n<p><code>client.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@mui/core/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> getCache <span class="token keyword">from</span> <span class="token string">\'./getCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getCache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Grab the CSS from emotion</span>\n  <span class="token keyword">const</span> emotionChunks <span class="token operator">=</span> <span class="token function">extractCriticalToChunks</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> emotionCss <span class="token operator">=</span> <span class="token function">constructStyleTagsFromChunks</span><span class="token punctuation">(</span>emotionChunks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send the rendered page back to the client.</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderFullPage</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> emotionCss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">\'/build\'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">\'build\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="reference-implementations">\u53c2\u8003\u5b9e\u73b0<a aria-labelledby="reference-implementations" class="anchor-link-style" href="#reference-implementations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We host different reference implementations which you can find in the <a href="https://github.com/mui/material-ui">GitHub repository</a> under the <a href="https://github.com/mui/material-ui/tree/HEAD/examples"><code>/examples</code></a> folder:</p>\n<ul>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/ssr">\u672c\u6559\u7a0b\u7684\u53c2\u8003\u5b9e\u73b0</a></li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/gatsby">Gatsby</a></li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/examples/nextjs">Next.js</a> (<a href="https://github.com/mui/material-ui/tree/HEAD/examples/nextjs-with-typescript">TypeScript version</a>)</li>\n</ul>\n<h2 id="troubleshooting">\u6545\u969c\u6392\u9664\uff08Troubleshooting\uff09<a aria-labelledby="troubleshooting" class="anchor-link-style" href="#troubleshooting" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Check out the FAQ answer: <a href="/zh/material-ui/getting-started/faq/#my-app-doesnt-render-correctly-on-the-server">My App doesn&#39;t render correctly on the server</a>.</p>\n'],toc:[{text:"\u5728\u670d\u52a1\u5668\u7aef\u7684 Material-UI",level:2,hash:"mui-on-the-server",children:[]},{text:"Setting up",level:2,hash:"setting-up",children:[{text:"\u4e3b\u9898",level:3,hash:"the-theme"},{text:"\u670d\u52a1\u5668\u7aef",level:3,hash:"the-server-side"},{text:"Handling the request",level:3,hash:"handling-the-request"},{text:"Inject initial component HTML and CSS",level:3,hash:"inject-initial-component-html-and-css"},{text:"The client-side",level:3,hash:"the-client-side"}]},{text:"\u53c2\u8003\u5b9e\u73b0",level:2,hash:"reference-implementations",children:[]},{text:"\u6545\u969c\u6392\u9664\uff08Troubleshooting\uff09",level:2,hash:"troubleshooting",children:[]}],title:"\u670d\u52a1\u7aef\u6e32\u67d3",headers:{components:[]}}},o={},c={},l=a(824246);function i(){return t||(t=(0,l.jsx)(e.Z,{demos:o,docs:p,demoComponents:c}))}},936446:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/guides/server-rendering",function(){return a(585482)}])}},function(n){n.O(0,[75760,31194,91642,35408,85992,51588,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,49774,92888,40179],(function(){return s=936446,n(n.s=s);var s}));var s=n.O();_N_E=s}]);