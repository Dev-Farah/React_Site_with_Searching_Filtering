(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[49811],{499717:function(n,e,a){"use strict";a.r(e),a.d(e,{default:function(){return Ne}});var t,o,l,s=a(827378),i=a(494616),r=a(375205),p=a(267414),d=a(824246);var c,u,m,h,f,x,b=a(25778);var g,v,k,y,F,C,T,w,I,j,S,M,P,B,V,Z=a(768913),z=[{value:"USD",label:"$"},{value:"EUR",label:"\u20ac"},{value:"BTC",label:"\u0e3f"},{value:"JPY",label:"\xa5"}];var A,L,R,H,q,W,O=a(683990),N=a(617446),U=a(847635),D=a(828996),E=a(712905);var $,K,_,Y,G,J,X,Q,nn,en,an,tn,on,ln,sn,rn,pn,dn,cn,un,mn,hn,fn,xn,bn,gn,vn,kn=a(957379),yn=a(295649),Fn=a(62072),Cn=a(662374),Tn=a(231548),wn=a(336146),In=a(987970),jn=a(827108);var Sn,Mn,Pn,Bn,Vn,Zn,zn,An,Ln,Rn,Hn,qn,Wn,On,Nn,Un,Dn,En,$n,Kn,_n,Yn,Gn,Jn,Xn=a(568075);function Qn(){return(0,d.jsx)(r.Z,{sx:{height:20,backgroundColor:function(n){return"light"===n.palette.mode?"rgba(255, 0, 0, 0.1)":"rgb(255 132 132 / 25%)"}}})}var ne,ee,ae,te={"aria-label":"description"};var oe,le,se,ie=a(290763),re=a(240120),pe=a(380602),de=(0,ie.ZP)(p.Z)({"& label.Mui-focused":{color:"green"},"& .MuiInput-underline:after":{borderBottomColor:"green"},"& .MuiOutlinedInput-root":{"& fieldset":{borderColor:"red"},"&:hover fieldset":{borderColor:"yellow"},"&.Mui-focused fieldset":{borderColor:"green"}}}),ce=(0,ie.ZP)(pe.ZP)((function(n){var e=n.theme;return{"label + &":{marginTop:e.spacing(3)},"& .MuiInputBase-input":{borderRadius:4,position:"relative",backgroundColor:"light"===e.palette.mode?"#fcfcfb":"#2b2b2b",border:"1px solid #ced4da",fontSize:16,width:"auto",padding:"10px 12px",transition:e.transitions.create(["border-color","background-color","box-shadow"]),fontFamily:["-apple-system","BlinkMacSystemFont",'"Segoe UI"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"'].join(","),"&:focus":{boxShadow:"".concat((0,re.Fq)(e.palette.primary.main,.25)," 0 0 0 0.2rem"),borderColor:e.palette.primary.main}}}})),ue=(0,ie.ZP)((function(n){return(0,d.jsx)(p.Z,(0,yn.Z)({InputProps:{disableUnderline:!0}},n))}))((function(n){var e=n.theme;return{"& .MuiFilledInput-root":{border:"1px solid #e2e2e1",overflow:"hidden",borderRadius:4,backgroundColor:"light"===e.palette.mode?"#fcfcfb":"#2b2b2b",transition:e.transitions.create(["border-color","background-color","box-shadow"]),"&:hover":{backgroundColor:"transparent"},"&.Mui-focused":{backgroundColor:"transparent",boxShadow:"".concat((0,re.Fq)(e.palette.primary.main,.25)," 0 0 0 2px"),borderColor:e.palette.primary.main}}}})),me=(0,ie.ZP)(p.Z)({"& input:valid + fieldset":{borderColor:"green",borderWidth:2},"& input:invalid + fieldset":{borderColor:"red",borderWidth:2},"& input:valid:focus + fieldset":{borderLeftWidth:6,padding:"4px !important"}});var he,fe,xe,be=a(709497),ge=a(610870),ve=a(542255),ke=a(770154),ye=a(314684);var Fe,Ce,Te,we,Ie,je,Se=a(760163);function Me(){var n=((0,Se.Z)()||{}).focused,e=s.useMemo((function(){return n?"This field is being focused":"Helper text"}),[n]);return(0,d.jsx)(wn.Z,{children:e})}var Pe,Be=a(481936),Ve=a(825707),Ze=a(362740),ze=["onChange"],Ae=["onChange"],Le=s.forwardRef((function(n,e){var a=n.onChange,t=(0,Be.Z)(n,ze);return(0,d.jsx)(Ve.oc,(0,yn.Z)((0,yn.Z)({},t),{},{mask:"(#00) 000-0000",definitions:{"#":/[1-9]/},inputRef:e,onAccept:function(e){return a({target:{name:n.name,value:e}})},overwrite:!0}))})),Re=s.forwardRef((function(n,e){var a=n.onChange,t=(0,Be.Z)(n,Ae);return(0,d.jsx)(Ze.Z,(0,yn.Z)((0,yn.Z)({},t),{},{getInputRef:e,onValueChange:function(e){a({target:{name:n.name,value:e.value}})},thousandSeparator:!0,isNumericString:!0,prefix:"$"}))}));var He,qe={en:{description:"Text fields let users enter and edit text.",location:"/docs/data/material/components/text-fields/text-fields.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Text Field</h1><p class="description">Text fields let users enter and edit text.</p>\n\n<p>Text fields allow users to enter text into a UI. They typically appear in forms and dialogs.</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="basic-textfield">Basic TextField<a aria-labelledby="basic-textfield" class="anchor-link-style" href="#basic-textfield" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>TextField</code> wrapper component is a complete form control including a label, input, and help text.\nIt comes with three variants: outlined (default), filled, and standard.</p>\n',{demo:"BasicTextFields.js"},'<p><strong>Note:</strong> The standard variant of the <code>TextField</code> is no longer documented in the <a href="https://material.io/" target="_blank" rel="noopener nofollow">Material Design guidelines</a>\n(<a href="https://medium.com/google-design/the-evolution-of-material-designs-text-fields-603688b3fe03">here&#39;s why</a>),\nbut MUI will continue to support it.</p>\n<h2 id="form-props">Form props<a aria-labelledby="form-props" class="anchor-link-style" href="#form-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Standard form attributes are supported e.g. <code>required</code>, <code>disabled</code>, <code>type</code>, etc. as well as a <code>helperText</code> which is used to give context about a field&#39;s input, such as how the input will be used.</p>\n',{demo:"FormPropsTextFields.js"},'<h2 id="validation">Validation<a aria-labelledby="validation" class="anchor-link-style" href="#validation" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>error</code> prop toggles the error state.\nThe <code>helperText</code> prop can then be used to provide feedback to the user about the error.</p>\n',{demo:"ValidationTextFields.js"},'<h2 id="multiline">Multiline<a aria-labelledby="multiline" class="anchor-link-style" href="#multiline" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>multiline</code> prop transforms the text field into a <a href="/material-ui/react-textarea-autosize/">TextareaAutosize</a> element.\nUnless the <code>rows</code> prop is set, the height of the text field dynamically matches its content (using <a href="/material-ui/react-textarea-autosize/">TextareaAutosize</a>).\nYou can use the <code>minRows</code> and <code>maxRows</code> props to bound it.</p>\n',{demo:"MultilineTextFields.js"},'<h2 id="select">Select<a aria-labelledby="select" class="anchor-link-style" href="#select" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>select</code> prop makes the text field use the <a href="/material-ui/react-select/">Select</a> component internally.</p>\n',{demo:"SelectTextFields.js"},'<h2 id="icons">Icons<a aria-labelledby="icons" class="anchor-link-style" href="#icons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>There are multiple ways to display an icon with a text field.</p>\n',{demo:"InputWithIcon.js"},'<h3 id="input-adornments">Input Adornments<a aria-labelledby="input-adornments" class="anchor-link-style" href="#input-adornments" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The main way is with an <code>InputAdornment</code>.\nThis can be used to add a prefix, a suffix, or an action to an input.\nFor instance, you can use an icon button to hide or reveal the password.</p>\n',{demo:"InputAdornments.js"},'<h2 id="sizes">Sizes<a aria-labelledby="sizes" class="anchor-link-style" href="#sizes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Fancy smaller inputs? Use the <code>size</code> prop.</p>\n',{demo:"TextFieldSizes.js"},"<p>The <code>filled</code> variant input height can be further reduced by rendering the label outside of it.</p>\n",{demo:"TextFieldHiddenLabel.js"},'<h2 id="margin">Margin<a aria-labelledby="margin" class="anchor-link-style" href="#margin" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>margin</code> prop can be used to alter the vertical spacing of the text field.\nUsing <code>none</code> (default) doesn&#39;t apply margins to the <code>FormControl</code> whereas <code>dense</code> and <code>normal</code> do.</p>\n',{demo:"LayoutTextFields.js"},'<h2 id="full-width">Full width<a aria-labelledby="full-width" class="anchor-link-style" href="#full-width" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>fullWidth</code> can be used to make the input take up the full width of its container.</p>\n',{demo:"FullWidthTextField.js"},'<h2 id="uncontrolled-vs-controlled">Uncontrolled vs. Controlled<a aria-labelledby="uncontrolled-vs-controlled" class="anchor-link-style" href="#uncontrolled-vs-controlled" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component can be controlled or uncontrolled.</p>\n',{demo:"StateTextFields.js"},'<h2 id="components">Components<a aria-labelledby="components" class="anchor-link-style" href="#components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>TextField</code> is composed of smaller components (\n<a href="/material-ui/api/form-control/"><code>FormControl</code></a>,\n<a href="/material-ui/api/input/"><code>Input</code></a>,\n<a href="/material-ui/api/filled-input/"><code>FilledInput</code></a>,\n<a href="/material-ui/api/input-label/"><code>InputLabel</code></a>,\n<a href="/material-ui/api/outlined-input/"><code>OutlinedInput</code></a>,\nand <a href="/material-ui/api/form-helper-text/"><code>FormHelperText</code></a>\n) that you can leverage directly to significantly customize your form inputs.</p>\n<p>You might also have noticed that some native HTML input properties are missing from the <code>TextField</code> component.\nThis is on purpose.\nThe component takes care of the most used properties.\nThen, it&#39;s up to the user to use the underlying component shown in the following demo. Still, you can use <code>inputProps</code> (and <code>InputProps</code>, <code>InputLabelProps</code> properties) if you want to avoid some boilerplate.</p>\n',{demo:"ComposedTextField.js"},'<h2 id="inputs">Inputs<a aria-labelledby="inputs" class="anchor-link-style" href="#inputs" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"Inputs.js"},'<h2 id="color">Color<a aria-labelledby="color" class="anchor-link-style" href="#color" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>color</code> prop changes the highlight color of the text field when focused.</p>\n',{demo:"ColorTextFields.js"},'<h2 id="customization">Customization<a aria-labelledby="customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Here are some examples of customizing the component.\nYou can learn more about this in the <a href="/material-ui/customization/how-to-customize/">overrides documentation page</a>.</p>\n',{demo:"CustomizedInputs.js"},'<p>Customization does not stop at CSS.\nYou can use composition to build custom components and give your app a unique feel.\nBelow is an example using the <a href="/material-ui/api/input-base/"><code>InputBase</code></a> component, inspired by Google Maps.</p>\n',{demo:"CustomizedInputBase.js",bg:!0},'<p>\ud83c\udfa8 If you are looking for inspiration, you can check <a href="https://mui-treasury.com/styles/text-field/">MUI Treasury&#39;s customization examples</a>.</p>\n<h2 id="useformcontrol"><code>useFormControl</code><a aria-labelledby="useformcontrol" class="anchor-link-style" href="#useformcontrol" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For advanced customization use cases, a <code>useFormControl()</code> hook is exposed.\nThis hook returns the context value of the parent <code>FormControl</code> component.</p>\n<p><strong>API</strong></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useFormControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/FormControl\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Returns</strong></p>\n<p><code>value</code> (<em>object</em>):</p>\n<ul>\n<li><code>value.adornedStart</code> (<em>bool</em>): Indicate whether the child <code>Input</code> or <code>Select</code> component has a start adornment.</li>\n<li><code>value.setAdornedStart</code> (<em>func</em>): Setter function for <code>adornedStart</code> state value.</li>\n<li><code>value.color</code> (<em>string</em>): The theme color is being used, inherited from <code>FormControl</code> <code>color</code> prop .</li>\n<li><code>value.disabled</code> (<em>bool</em>): Indicate whether the component is being displayed in a disabled state, inherited from <code>FormControl</code> <code>disabled</code> prop.</li>\n<li><code>value.error</code> (<em>bool</em>): Indicate whether the component is being displayed in an error state, inherited from <code>FormControl</code> <code>error</code> prop</li>\n<li><code>value.filled</code> (<em>bool</em>): Indicate whether input is filled</li>\n<li><code>value.focused</code> (<em>bool</em>): Indicate whether the component and its children are being displayed in a focused state</li>\n<li><code>value.fullWidth</code> (<em>bool</em>): Indicate whether the component is taking up the full width of its container, inherited from <code>FormControl</code> <code>fullWidth</code> prop</li>\n<li><code>value.hiddenLabel</code> (<em>bool</em>): Indicate whether the label is being hidden, inherited from <code>FormControl</code> <code>hiddenLabel</code> prop</li>\n<li><code>value.required</code> (<em>bool</em>): Indicate whether the label is indicating that the input is required input, inherited from the <code>FormControl</code> <code>required</code> prop</li>\n<li><code>value.size</code> (<em>string</em>): The size of the component, inherited from the <code>FormControl</code> <code>size</code> prop</li>\n<li><code>value.variant</code> (<em>string</em>): The variant is being used by the <code>FormControl</code> component and its children, inherited from <code>FormControl</code> <code>variant</code> prop</li>\n<li><code>value.onBlur</code> (<em>func</em>): Should be called when the input is blurred</li>\n<li><code>value.onFocus</code> (<em>func</em>): Should be called when the input is focused</li>\n<li><code>value.onEmpty</code> (<em>func</em>): Should be called when the input is emptied</li>\n<li><code>value.onFilled</code> (<em>func</em>): Should be called when the input is filled</li>\n</ul>\n<p><strong>Example</strong></p>\n',{demo:"UseFormControl.js"},'<h2 id="limitations">Limitations<a aria-labelledby="limitations" class="anchor-link-style" href="#limitations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="shrink">Shrink<a aria-labelledby="shrink" class="anchor-link-style" href="#shrink" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The input label &quot;shrink&quot; state isn&#39;t always correct.\nThe input label is supposed to shrink as soon as the input is displaying something.\nIn some circumstances, we can&#39;t determine the &quot;shrink&quot; state (number input, datetime input, Stripe input). You might notice an overlap.</p>\n<p><img src="/static/images/text-fields/shrink.png" alt="shrink"></p>\n<p>To workaround the issue, you can force the &quot;shrink&quot; state of the label.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token attr-name">InputLabelProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">shrink</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>or</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputLabel</span></span> <span class="token attr-name">shrink</span><span class="token punctuation">></span></span>Count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">InputLabel</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="floating-label">Floating label<a aria-labelledby="floating-label" class="anchor-link-style" href="#floating-label" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The floating label is absolutely positioned.\nIt won&#39;t impact the layout of the page.\nMake sure that the input is larger than the label to display correctly.</p>\n<h3 id="type-quot-number-quot">type=&quot;number&quot;<a aria-labelledby="type-quot-number-quot" class="anchor-link-style" href="#type-quot-number-quot" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Inputs of type=&quot;number&quot; have potential usability issues:</p>\n<ul>\n<li>Allowing certain non-numeric characters (&#39;e&#39;, &#39;+&#39;, &#39;-&#39;, &#39;.&#39;) and silently discarding others</li>\n<li>The functionality of scrolling to increment/decrement the number can cause accidental and hard-to-notice changes</li>\n</ul>\n<p>and more - see <a href="https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/">this article</a> by the GOV.UK Design System team for a more detailed explanation.</p>\n<p>For number validation, one viable alternative is to use the default input type=&quot;text&quot; with the <em>pattern</em> attribute, for example:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token attr-name">inputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">inputMode</span><span class="token operator">:</span> <span class="token string">\'numeric\'</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">\'[0-9]*\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>In the future, we might provide a <a href="https://github.com/mui/material-ui/issues/19154">number input component</a>.</p>\n<h3 id="helper-text">Helper text<a aria-labelledby="helper-text" class="anchor-link-style" href="#helper-text" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The helper text prop affects the height of the text field. If two text fields are placed side by side, one with a helper text and one without, they will have different heights. For example:</p>\n',{demo:"HelperTextMisaligned.js"},"<p>This can be fixed by passing a space character to the <code>helperText</code> prop:</p>\n",{demo:"HelperTextAligned.js"},'<h2 id="integration-with-3rd-party-input-libraries">Integration with 3rd party input libraries<a aria-labelledby="integration-with-3rd-party-input-libraries" class="anchor-link-style" href="#integration-with-3rd-party-input-libraries" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can use third-party libraries to format an input.\nYou have to provide a custom implementation of the <code>&lt;input&gt;</code> element with the <code>inputComponent</code> property.</p>\n<p>The following demo uses the <a href="https://github.com/uNmAnNeR/imaskjs">react-imask</a> and <a href="https://github.com/s-yadav/react-number-format">react-number-format</a> libraries. The same concept could be applied to <a href="https://github.com/mui/material-ui/issues/16037">e.g. react-stripe-element</a>.</p>\n',{demo:"FormattedInputs.js"},'<p>The provided input component should expose a ref with a value that implements the following interface:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">InputElement</span> <span class="token punctuation">{</span>\n  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  value<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> MyInputComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>other <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n  <span class="token comment">// implement `InputElement` interface</span>\n  React<span class="token punctuation">.</span><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">focus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// logic to focus the rendered component from 3rd party belongs here</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// hiding the value e.g. react-stripe-elements</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// `Component` will be your `SomeThirdPartyComponent` from below</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>other<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// usage</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span>\n  <span class="token attr-name">InputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">inputComponent</span><span class="token operator">:</span> MyInputComponent<span class="token punctuation">,</span>\n    <span class="token literal-property property">inputProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">component</span><span class="token operator">:</span> SomeThirdPartyComponent<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="accessibility">Accessibility<a aria-labelledby="accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>In order for the text field to be accessible, <strong>the input should be linked to the label and the helper text</strong>. The underlying DOM nodes should have this structure:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>We\'ll never share your email<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<ul>\n<li>If you are using the <code>TextField</code> component, you just have to provide a unique <code>id</code> unless you&#39;re using the <code>TextField</code> only client side.\nUntil the UI is hydrated <code>TextField</code> without an explicit <code>id</code> will not have associated labels.</li>\n<li>If you are composing the component:</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputLabel</span></span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">InputLabel</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormHelperText</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>We\'ll never share your email<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormHelperText</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="complementary-projects">Complementary projects<a aria-labelledby="complementary-projects" class="anchor-link-style" href="#complementary-projects" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For more advanced use cases, you might be able to take advantage of:</p>\n<ul>\n<li><a href="https://react-hook-form.com/">react-hook-form</a>: React hook for form validation.</li>\n<li><a href="https://github.com/dohomi/react-hook-form-mui">react-hook-form-mui</a>: MUI and react-hook-form combined.</li>\n<li><a href="https://github.com/stackworx/formik-mui">formik-material-ui</a>: Bindings for using MUI with <a href="https://formik.org/">formik</a>.</li>\n<li><a href="https://github.com/erikras/redux-form-material-ui">redux-form-material-ui</a>: Bindings for using MUI with <a href="https://redux-form.com/">Redux Form</a>.</li>\n<li><a href="https://github.com/lookfirst/mui-rff">mui-rff</a>: Bindings for using MUI with <a href="https://final-form.org/react">React Final Form</a>.</li>\n<li><a href="https://www.npmjs.com/package/@ui-schema/ds-material">@ui-schema/ds-material</a> Bindings for using Material UI with <a href="https://github.com/ui-schema/ui-schema">UI Schema</a>. JSON Schema compatible.</li>\n<li><a href="https://data-driven-forms.org/provided-mappers/mui-component-mapper">@data-driven-forms/mui-component-mapper</a>: Bindings for using Material UI with <a href="https://github.com/data-driven-forms/react-forms">Data Driven Forms</a>.</li>\n</ul>\n','<h2 id="unstyled">Unstyled<a aria-labelledby="unstyled" class="anchor-link-style" href="#unstyled" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component also comes with an <a href="/base/react-input/">unstyled version</a>. It&#39;s ideal for doing heavy customizations and minimizing bundle size.\n        </p>\n','<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/material-ui/api/filled-input/"><code>&lt;FilledInput /&gt;</code></a></li>\n<li><a href="/material-ui/api/form-control/"><code>&lt;FormControl /&gt;</code></a></li>\n<li><a href="/material-ui/api/form-helper-text/"><code>&lt;FormHelperText /&gt;</code></a></li>\n<li><a href="/material-ui/api/input/"><code>&lt;Input /&gt;</code></a></li>\n<li><a href="/material-ui/api/input-adornment/"><code>&lt;InputAdornment /&gt;</code></a></li>\n<li><a href="/material-ui/api/input-base/"><code>&lt;InputBase /&gt;</code></a></li>\n<li><a href="/material-ui/api/input-label/"><code>&lt;InputLabel /&gt;</code></a></li>\n<li><a href="/material-ui/api/outlined-input/"><code>&lt;OutlinedInput /&gt;</code></a></li>\n<li><a href="/material-ui/api/text-field/"><code>&lt;TextField /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"Basic TextField",level:2,hash:"basic-textfield",children:[]},{text:"Form props",level:2,hash:"form-props",children:[]},{text:"Validation",level:2,hash:"validation",children:[]},{text:"Multiline",level:2,hash:"multiline",children:[]},{text:"Select",level:2,hash:"select",children:[]},{text:"Icons",level:2,hash:"icons",children:[{text:"Input Adornments",level:3,hash:"input-adornments"}]},{text:"Sizes",level:2,hash:"sizes",children:[]},{text:"Margin",level:2,hash:"margin",children:[]},{text:"Full width",level:2,hash:"full-width",children:[]},{text:"Uncontrolled vs. Controlled",level:2,hash:"uncontrolled-vs-controlled",children:[]},{text:"Components",level:2,hash:"components",children:[]},{text:"Inputs",level:2,hash:"inputs",children:[]},{text:"Color",level:2,hash:"color",children:[]},{text:"Customization",level:2,hash:"customization",children:[]},{text:"useFormControl",level:2,hash:"useformcontrol",children:[]},{text:"Limitations",level:2,hash:"limitations",children:[{text:"Shrink",level:3,hash:"shrink"},{text:"Floating label",level:3,hash:"floating-label"},{text:"type=&quot;number&quot;",level:3,hash:"type-quot-number-quot"},{text:"Helper text",level:3,hash:"helper-text"}]},{text:"Integration with 3rd party input libraries",level:2,hash:"integration-with-3rd-party-input-libraries",children:[]},{text:"Accessibility",level:2,hash:"accessibility",children:[]},{text:"Complementary projects",level:2,hash:"complementary-projects",children:[]},{text:"Unstyled",level:2,hash:"unstyled",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"React Text Field component",headers:{product:"material-ui",title:"React Text Field component",components:["FilledInput","FormControl","FormHelperText","Input","InputAdornment","InputBase","InputLabel","OutlinedInput","TextField"],githubLabel:"component: text field",materialDesign:"https://material.io/components/text-fields",unstyled:"/base/react-input/"}},pt:{description:"Campos de texto permitem que os usu\xe1rios digitem e editem texto.",location:"/docs/data/material/components/text-fields/text-fields-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Text field</h1><p class="description">Campos de texto permitem que os usu\xe1rios digitem e editem texto.</p>\n\n<p><a href="https://material.io/design/components/text-fields.html" target="_blank" rel="noopener nofollow">Campos de texto</a> permitem que os usu\xe1rios insiram texto em uma interface de usu\xe1rio. Eles geralmente aparecem em formul\xe1rios e di\xe1logos.</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="basic-textfield">Basic TextField<a aria-labelledby="basic-textfield" class="anchor-link-style" href="#basic-textfield" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>TextField</code> wrapper component is a complete form control including a label, input, and help text. It comes with three variants: outlined (default), filled, and standard.</p>\n',{demo:"BasicTextFields.js"},'<p>Os atributos s\xe3o suportados pelo <code>TextField</code>, como por exemplo <code>required</code>, <code>disabled</code>, <code>type</code>, etc. assim como o <code>helperText</code> que \xe9 utilizada para dar contexto sobre um campo de entrada, tais como, a entrada que ser\xe1 usada.</p>\n<h2 id="form-props">Propriedades de formul\xe1rio<a aria-labelledby="form-props" class="anchor-link-style" href="#form-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Standard form attributes are supported e.g. <code>required</code>, <code>disabled</code>, <code>type</code>, etc. as well as a <code>helperText</code> which is used to give context about a field&#39;s input, such as how the input will be used.</p>\n',{demo:"FormPropsTextFields.js"},'<h2 id="validation">Valida\xe7\xe3o<a aria-labelledby="validation" class="anchor-link-style" href="#validation" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>error</code> prop toggles the error state. The <code>helperText</code> prop can then be used to provide feedback to the user about the error.</p>\n',{demo:"ValidationTextFields.js"},'<h2 id="multiline">Multilinha<a aria-labelledby="multiline" class="anchor-link-style" href="#multiline" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>multiline</code> prop transforms the text field into a <a href="/pt/material-ui/react-textarea-autosize/">TextareaAutosize</a> element. Unless the <code>rows</code> prop is set, the height of the text field dynamically matches its content (using <a href="/pt/material-ui/react-textarea-autosize/">TextareaAutosize</a>). You can use the &lt;code&gt;minRows</code> and <code>maxRows</code> props to bound it.</p>\n',{demo:"MultilineTextFields.js"},'<h2 id="select">Sele\xe7\xe3o<a aria-labelledby="select" class="anchor-link-style" href="#select" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>select</code> prop makes the text field use the <a href="/pt/material-ui/react-select/">Select</a> component internally.</p>\n',{demo:"SelectTextFields.js"},'<h2 id="icons">\xcdcones<a aria-labelledby="icons" class="anchor-link-style" href="#icons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>H\xe1 muitas formas de incluir um \xedcone com um campo de texto.</p>\n',{demo:"InputWithIcon.js"},'<h3 id="input-adornments">Adere\xe7os de campo<a aria-labelledby="input-adornments" class="anchor-link-style" href="#input-adornments" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A forma principal \xe9 utilizando um componente <code>InputAdornment</code>. This can be used to add a prefix, a suffix, or an action to an input. Por exemplo, voc\xea pode usar um bot\xe3o com \xedcone para ocultar ou revelar a senha.</p>\n',{demo:"InputAdornments.js"},'<h2 id="sizes">Tamanhos<a aria-labelledby="sizes" class="anchor-link-style" href="#sizes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Gosta mais de campos de texto menores? Use a propriedade <code>size</code>.</p>\n',{demo:"TextFieldSizes.js"},"<p>A altura do campo na variante <code>filled</code> pode ser reduzida ainda mais ao renderizar o r\xf3tulo fora dele.</p>\n",{demo:"TextFieldHiddenLabel.js"},'<h2 id="margin">Margin<a aria-labelledby="margin" class="anchor-link-style" href="#margin" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>margin</code> prop can be used to alter the vertical spacing of the text field. Using <code>none</code> (default) doesn&#39;t apply margins to the <code>FormControl</code> whereas <code>dense</code> and <code>normal</code> do.</p>\n',{demo:"LayoutTextFields.js"},'<h2 id="full-width">Largura total<a aria-labelledby="full-width" class="anchor-link-style" href="#full-width" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>A propriedade <code>fullWidth</code> pode ser usada para fazer com que o campo ocupe a largura total de seu cont\xeainer.</p>\n',{demo:"FullWidthTextField.js"},'<h2 id="uncontrolled-vs-controlled">Uncontrolled vs. Controlled<a aria-labelledby="uncontrolled-vs-controlled" class="anchor-link-style" href="#uncontrolled-vs-controlled" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>O componente pode ser controlado ou n\xe3o controlado.</p>\n',{demo:"StateTextFields.js"},'<h2 id="components">Componentes<a aria-labelledby="components" class="anchor-link-style" href="#components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>TextField</code> is composed of smaller components ( <a href="/pt/material-ui/api/form-control/"><code>FormControl</code></a>, <a href="/pt/material-ui/api/input/"><code>Input</code></a>, <a href="/pt/material-ui/api/filled-input/"><code>FilledInput</code></a>, <a href="/pt/material-ui/api/input-label/"><code>InputLabel</code></a>, <a href="/pt/material-ui/api/outlined-input/"><code>OutlinedInput</code></a>, and <a href="/pt/material-ui/api/form-helper-text/"><code>FormHelperText</code></a> ) that you can leverage directly to significantly customize your form inputs.</p>\n<p>Voc\xea tamb\xe9m pode ter notado que algumas propriedades de campo nativas do HTML input est\xe3o faltando no componente <code>TextField</code>. Isto \xe9 intencional. The component takes care of the most used properties. Then, it&#39;s up to the user to use the underlying component shown in the following demo. Ainda, voc\xea pode usar <code>inputProps</code> (<code>InputProps</code> e <code>InputLabelProps</code>) se voc\xea quiser evitar algum boilerplate.</p>\n',{demo:"ComposedTextField.js"},'<h2 id="inputs">Campos<a aria-labelledby="inputs" class="anchor-link-style" href="#inputs" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"Inputs.js"},'<h2 id="color">Cor<a aria-labelledby="color" class="anchor-link-style" href="#color" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>A propriedade <code>color</code> altera a cor do destaque do campo de texto quando focado.</p>\n',{demo:"ColorTextFields.js"},'<h2 id="customization">Campos customizados<a aria-labelledby="customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Aqui est\xe3o alguns exemplos de customiza\xe7\xe3o do componente. You can learn more about this in the <a href="/pt/material-ui/customization/how-to-customize/">overrides documentation page</a>.</p>\n',{demo:"CustomizedInputs.js"},'<p>Customization does not stop at CSS. You can use composition to build custom components and give your app a unique feel. Below is an example using the <a href="/pt/material-ui/api/input-base/"><code>InputBase</code></a> component, inspired by Google Maps.</p>\n',{demo:"CustomizedInputBase.js",bg:!0},'<p>\ud83c\udfa8 If you are looking for inspiration, you can check <a href="https://mui-treasury.com/styles/text-field/">MUI Treasury&#39;s customization examples</a>.</p>\n<h2 id="useformcontrol"><code>useFormControl</code><a aria-labelledby="useformcontrol" class="anchor-link-style" href="#useformcontrol" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For advanced customization use cases, a <code>useFormControl()</code> hook is exposed. This hook returns the context value of the parent <code>FormControl</code> component.</p>\n<p><strong>API</strong></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useFormControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/FormControl\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Retornos</strong></p>\n<p><code>value</code> (<em>object</em>):</p>\n<ul>\n<li><code>value.adornedStart</code> (<em>bool</em>): Indicate whether the child <code>Input</code> or <code>Select</code> component has a start adornment.</li>\n<li><code>value.setAdornedStart</code> (<em>func</em>): Setter function for <code>adornedStart</code> state value.</li>\n<li><code>value.color</code> (<em>string</em>): The theme color is being used, inherited from <code>FormControl</code> <code>color</code> prop .</li>\n<li><code>value.disabled</code> (<em>bool</em>): Indicate whether the component is being displayed in a disabled state, inherited from <code>FormControl</code> <code>disabled</code> prop.</li>\n<li><code>value.error</code> (<em>bool</em>): Indicate whether the component is being displayed in an error state, inherited from <code>FormControl</code> <code>error</code> prop</li>\n<li><code>value.filled</code> (<em>bool</em>): Indicate whether input is filled</li>\n<li><code>value.focused</code> (<em>bool</em>): Indicate whether the component and its children are being displayed in a focused state</li>\n<li><code>value.fullWidth</code> (<em>bool</em>): Indicate whether the component is taking up the full width of its container, inherited from <code>FormControl</code> <code>fullWidth</code> prop</li>\n<li><code>value.hiddenLabel</code> (<em>bool</em>): Indicate whether the label is being hidden, inherited from <code>FormControl</code> <code>hiddenLabel</code> prop</li>\n<li><code>value.required</code> (<em>bool</em>): Indicate whether the label is indicating that the input is required input, inherited from the <code>FormControl</code> <code>required</code> prop</li>\n<li><code>value.size</code> (<em>string</em>): The size of the component, inherited from the <code>FormControl</code> <code>size</code> prop</li>\n<li><code>value.variant</code> (<em>string</em>): The variant is being used by the <code>FormControl</code> component and its children, inherited from <code>FormControl</code> <code>variant</code> prop</li>\n<li><code>value.onBlur</code> (<em>func</em>): Should be called when the input is blurred</li>\n<li><code>value.onFocus</code> (<em>func</em>): Should be called when the input is focused</li>\n<li><code>value.onEmpty</code> (<em>func</em>): Should be called when the input is emptied</li>\n<li><code>value.onFilled</code> (<em>func</em>): Should be called when the input is filled</li>\n</ul>\n<p><strong>Exemplo</strong></p>\n',{demo:"UseFormControl.js"},'<h2 id="limitations">Limita\xe7\xf5es<a aria-labelledby="limitations" class="anchor-link-style" href="#limitations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="shrink">Shrink<a aria-labelledby="shrink" class="anchor-link-style" href="#shrink" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>O r\xf3tulo do campo no estado de &quot;shrink&quot;(recuo) nem sempre est\xe1 correto. O r\xf3tulo do campo deve recuar assim que o campo estiver exibindo algo. Em algumas circunst\xe2ncias, n\xe3o podemos determinar o estado de &quot;shrink&quot; (input num\xe9rico, input datetime, input Stripe). Voc\xea pode notar uma sobreposi\xe7\xe3o.</p>\n<p><img src="/static/images/text-fields/shrink.png" alt="shrink"></p>\n<p>Para contornar o problema, voc\xea pode for\xe7ar o &quot;shrink&quot; do r\xf3tulo.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token attr-name">InputLabelProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">shrink</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>ou</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputLabel</span></span> <span class="token attr-name">shrink</span><span class="token punctuation">></span></span>Contagem<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">InputLabel</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="floating-label">R\xf3tulo flutuante<a aria-labelledby="floating-label" class="anchor-link-style" href="#floating-label" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The floating label is absolutely positioned. It won&#39;t impact the layout of the page. Make sure that the input is larger than the label to display correctly.</p>\n<h3 id="type-quot-number-quot">type=&quot;number&quot;<a aria-labelledby="type-quot-number-quot" class="anchor-link-style" href="#type-quot-number-quot" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Campos com type=&quot;number&quot; tem problemas potenciais de usabilidade:</p>\n<ul>\n<li>Allowing certain non-numeric characters (&#39;e&#39;, &#39;+&#39;, &#39;-&#39;, &#39;.&#39;) and silently discarding others</li>\n<li>A funcionalidade de rolagem para incrementar/decrementar o n\xfamero, pode causar altera\xe7\xf5es acidentais dif\xedceis de notar</li>\n</ul>\n<p>e muito mais - consulte <a href="https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/">este artigo</a> da equipe GOV.UK Design System para obter uma explica\xe7\xe3o mais detalhada.</p>\n<p>Para valida\xe7\xe3o de n\xfamero, uma alternativa vi\xe1vel \xe9 usar o pad\xe3o de campo, type=&quot;text&quot;, com o atributo <em>pattern</em>, por exemplo:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token attr-name">inputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">inputMode</span><span class="token operator">:</span> <span class="token string">\'numeric\'</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">\'[0-9]*\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>No futuro, pretendemos fornecer um <a href="https://github.com/mui/material-ui/issues/19154">componente de campo n\xfamero</a>.</p>\n<h3 id="helper-text">Texto auxiliar<a aria-labelledby="helper-text" class="anchor-link-style" href="#helper-text" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A propriedade de texto auxiliar afeta a altura do campo de texto. Se dois campos de texto forem colocados lado a lado, um com um texto auxiliar e outro sem ele, ter\xe3o alturas diferentes. Por exemplo:</p>\n',{demo:"HelperTextMisaligned.js"},"<p>Isso pode ser corrigido passando um caractere de espa\xe7o para a propriedade <code>helperText</code>:</p>\n",{demo:"HelperTextAligned.js"},'<h2 id="integration-with-3rd-party-input-libraries">Integra\xe7\xe3o com bibliotecas de campo de terceiros<a aria-labelledby="integration-with-3rd-party-input-libraries" class="anchor-link-style" href="#integration-with-3rd-party-input-libraries" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Voc\xea pode usar bibliotecas de terceiros para formatar um campo. Voc\xea precisa fornecer uma implementa\xe7\xe3o personalizada do elemento <code>&lt;input&gt;</code> com a propriedade <code>inputComponent</code>.</p>\n<p>A seguinte demonstra\xe7\xe3o usa as bibliotecas <a href="https://github.com/text-mask/text-mask">react-text-mask</a> e <a href="https://github.com/s-yadav/react-number-format">react-number-format</a>. O mesmo conceito pode ser aplicado para, <a href="https://github.com/mui/material-ui/issues/16037">p. ex. react-stripe-element</a>.</p>\n',{demo:"FormattedInputs.js"},'<p>O componente de entrada fornecido deve expor um ref com um valor que implemente a seguinte interface:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">InputElement</span> <span class="token punctuation">{</span>\n  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  value<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> MyInputComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>other <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n  <span class="token comment">// implemente a interface`InputElement`</span>\n  React<span class="token punctuation">.</span><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">focus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// l\xf3gica para focar o componente de terceiro renderizado deve ser feita aqui</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ocultando o valor, por exemplo, react-stripe-elements</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// O `Component` abaixo ser\xe1 seu `AlgumComponenteDeTerceiro`</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>other<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// uso</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span>\n  <span class="token attr-name">InputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">inputComponent</span><span class="token operator">:</span> MyInputComponent<span class="token punctuation">,</span>\n    <span class="token literal-property property">inputProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">component</span><span class="token operator">:</span> SomeThirdPartyComponent<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="accessibility">Acessibilidade<a aria-labelledby="accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Para que o campo de texto seja acess\xedvel, <strong>o campo deve estar vinculado ao r\xf3tulo e ao texto auxiliar</strong>. Os n\xf3s DOM subjacentes devem ter essa estrutura:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Endere\xe7o de e<span class="token operator">-</span>mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token constant">N</span>\xf3s nunca compartilharemos seu e<span class="token operator">-</span>mail<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<ul>\n<li>If you are using the <code>TextField</code> component, you just have to provide a unique <code>id</code> unless you&#39;re using the <code>TextField</code> only client side. Until the UI is hydrated <code>TextField</code> without an explicit <code>id</code> will not have associated labels.</li>\n<li>If you are composing the component:</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Endere\xe7o de e<span class="token operator">-</span>mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token constant">N</span>\xf3s nunca compartilharemos seu e<span class="token operator">-</span>mail<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="complementary-projects">Projetos Complementares<a aria-labelledby="complementary-projects" class="anchor-link-style" href="#complementary-projects" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For more advanced use cases, you might be able to take advantage of:</p>\n<ul>\n<li><a href="https://react-hook-form.com/">react-hook-form</a>: React hook para valida\xe7\xe3o de formul\xe1rios.</li>\n<li><a href="https://github.com/dohomi/react-hook-form-mui">react-hook-form-mui</a>: MUI and react-hook-form combined.</li>\n<li><a href="https://github.com/stackworx/formik-mui">formik-material-ui</a>: Bindings for using MUI with <a href="https://formik.org/">formik</a>.</li>\n<li><a href="https://github.com/erikras/redux-form-material-ui">redux-form-material-ui</a>: Bindings for using MUI with <a href="https://redux-form.com/">Redux Form</a>.</li>\n<li><a href="https://github.com/lookfirst/mui-rff">mui-rff</a>: Bindings for using MUI with <a href="https://final-form.org/react">React Final Form</a>.</li>\n<li><a href="https://www.npmjs.com/package/@ui-schema/ds-material">@ui-schema/ds-material</a> Bindings for using Material UI with <a href="https://github.com/ui-schema/ui-schema">UI Schema</a>. JSON Schema compatible.</li>\n<li><a href="https://data-driven-forms.org/provided-mappers/mui-component-mapper">@data-driven-forms/mui-component-mapper</a>: Bindings for using Material UI with <a href="https://github.com/data-driven-forms/react-forms">Data Driven Forms</a>.</li>\n</ul>\n','<h2 id="unstyled">Unstyled<a aria-labelledby="unstyled" class="anchor-link-style" href="#unstyled" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component also comes with an <a href="/pt/base/react-input/">unstyled version</a>. It&#39;s ideal for doing heavy customizations and minimizing bundle size.\n        </p>\n','<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/pt/material-ui/api/filled-input/"><code>&lt;FilledInput /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/form-control/"><code>&lt;FormControl /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/form-helper-text/"><code>&lt;FormHelperText /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/input/"><code>&lt;Input /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/input-adornment/"><code>&lt;InputAdornment /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/input-base/"><code>&lt;InputBase /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/input-label/"><code>&lt;InputLabel /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/outlined-input/"><code>&lt;OutlinedInput /&gt;</code></a></li>\n<li><a href="/pt/material-ui/api/text-field/"><code>&lt;TextField /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"Basic TextField",level:2,hash:"basic-textfield",children:[]},{text:"Propriedades de formul\xe1rio",level:2,hash:"form-props",children:[]},{text:"Valida\xe7\xe3o",level:2,hash:"validation",children:[]},{text:"Multilinha",level:2,hash:"multiline",children:[]},{text:"Sele\xe7\xe3o",level:2,hash:"select",children:[]},{text:"\xcdcones",level:2,hash:"icons",children:[{text:"Adere\xe7os de campo",level:3,hash:"input-adornments"}]},{text:"Tamanhos",level:2,hash:"sizes",children:[]},{text:"Margin",level:2,hash:"margin",children:[]},{text:"Largura total",level:2,hash:"full-width",children:[]},{text:"Uncontrolled vs. Controlled",level:2,hash:"uncontrolled-vs-controlled",children:[]},{text:"Componentes",level:2,hash:"components",children:[]},{text:"Campos",level:2,hash:"inputs",children:[]},{text:"Cor",level:2,hash:"color",children:[]},{text:"Campos customizados",level:2,hash:"customization",children:[]},{text:"useFormControl",level:2,hash:"useformcontrol",children:[]},{text:"Limita\xe7\xf5es",level:2,hash:"limitations",children:[{text:"Shrink",level:3,hash:"shrink"},{text:"R\xf3tulo flutuante",level:3,hash:"floating-label"},{text:"type=&quot;number&quot;",level:3,hash:"type-quot-number-quot"},{text:"Texto auxiliar",level:3,hash:"helper-text"}]},{text:"Integra\xe7\xe3o com bibliotecas de campo de terceiros",level:2,hash:"integration-with-3rd-party-input-libraries",children:[]},{text:"Acessibilidade",level:2,hash:"accessibility",children:[]},{text:"Projetos Complementares",level:2,hash:"complementary-projects",children:[]},{text:"Unstyled",level:2,hash:"unstyled",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"Text field React component",headers:{product:"material-ui",title:"Text field React component",components:["FilledInput","FormControl","FormHelperText","Input","InputAdornment","InputBase","InputLabel","OutlinedInput","TextField"],githubLabel:"component: text field",materialDesign:"https://material.io/components/text-fields",unstyled:"/base/react-input/"}},zh:{description:"\u7528\u6237\u53ef\u4ee5\u5728\u6587\u672c\u6846\u5185\u8f93\u5165\u6216\u7f16\u8f91\u6587\u5b57\u3002",location:"/docs/data/material/components/text-fields/text-fields-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Text field</h1><p class="description">\u7528\u6237\u53ef\u4ee5\u5728\u6587\u672c\u6846\u5185\u8f93\u5165\u6216\u7f16\u8f91\u6587\u5b57\u3002</p>\n\n<p>\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6587\u672c\u6846\u5728\u754c\u9762\u4e2d\u8f93\u5165\u6587\u672c\u3002 \u901a\u5e38\uff0c\u6211\u4eec\u4f1a\u5728\u8868\u5355\u57df\u548c\u5bf9\u8bdd\u6846\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p>\n',{component:"modules/components/ComponentLinkHeader.js"},'<h2 id="basic-textfield">\u57fa\u7840\u6587\u672c\u6846<a aria-labelledby="basic-textfield" class="anchor-link-style" href="#basic-textfield" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>TextField</code> \u5305\u88c5\u5668\u7ec4\u4ef6\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u8868\u5355\u63a7\u4ef6\uff0c\u5b83\u5305\u62ec\u4e86\u6807\u7b7e\u3001\u8f93\u5165\u548c\u5e2e\u52a9\u6587\u672c\u3002 It comes with three variants: outlined (default), filled, and standard.</p>\n',{demo:"BasicTextFields.js"},'<p><strong>\u53cb\u60c5\u63d0\u793a\uff1a</strong> <a href="https://material.io/" target="_blank" rel="noopener nofollow">Material \u8bbe\u8ba1\u6307\u5357</a>\u4e0d\u518d\u8bb0\u5f55 <code>TextField</code> \u7684 standard \u5e03\u5c40\uff0c\uff08<a href="https://medium.com/google-design/the-evolution-of-material-designs-text-fields-603688b3fe03">\u539f\u56e0\u89c1\u6b64</a>\uff09\uff0c\u4f46\u662f Material-UI \u4f1a\u7ee7\u7eed\u652f\u6301\u6b64\u5e03\u5c40\u3002</p>\n<h2 id="form-props">Form props \u8868\u5355\u7684\u5c5e\u6027<a aria-labelledby="form-props" class="anchor-link-style" href="#form-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u8be5\u7ec4\u4ef6\u652f\u6301\u6807\u51c6\u7684\u8868\u5355\u5c5e\u6027\uff0c\u4f8b\u5982 <code>required</code>\u3001<code>disabled</code>\u3001<code>type</code> \u4ee5\u53ca<code>helperText</code> \u7b49\uff0c\u7528\u4e8e\u63d0\u4f9b\u5b57\u6bb5\u8f93\u5165\u7684\u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982\u8f93\u5165\u7684\u4f7f\u7528\u65b9\u5f0f\u3002</p>\n',{demo:"FormPropsTextFields.js"},'<h2 id="validation">\u6821\u9a8c<a aria-labelledby="validation" class="anchor-link-style" href="#validation" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>error</code> prop toggles the error state. The <code>helperText</code> prop can then be used to provide feedback to the user about the error.</p>\n',{demo:"ValidationTextFields.js"},'<h2 id="multiline">\u591a\u884c\u5c5e\u6027<a aria-labelledby="multiline" class="anchor-link-style" href="#multiline" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>multiline</code> prop transforms the text field into a <a href="/zh/material-ui/react-textarea-autosize/">TextareaAutosize</a> element. Unless the <code>rows</code> prop is set, the height of the text field dynamically matches its content (using <a href="/zh/material-ui/react-textarea-autosize/">TextareaAutosize</a>). You can use the <code>minRows</code> and <code>maxRows</code> props to bound it.</p>\n',{demo:"MultilineTextFields.js"},'<h2 id="select">Select \u9009\u62e9\u5c5e\u6027<a aria-labelledby="select" class="anchor-link-style" href="#select" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>select</code> prop makes the text field use the <a href="/zh/material-ui/react-select/">Select</a> component internally.</p>\n',{demo:"SelectTextFields.js"},'<h2 id="icons">Icons \u56fe\u6807<a aria-labelledby="icons" class="anchor-link-style" href="#icons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u6211\u4eec\u63d0\u4f9b\u4e86\u5728\u6587\u672c\u6846\u5185\u5c55\u793a\u56fe\u6807\u7684\u4e0d\u540c\u7684\u65b9\u5f0f\u3002</p>\n',{demo:"InputWithIcon.js"},'<h3 id="input-adornments">\u4fee\u9970\u8f93\u5165\u6846<a aria-labelledby="input-adornments" class="anchor-link-style" href="#input-adornments" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u4e00\u4e2a\u4e3b\u6d41\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 <code>InputAdornment</code> \u7ec4\u4ef6\u3002 This can be used to add a prefix, a suffix, or an action to an input. \u4f8b\u5982\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u56fe\u6807\u6309\u94ae\u6765\u9690\u85cf\u6216\u8005\u663e\u793a\u8f93\u5165\u6846\u91cc\u7684\u5bc6\u7801\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u56fe\u6807\u6309\u94ae\u6765\u9690\u85cf\u6216\u8005\u663e\u793a\u8f93\u5165\u6846\u91cc\u7684\u5bc6\u7801\u3002</p>\n',{demo:"InputAdornments.js"},'<h2 id="sizes">\u5c3a\u5bf8<a aria-labelledby="sizes" class="anchor-link-style" href="#sizes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u60f3\u8981\u4f7f\u7528\u5916\u89c2\u770b\u8d77\u6765\u6bd4\u8f83\u5c0f\u7684\u8f93\u5165\u6846\u5417\uff1f \u8bd5\u7740\u4f7f\u7528 <code>size</code> \u5c5e\u6027\u5427\u3002</p>\n',{demo:"TextFieldSizes.js"},"<p><code>filled</code> \u53d8\u4f53\u7684\u8f93\u5165\u9ad8\u5ea6\u53ef\u4ee5\u901a\u8fc7\u5728\u5916\u90e8\u6e32\u67d3\u6807\u7b7e\u6765\u964d\u4f4e\u3002</p>\n",{demo:"TextFieldHiddenLabel.js"},'<h2 id="margin">Margin<a aria-labelledby="margin" class="anchor-link-style" href="#margin" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>margin</code> prop can be used to alter the vertical spacing of the text field. Using <code>none</code> (default) doesn&#39;t apply margins to the <code>FormControl</code> whereas <code>dense</code> and <code>normal</code> do.</p>\n',{demo:"LayoutTextFields.js"},'<h2 id="full-width">\u5168\u5bbd<a aria-labelledby="full-width" class="anchor-link-style" href="#full-width" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u6211\u4eec\u63d0\u4f9b\u4e86<code>fullWidth</code> \u5c5e\u6027\uff0c\u4f7f\u7528\u5b83\u7684\u65f6\u5019\uff0c\u8f93\u5165\u6846\u4f1a\u5360\u636e\u6574\u4e2a\u5bb9\u5668\u7684\u5bbd\u5ea6\u3002</p>\n',{demo:"FullWidthTextField.js"},'<h2 id="uncontrolled-vs-controlled">Uncontrolled vs. Controlled<a aria-labelledby="uncontrolled-vs-controlled" class="anchor-link-style" href="#uncontrolled-vs-controlled" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u4f60\u53ef\u4ee5\u9009\u62e9\u63a7\u5236\u7684\u7ec4\u4ef6\uff0c\u6216\u8005\u4e0d\u53d7\u63a7\u7684\u7ec4\u4ef6\u3002</p>\n',{demo:"StateTextFields.js"},'<h2 id="components">Components \u7ec4\u4ef6<a aria-labelledby="components" class="anchor-link-style" href="#components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>TextField</code> is composed of smaller components ( <a href="/zh/material-ui/api/form-control/"><code>FormControl</code></a>, <a href="/zh/material-ui/api/input/"><code>Input</code></a>, <a href="/zh/material-ui/api/filled-input/"><code>FilledInput</code></a>, <a href="/zh/material-ui/api/input-label/"><code>InputLabel</code></a>, <a href="/zh/material-ui/api/outlined-input/"><code>OutlinedInput</code></a>, and <a href="/zh/material-ui/api/form-helper-text/"><code>FormHelperText</code></a> ) that you can leverage directly to significantly customize your form inputs.</p>\n<p>\u60a8\u53ef\u80fd\u6ce8\u610f\u5230\u4e86\uff0c \u548c\u539f\u751f\u7684 HTML input \u7ec4\u4ef6\u76f8\u6bd4\uff0c<code>TextField</code> \u7ec4\u4ef6\u7f3a\u5931\u4e86\u4e00\u4e9b\u5c5e\u6027\u3002 \u8fd9\u662f\u6545\u610f\u4e3a\u4e4b\u7684\u3002 The component takes care of the most used properties. Then, it&#39;s up to the user to use the underlying component shown in the following demo. Still, you can use <code>inputProps</code> (and <code>InputProps</code>, <code>InputLabelProps</code> properties) if you want to avoid some boilerplate.</p>\n',{demo:"ComposedTextField.js"},'<h2 id="inputs">Inputs \u8f93\u5165\u6846<a aria-labelledby="inputs" class="anchor-link-style" href="#inputs" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"Inputs.js"},'<h2 id="color">Color \u989c\u8272<a aria-labelledby="color" class="anchor-link-style" href="#color" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u5f53\u4f7f\u7528 <code>color</code> \u5c5e\u6027\u65f6\uff0c\u805a\u7126\u6587\u672c\u6846\u65f6\u7684\u9ad8\u4eae\u989c\u8272\u4f1a\u88ab\u6539\u53d8\u3002</p>\n',{demo:"ColorTextFields.js"},'<h2 id="customization">\u81ea\u5b9a\u4e49\u8f93\u5165<a aria-labelledby="customization" class="anchor-link-style" href="#customization" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u4f60\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u4e00\u4e9b\u4f8b\u5b50\u6765\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u3002 You can learn more about this in the <a href="/zh/material-ui/customization/how-to-customize/">overrides documentation page</a>.</p>\n',{demo:"CustomizedInputs.js"},'<p>Customization does not stop at CSS. You can use composition to build custom components and give your app a unique feel. Below is an example using the <a href="/zh/material-ui/api/input-base/"><code>InputBase</code></a> component, inspired by Google Maps.</p>\n',{demo:"CustomizedInputBase.js",bg:!0},'<p>\ud83c\udfa8 If you are looking for inspiration, you can check <a href="https://mui-treasury.com/styles/text-field/">MUI Treasury&#39;s customization examples</a>.</p>\n<h2 id="useformcontrol"><code>useFormControl</code><a aria-labelledby="useformcontrol" class="anchor-link-style" href="#useformcontrol" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For advanced customization use cases, a <code>useFormControl()</code> hook is exposed. This hook returns the context value of the parent <code>FormControl</code> component.</p>\n<p><strong>API</strong></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useFormControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/FormControl\'</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p><strong>\u8fd4\u56de\u7ed3\u679c</strong></p>\n<p><code>value</code> (<em>object</em>):</p>\n<ul>\n<li><code>value.adornedStart</code> (<em>bool</em>): Indicate whether the child <code>Input</code> or <code>Select</code> component has a start adornment.</li>\n<li><code>value.setAdornedStart</code> (<em>func</em>): Setter function for <code>adornedStart</code> state value.</li>\n<li><code>value.color</code> (<em>string</em>): The theme color is being used, inherited from <code>FormControl</code> <code>color</code> prop .</li>\n<li><code>value.disabled</code> (<em>bool</em>): Indicate whether the component is being displayed in a disabled state, inherited from <code>FormControl</code> <code>disabled</code> prop.</li>\n<li><code>value.error</code> (<em>bool</em>): Indicate whether the component is being displayed in an error state, inherited from <code>FormControl</code> <code>error</code> prop</li>\n<li><code>value.filled</code> (<em>bool</em>): Indicate whether input is filled</li>\n<li><code>value.focused</code> (<em>bool</em>): Indicate whether the component and its children are being displayed in a focused state</li>\n<li><code>value.fullWidth</code> (<em>bool</em>): Indicate whether the component is taking up the full width of its container, inherited from <code>FormControl</code> <code>fullWidth</code> prop</li>\n<li><code>value.hiddenLabel</code> (<em>bool</em>): Indicate whether the label is being hidden, inherited from <code>FormControl</code> <code>hiddenLabel</code> prop</li>\n<li><code>value.required</code> (<em>bool</em>): Indicate whether the label is indicating that the input is required input, inherited from the <code>FormControl</code> <code>required</code> prop</li>\n<li><code>value.size</code> (<em>string</em>): The size of the component, inherited from the <code>FormControl</code> <code>size</code> prop</li>\n<li><code>value.variant</code> (<em>string</em>): The variant is being used by the <code>FormControl</code> component and its children, inherited from <code>FormControl</code> <code>variant</code> prop</li>\n<li><code>value.onBlur</code> (<em>func</em>): Should be called when the input is blurred</li>\n<li><code>value.onFocus</code> (<em>func</em>): Should be called when the input is focused</li>\n<li><code>value.onEmpty</code> (<em>func</em>): Should be called when the input is emptied</li>\n<li><code>value.onFilled</code> (<em>func</em>): Should be called when the input is filled</li>\n</ul>\n<p><strong>\u793a\u4f8b</strong></p>\n',{demo:"UseFormControl.js"},'<h2 id="limitations">\u8bbe\u8ba1\u5c40\u9650<a aria-labelledby="limitations" class="anchor-link-style" href="#limitations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="shrink">\u7f29\u653e<a aria-labelledby="shrink" class="anchor-link-style" href="#shrink" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u8f93\u5165\u6846\u6807\u7b7e\u7684 &quot;shrink&quot; \u72b6\u6001\u5e76\u4e0d\u603b\u662f\u6b63\u786e\u7684\u3002 \u8f93\u5165\u6807\u7b7e\u5e94\u5728\u8f93\u5165\u6846\u663e\u793a\u5185\u5bb9\u7684\u65f6\u5019\u7acb\u5373\u6536\u7f29\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u8f93\u5165\u6846\u7684 &quot;shrink&quot; \u72b6\u6001 (\u5982\u6570\u5b57\u8f93\u5165\u3001\u65e5\u671f\u65f6\u95f4\u8f93\u5165\u3001\u6761\u5e26\u8f93\u5165)\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u91cd\u53e0\u7684\u73b0\u8c61\u3002</p>\n<p><img src="/static/images/text-fields/shrink.png" alt="shrink \u7f29\u653e"></p>\n<p>\u82e5\u8981\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u5728\u8f93\u5165\u6846\u7684\u6807\u7b7e\u4e0a\u5f3a\u5236\u8d4b\u4e88 &quot;shrink&quot; \u72b6\u6001\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token attr-name">InputLabelProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">shrink</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u6216</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputLabel</span></span> <span class="token attr-name">shrink</span><span class="token punctuation">></span></span>\u8ba1\u6570<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">InputLabel</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="floating-label">\u60ac\u6d6e\u7684\u6807\u7b7e<a aria-labelledby="floating-label" class="anchor-link-style" href="#floating-label" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The floating label is absolutely positioned. It won&#39;t impact the layout of the page. Make sure that the input is larger than the label to display correctly.</p>\n<h3 id="type-quot-number-quot">type=&quot;number&quot;<a aria-labelledby="type-quot-number-quot" class="anchor-link-style" href="#type-quot-number-quot" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>type=&quot;number&quot; \u7684\u8f93\u5165\u5b58\u5728\u6f5c\u5728\u7684\u53ef\u7528\u6027\u95ee\u9898\u3002</p>\n<ul>\n<li>Allowing certain non-numeric characters (&#39;e&#39;, &#39;+&#39;, &#39;-&#39;, &#39;.&#39;) and silently discarding others</li>\n<li>\u6eda\u52a8\u589e\u52a0/\u51cf\u5c11\u6570\u5b57\u7684\u529f\u80fd\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u5916\u548c\u96be\u4ee5\u5bdf\u89c9\u7684\u53d8\u5316\u3002</li>\n</ul>\n<p>\u6709\u5173\u8be5\u8bdd\u9898\u7684\u66f4\u591a\u4fe1\u606f - \u8bf7\u53c2\u9605 GOV.UK \u8bbe\u8ba1\u7cfb\u7edf\u56e2\u961f\u7684 <a href="https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/">\u8fd9\u7bc7\u6587\u7ae0</a>\uff0c\u6765\u4e86\u89e3\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u3002</p>\n<p>\u5bf9\u4e8e\u6570\u5b57\u9a8c\u8bc1\uff0c\u4e00\u4e2a\u53ef\u884c\u7684\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528\u9ed8\u8ba4\u7684 type=&quot;text&quot; \u548c <em>pattern</em> \u5c5e\u6027\uff0c\u4f8b\u5982\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span> <span class="token attr-name">inputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">inputMode</span><span class="token operator">:</span> <span class="token string">\'numeric\'</span><span class="token punctuation">,</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">\'[0-9]*\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u4ee5\u540e\u6211\u4eec\u53ef\u80fd\u4f1a\u63d0\u4f9b <a href="https://github.com/mui/material-ui/issues/19154">\u6570\u5b57\uff08number\uff09\u8f93\u5165\u7ec4\u4ef6</a>\u3002</p>\n<h3 id="helper-text">\u8f85\u52a9\u6587\u672c<a aria-labelledby="helper-text" class="anchor-link-style" href="#helper-text" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>\u52a9\u624b\u6587\u672c\u5c5e\u6027\u4f1a\u5f71\u54cd\u6587\u672c\u6846\u7684\u9ad8\u5ea6\u3002 \u5982\u679c\u4e24\u4e2a\u6587\u672c\u6846\u5e76\u6392\u653e\u7f6e\uff0c\u4e00\u4e2a\u6709\u8f85\u52a9\u6587\u672c\uff0c\u53e6\u4e00\u4e2a\u6ca1\u6709\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u9ad8\u5ea6\u5c31\u4f1a\u4e0d\u540c\u3002 \u4f8b\u5982:</p>\n',{demo:"HelperTextMisaligned.js"},"<p>This can be fixed by passing a space character to the <code>helperText</code> prop:</p>\n",{demo:"HelperTextAligned.js"},'<h2 id="integration-with-3rd-party-input-libraries">\u4e0e\u7b2c\u4e09\u65b9 input \u5e93\u7684\u6574\u5408<a aria-labelledby="integration-with-3rd-party-input-libraries" class="anchor-link-style" href="#integration-with-3rd-party-input-libraries" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u6765\u683c\u5f0f\u5316\u60a8\u7684\u8f93\u5165\u6846\u3002 \u53ea\u8981\u786e\u4fdd\u5728\u6574\u5408\u7684\u65f6\u5019\uff0c\u60a8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e26\u6709 <code>inputComponent</code> \u5c5e\u6027\u7684\u81ea\u5b9a\u4e49 <code>&lt;input&gt;</code> \u5143\u7d20\u3002</p>\n<p>\u4e0b\u9762\u7684\u6f14\u793a\u4f7f\u7528 <a href="https://github.com/text-mask/text-mask">react-text-mask</a> \u548c <a href="https://github.com/s-yadav/react-number-format">react-number-format</a> \u8fd9\u4e24\u4e2a\u57fa\u672c\u5e93\u3002 \u540c\u6837\u7684\u6982\u5ff5\u53ef\u4ee5\u9002\u7528\u4e8e <a href="https://github.com/mui/material-ui/issues/16037">\u8fd9\u4e2a\u4f8b\u5b50\uff1areact-stripe-element</a>\u3002</p>\n',{demo:"FormattedInputs.js"},'<p>\u7b2c\u4e09\u65b9\u6240\u63d0\u4f9b\u7684\u8f93\u5165\u7ec4\u4ef6\u5e94\u8be5\u66b4\u9732\u4e00\u4e2a ref\uff0c\u5176\u503c\u5b9e\u73b0\u4ee5\u4e0b\u63a5\u53e3\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">InputElement</span> <span class="token punctuation">{</span>\n  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  value<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> MyInputComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>other <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n  <span class="token comment">// \u5b9e\u73b0 `InputElement` \u63a5\u53e3</span>\n  React<span class="token punctuation">.</span><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">focus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// \u5728\u8fd9\u91cc\u63d0\u4f9b\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u7684\u805a\u7126\uff08focus\uff09\u6e32\u67d3\u65b9\u6cd5</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// \u9690\u85cf\u503c\uff0c\u4f8b\u5982 react-stripe-elements</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// `Component` \u5c06\u4f1a\u662f\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684 `SomeThirdPartyComponent`</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>other<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// \u4f7f\u7528</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span>\n  <span class="token attr-name">InputProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">inputComponent</span><span class="token operator">:</span> MyInputComponent<span class="token punctuation">,</span>\n    <span class="token literal-property property">inputProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">component</span><span class="token operator">:</span> SomeThirdPartyComponent<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="accessibility">\u65e0\u969c\u788d\u8bbe\u8ba1<a aria-labelledby="accessibility" class="anchor-link-style" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u4e3a\u4e86\u786e\u4fdd\u60a8\u7684\u6587\u672c\u6846\u53ef\u63d0\u4f9b\u65e0\u969c\u788d\u8bbf\u95ee\uff0c<strong>\u8f93\u5165\u6846\u5fc5\u987b\u548c\u6807\u7b7e\u4ee5\u53ca\u5e2e\u52a9\u6587\u672c\u8fde\u5728\u4e00\u8d77\u8c03\u7528</strong>\u3002 \u800c\u4e14\uff0c\u6df1\u5c42\u7684 DOM \u8282\u70b9\u5e94\u8be5\u9075\u5faa\u8fd9\u4e2a\u7ed3\u6784\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\u7535\u5b50\u90ae\u4ef6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\u6211\u4eec\u7edd\u4e0d\u4f1a\u5206\u4eab\u60a8\u7684\u90ae\u4ef6\u5730\u5740\u3002 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<ul>\n<li>If you are using the <code>TextField</code> component, you just have to provide a unique <code>id</code> unless you&#39;re using the <code>TextField</code> only client side. Until the UI is hydrated <code>TextField</code> without an explicit <code>id</code> will not have associated labels.</li>\n<li>If you are composing the component:</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputLabel</span></span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\u7535\u5b50\u90ae\u4ef6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">InputLabel</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormHelperText</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-helper-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\u6211\u4eec\u7edd\u4e0d\u4f1a\u5206\u4eab\u60a8\u7684\u90ae\u4ef6\u5730\u5740\u3002 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormHelperText</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="complementary-projects">\u8865\u5145\u9879\u76ee<a aria-labelledby="complementary-projects" class="anchor-link-style" href="#complementary-projects" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>For more advanced use cases, you might be able to take advantage of:</p>\n<ul>\n<li><a href="https://react-hook-form.com/">react-hook-form</a>\uff1a\u7528\u4e8e\u8868\u5355\u9a8c\u8bc1\u7684 React \u94a9\u5b50\u3002</li>\n<li><a href="https://github.com/dohomi/react-hook-form-mui">react-hook-form-mui</a>: MUI and react-hook-form combined.</li>\n<li><a href="https://github.com/stackworx/formik-mui">formik-material-ui</a>: Bindings for using MUI with <a href="https://formik.org/">formik</a>.</li>\n<li><a href="https://github.com/erikras/redux-form-material-ui">redux-form-material-ui</a>: Bindings for using MUI with <a href="https://redux-form.com/">Redux Form</a>.</li>\n<li><a href="https://github.com/lookfirst/mui-rff">mui-rff</a>: Bindings for using MUI with <a href="https://final-form.org/react">React Final Form</a>.</li>\n<li><a href="https://www.npmjs.com/package/@ui-schema/ds-material">@ui-schema/ds-material</a> Bindings for using Material UI with <a href="https://github.com/ui-schema/ui-schema">UI Schema</a>. JSON Schema compatible.</li>\n<li><a href="https://data-driven-forms.org/provided-mappers/mui-component-mapper">@data-driven-forms/mui-component-mapper</a>: Bindings for using Material UI with <a href="https://github.com/data-driven-forms/react-forms">Data Driven Forms</a>.</li>\n</ul>\n','<h2 id="unstyled">Unstyled<a aria-labelledby="unstyled" class="anchor-link-style" href="#unstyled" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The component also comes with an <a href="/zh/base/react-input/">unstyled version</a>. It&#39;s ideal for doing heavy customizations and minimizing bundle size.\n        </p>\n','<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/zh/material-ui/api/filled-input/"><code>&lt;FilledInput /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/form-control/"><code>&lt;FormControl /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/form-helper-text/"><code>&lt;FormHelperText /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/input/"><code>&lt;Input /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/input-adornment/"><code>&lt;InputAdornment /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/input-base/"><code>&lt;InputBase /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/input-label/"><code>&lt;InputLabel /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/outlined-input/"><code>&lt;OutlinedInput /&gt;</code></a></li>\n<li><a href="/zh/material-ui/api/text-field/"><code>&lt;TextField /&gt;</code></a></li>\n</ul>\n'],toc:[{text:"\u57fa\u7840\u6587\u672c\u6846",level:2,hash:"basic-textfield",children:[]},{text:"Form props \u8868\u5355\u7684\u5c5e\u6027",level:2,hash:"form-props",children:[]},{text:"\u6821\u9a8c",level:2,hash:"validation",children:[]},{text:"\u591a\u884c\u5c5e\u6027",level:2,hash:"multiline",children:[]},{text:"Select \u9009\u62e9\u5c5e\u6027",level:2,hash:"select",children:[]},{text:"Icons \u56fe\u6807",level:2,hash:"icons",children:[{text:"\u4fee\u9970\u8f93\u5165\u6846",level:3,hash:"input-adornments"}]},{text:"\u5c3a\u5bf8",level:2,hash:"sizes",children:[]},{text:"Margin",level:2,hash:"margin",children:[]},{text:"\u5168\u5bbd",level:2,hash:"full-width",children:[]},{text:"Uncontrolled vs. Controlled",level:2,hash:"uncontrolled-vs-controlled",children:[]},{text:"Components \u7ec4\u4ef6",level:2,hash:"components",children:[]},{text:"Inputs \u8f93\u5165\u6846",level:2,hash:"inputs",children:[]},{text:"Color \u989c\u8272",level:2,hash:"color",children:[]},{text:"\u81ea\u5b9a\u4e49\u8f93\u5165",level:2,hash:"customization",children:[]},{text:"useFormControl",level:2,hash:"useformcontrol",children:[]},{text:"\u8bbe\u8ba1\u5c40\u9650",level:2,hash:"limitations",children:[{text:"\u7f29\u653e",level:3,hash:"shrink"},{text:"\u60ac\u6d6e\u7684\u6807\u7b7e",level:3,hash:"floating-label"},{text:"type=&quot;number&quot;",level:3,hash:"type-quot-number-quot"},{text:"\u8f85\u52a9\u6587\u672c",level:3,hash:"helper-text"}]},{text:"\u4e0e\u7b2c\u4e09\u65b9 input \u5e93\u7684\u6574\u5408",level:2,hash:"integration-with-3rd-party-input-libraries",children:[]},{text:"\u65e0\u969c\u788d\u8bbe\u8ba1",level:2,hash:"accessibility",children:[]},{text:"\u8865\u5145\u9879\u76ee",level:2,hash:"complementary-projects",children:[]},{text:"Unstyled",level:2,hash:"unstyled",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"Text field React component",headers:{product:"material-ui",title:"Text field React component",components:["FilledInput","FormControl","FormHelperText","Input","InputAdornment","InputBase","InputLabel","OutlinedInput","TextField"],githubLabel:"component: text field",materialDesign:"https://material.io/components/text-fields",unstyled:"/base/react-input/"}}},We={"BasicTextFields.js":{module:"./BasicTextFields.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function BasicTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField id="outlined-basic" label="Outlined" variant="outlined" />\n      <TextField id="filled-basic" label="Filled" variant="filled" />\n      <TextField id="standard-basic" label="Standard" variant="standard" />\n    </Box>\n  );\n}\n',jsxPreview:'<TextField id="outlined-basic" label="Outlined" variant="outlined" />\n<TextField id="filled-basic" label="Filled" variant="filled" />\n<TextField id="standard-basic" label="Standard" variant="standard" />',moduleTS:"./BasicTextFields.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function BasicTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField id="outlined-basic" label="Outlined" variant="outlined" />\n      <TextField id="filled-basic" label="Filled" variant="filled" />\n      <TextField id="standard-basic" label="Standard" variant="standard" />\n    </Box>\n  );\n}\n'},"MultilineTextFields.js":{module:"./MultilineTextFields.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function MultilineTextFields() {\n  const [value, setValue] = React.useState(\'Controlled\');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          id="outlined-multiline-flexible"\n          label="Multiline"\n          multiline\n          maxRows={4}\n          value={value}\n          onChange={handleChange}\n        />\n        <TextField\n          id="outlined-textarea"\n          label="Multiline Placeholder"\n          placeholder="Placeholder"\n          multiline\n        />\n        <TextField\n          id="outlined-multiline-static"\n          label="Multiline"\n          multiline\n          rows={4}\n          defaultValue="Default Value"\n        />\n      </div>\n      <div>\n        <TextField\n          id="filled-multiline-flexible"\n          label="Multiline"\n          multiline\n          maxRows={4}\n          value={value}\n          onChange={handleChange}\n          variant="filled"\n        />\n        <TextField\n          id="filled-textarea"\n          label="Multiline Placeholder"\n          placeholder="Placeholder"\n          multiline\n          variant="filled"\n        />\n        <TextField\n          id="filled-multiline-static"\n          label="Multiline"\n          multiline\n          rows={4}\n          defaultValue="Default Value"\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          id="standard-multiline-flexible"\n          label="Multiline"\n          multiline\n          maxRows={4}\n          value={value}\n          onChange={handleChange}\n          variant="standard"\n        />\n        <TextField\n          id="standard-textarea"\n          label="Multiline Placeholder"\n          placeholder="Placeholder"\n          multiline\n          variant="standard"\n        />\n        <TextField\n          id="standard-multiline-static"\n          label="Multiline"\n          multiline\n          rows={4}\n          defaultValue="Default Value"\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n',moduleTS:"./MultilineTextFields.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function MultilineTextFields() {\n  const [value, setValue] = React.useState(\'Controlled\');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          id="outlined-multiline-flexible"\n          label="Multiline"\n          multiline\n          maxRows={4}\n          value={value}\n          onChange={handleChange}\n        />\n        <TextField\n          id="outlined-textarea"\n          label="Multiline Placeholder"\n          placeholder="Placeholder"\n          multiline\n        />\n        <TextField\n          id="outlined-multiline-static"\n          label="Multiline"\n          multiline\n          rows={4}\n          defaultValue="Default Value"\n        />\n      </div>\n      <div>\n        <TextField\n          id="filled-multiline-flexible"\n          label="Multiline"\n          multiline\n          maxRows={4}\n          value={value}\n          onChange={handleChange}\n          variant="filled"\n        />\n        <TextField\n          id="filled-textarea"\n          label="Multiline Placeholder"\n          placeholder="Placeholder"\n          multiline\n          variant="filled"\n        />\n        <TextField\n          id="filled-multiline-static"\n          label="Multiline"\n          multiline\n          rows={4}\n          defaultValue="Default Value"\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          id="standard-multiline-flexible"\n          label="Multiline"\n          multiline\n          maxRows={4}\n          value={value}\n          onChange={handleChange}\n          variant="standard"\n        />\n        <TextField\n          id="standard-textarea"\n          label="Multiline Placeholder"\n          placeholder="Placeholder"\n          multiline\n          variant="standard"\n        />\n        <TextField\n          id="standard-multiline-static"\n          label="Multiline"\n          multiline\n          rows={4}\n          defaultValue="Default Value"\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n'},"SelectTextFields.js":{module:"./SelectTextFields.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\nimport MenuItem from \'@mui/material/MenuItem\';\n\nconst currencies = [\n  {\n    value: \'USD\',\n    label: \'$\',\n  },\n  {\n    value: \'EUR\',\n    label: \'\u20ac\',\n  },\n  {\n    value: \'BTC\',\n    label: \'\u0e3f\',\n  },\n  {\n    value: \'JPY\',\n    label: \'\xa5\',\n  },\n];\n\nexport default function SelectTextFields() {\n  const [currency, setCurrency] = React.useState(\'EUR\');\n\n  const handleChange = (event) => {\n    setCurrency(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          id="outlined-select-currency"\n          select\n          label="Select"\n          value={currency}\n          onChange={handleChange}\n          helperText="Please select your currency"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id="outlined-select-currency-native"\n          select\n          label="Native select"\n          value={currency}\n          onChange={handleChange}\n          SelectProps={{\n            native: true,\n          }}\n          helperText="Please select your currency"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n      <div>\n        <TextField\n          id="filled-select-currency"\n          select\n          label="Select"\n          value={currency}\n          onChange={handleChange}\n          helperText="Please select your currency"\n          variant="filled"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id="filled-select-currency-native"\n          select\n          label="Native select"\n          value={currency}\n          onChange={handleChange}\n          SelectProps={{\n            native: true,\n          }}\n          helperText="Please select your currency"\n          variant="filled"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n      <div>\n        <TextField\n          id="standard-select-currency"\n          select\n          label="Select"\n          value={currency}\n          onChange={handleChange}\n          helperText="Please select your currency"\n          variant="standard"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id="standard-select-currency-native"\n          select\n          label="Native select"\n          value={currency}\n          onChange={handleChange}\n          SelectProps={{\n            native: true,\n          }}\n          helperText="Please select your currency"\n          variant="standard"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n    </Box>\n  );\n}\n',moduleTS:"./SelectTextFields.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\nimport MenuItem from \'@mui/material/MenuItem\';\n\nconst currencies = [\n  {\n    value: \'USD\',\n    label: \'$\',\n  },\n  {\n    value: \'EUR\',\n    label: \'\u20ac\',\n  },\n  {\n    value: \'BTC\',\n    label: \'\u0e3f\',\n  },\n  {\n    value: \'JPY\',\n    label: \'\xa5\',\n  },\n];\n\nexport default function SelectTextFields() {\n  const [currency, setCurrency] = React.useState(\'EUR\');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCurrency(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          id="outlined-select-currency"\n          select\n          label="Select"\n          value={currency}\n          onChange={handleChange}\n          helperText="Please select your currency"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id="outlined-select-currency-native"\n          select\n          label="Native select"\n          value={currency}\n          onChange={handleChange}\n          SelectProps={{\n            native: true,\n          }}\n          helperText="Please select your currency"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n      <div>\n        <TextField\n          id="filled-select-currency"\n          select\n          label="Select"\n          value={currency}\n          onChange={handleChange}\n          helperText="Please select your currency"\n          variant="filled"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id="filled-select-currency-native"\n          select\n          label="Native select"\n          value={currency}\n          onChange={handleChange}\n          SelectProps={{\n            native: true,\n          }}\n          helperText="Please select your currency"\n          variant="filled"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n      <div>\n        <TextField\n          id="standard-select-currency"\n          select\n          label="Select"\n          value={currency}\n          onChange={handleChange}\n          helperText="Please select your currency"\n          variant="standard"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id="standard-select-currency-native"\n          select\n          label="Native select"\n          value={currency}\n          onChange={handleChange}\n          SelectProps={{\n            native: true,\n          }}\n          helperText="Please select your currency"\n          variant="standard"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n    </Box>\n  );\n}\n'},"FormPropsTextFields.js":{module:"./FormPropsTextFields.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function FormPropsTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          required\n          id="outlined-required"\n          label="Required"\n          defaultValue="Hello World"\n        />\n        <TextField\n          disabled\n          id="outlined-disabled"\n          label="Disabled"\n          defaultValue="Hello World"\n        />\n        <TextField\n          id="outlined-password-input"\n          label="Password"\n          type="password"\n          autoComplete="current-password"\n        />\n        <TextField\n          id="outlined-read-only-input"\n          label="Read Only"\n          defaultValue="Hello World"\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n        <TextField\n          id="outlined-number"\n          label="Number"\n          type="number"\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <TextField id="outlined-search" label="Search field" type="search" />\n        <TextField\n          id="outlined-helperText"\n          label="Helper text"\n          defaultValue="Default Value"\n          helperText="Some important text"\n        />\n      </div>\n      <div>\n        <TextField\n          required\n          id="filled-required"\n          label="Required"\n          defaultValue="Hello World"\n          variant="filled"\n        />\n        <TextField\n          disabled\n          id="filled-disabled"\n          label="Disabled"\n          defaultValue="Hello World"\n          variant="filled"\n        />\n        <TextField\n          id="filled-password-input"\n          label="Password"\n          type="password"\n          autoComplete="current-password"\n          variant="filled"\n        />\n        <TextField\n          id="filled-read-only-input"\n          label="Read Only"\n          defaultValue="Hello World"\n          InputProps={{\n            readOnly: true,\n          }}\n          variant="filled"\n        />\n        <TextField\n          id="filled-number"\n          label="Number"\n          type="number"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant="filled"\n        />\n        <TextField\n          id="filled-search"\n          label="Search field"\n          type="search"\n          variant="filled"\n        />\n        <TextField\n          id="filled-helperText"\n          label="Helper text"\n          defaultValue="Default Value"\n          helperText="Some important text"\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          required\n          id="standard-required"\n          label="Required"\n          defaultValue="Hello World"\n          variant="standard"\n        />\n        <TextField\n          disabled\n          id="standard-disabled"\n          label="Disabled"\n          defaultValue="Hello World"\n          variant="standard"\n        />\n        <TextField\n          id="standard-password-input"\n          label="Password"\n          type="password"\n          autoComplete="current-password"\n          variant="standard"\n        />\n        <TextField\n          id="standard-read-only-input"\n          label="Read Only"\n          defaultValue="Hello World"\n          InputProps={{\n            readOnly: true,\n          }}\n          variant="standard"\n        />\n        <TextField\n          id="standard-number"\n          label="Number"\n          type="number"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant="standard"\n        />\n        <TextField\n          id="standard-search"\n          label="Search field"\n          type="search"\n          variant="standard"\n        />\n        <TextField\n          id="standard-helperText"\n          label="Helper text"\n          defaultValue="Default Value"\n          helperText="Some important text"\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n',moduleTS:"./FormPropsTextFields.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function FormPropsTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          required\n          id="outlined-required"\n          label="Required"\n          defaultValue="Hello World"\n        />\n        <TextField\n          disabled\n          id="outlined-disabled"\n          label="Disabled"\n          defaultValue="Hello World"\n        />\n        <TextField\n          id="outlined-password-input"\n          label="Password"\n          type="password"\n          autoComplete="current-password"\n        />\n        <TextField\n          id="outlined-read-only-input"\n          label="Read Only"\n          defaultValue="Hello World"\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n        <TextField\n          id="outlined-number"\n          label="Number"\n          type="number"\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <TextField id="outlined-search" label="Search field" type="search" />\n        <TextField\n          id="outlined-helperText"\n          label="Helper text"\n          defaultValue="Default Value"\n          helperText="Some important text"\n        />\n      </div>\n      <div>\n        <TextField\n          required\n          id="filled-required"\n          label="Required"\n          defaultValue="Hello World"\n          variant="filled"\n        />\n        <TextField\n          disabled\n          id="filled-disabled"\n          label="Disabled"\n          defaultValue="Hello World"\n          variant="filled"\n        />\n        <TextField\n          id="filled-password-input"\n          label="Password"\n          type="password"\n          autoComplete="current-password"\n          variant="filled"\n        />\n        <TextField\n          id="filled-read-only-input"\n          label="Read Only"\n          defaultValue="Hello World"\n          InputProps={{\n            readOnly: true,\n          }}\n          variant="filled"\n        />\n        <TextField\n          id="filled-number"\n          label="Number"\n          type="number"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant="filled"\n        />\n        <TextField\n          id="filled-search"\n          label="Search field"\n          type="search"\n          variant="filled"\n        />\n        <TextField\n          id="filled-helperText"\n          label="Helper text"\n          defaultValue="Default Value"\n          helperText="Some important text"\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          required\n          id="standard-required"\n          label="Required"\n          defaultValue="Hello World"\n          variant="standard"\n        />\n        <TextField\n          disabled\n          id="standard-disabled"\n          label="Disabled"\n          defaultValue="Hello World"\n          variant="standard"\n        />\n        <TextField\n          id="standard-password-input"\n          label="Password"\n          type="password"\n          autoComplete="current-password"\n          variant="standard"\n        />\n        <TextField\n          id="standard-read-only-input"\n          label="Read Only"\n          defaultValue="Hello World"\n          InputProps={{\n            readOnly: true,\n          }}\n          variant="standard"\n        />\n        <TextField\n          id="standard-number"\n          label="Number"\n          type="number"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant="standard"\n        />\n        <TextField\n          id="standard-search"\n          label="Search field"\n          type="search"\n          variant="standard"\n        />\n        <TextField\n          id="standard-helperText"\n          label="Helper text"\n          defaultValue="Default Value"\n          helperText="Some important text"\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n'},"InputWithIcon.js":{module:"./InputWithIcon.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControl from '@mui/material/FormControl';\nimport TextField from '@mui/material/TextField';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\n\nexport default function InputWithIcon() {\n  return (\n    <Box sx={{ '& > :not(style)': { m: 1 } }}>\n      <FormControl variant=\"standard\">\n        <InputLabel htmlFor=\"input-with-icon-adornment\">\n          With a start adornment\n        </InputLabel>\n        <Input\n          id=\"input-with-icon-adornment\"\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>\n          }\n        />\n      </FormControl>\n      <TextField\n        id=\"input-with-icon-textfield\"\n        label=\"TextField\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>\n          ),\n        }}\n        variant=\"standard\"\n      />\n      <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\n        <AccountCircle sx={{ color: 'action.active', mr: 1, my: 0.5 }} />\n        <TextField id=\"input-with-sx\" label=\"With sx\" variant=\"standard\" />\n      </Box>\n    </Box>\n  );\n}\n",moduleTS:"./InputWithIcon.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControl from '@mui/material/FormControl';\nimport TextField from '@mui/material/TextField';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\n\nexport default function InputWithIcon() {\n  return (\n    <Box sx={{ '& > :not(style)': { m: 1 } }}>\n      <FormControl variant=\"standard\">\n        <InputLabel htmlFor=\"input-with-icon-adornment\">\n          With a start adornment\n        </InputLabel>\n        <Input\n          id=\"input-with-icon-adornment\"\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>\n          }\n        />\n      </FormControl>\n      <TextField\n        id=\"input-with-icon-textfield\"\n        label=\"TextField\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>\n          ),\n        }}\n        variant=\"standard\"\n      />\n      <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\n        <AccountCircle sx={{ color: 'action.active', mr: 1, my: 0.5 }} />\n        <TextField id=\"input-with-sx\" label=\"With sx\" variant=\"standard\" />\n      </Box>\n    </Box>\n  );\n}\n"},"ValidationTextFields.js":{module:"./ValidationTextFields.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function ValidationTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          error\n          id="outlined-error"\n          label="Error"\n          defaultValue="Hello World"\n        />\n        <TextField\n          error\n          id="outlined-error-helper-text"\n          label="Error"\n          defaultValue="Hello World"\n          helperText="Incorrect entry."\n        />\n      </div>\n      <div>\n        <TextField\n          error\n          id="filled-error"\n          label="Error"\n          defaultValue="Hello World"\n          variant="filled"\n        />\n        <TextField\n          error\n          id="filled-error-helper-text"\n          label="Error"\n          defaultValue="Hello World"\n          helperText="Incorrect entry."\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          error\n          id="standard-error"\n          label="Error"\n          defaultValue="Hello World"\n          variant="standard"\n        />\n        <TextField\n          error\n          id="standard-error-helper-text"\n          label="Error"\n          defaultValue="Hello World"\n          helperText="Incorrect entry."\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n',moduleTS:"./ValidationTextFields.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function ValidationTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          error\n          id="outlined-error"\n          label="Error"\n          defaultValue="Hello World"\n        />\n        <TextField\n          error\n          id="outlined-error-helper-text"\n          label="Error"\n          defaultValue="Hello World"\n          helperText="Incorrect entry."\n        />\n      </div>\n      <div>\n        <TextField\n          error\n          id="filled-error"\n          label="Error"\n          defaultValue="Hello World"\n          variant="filled"\n        />\n        <TextField\n          error\n          id="filled-error-helper-text"\n          label="Error"\n          defaultValue="Hello World"\n          helperText="Incorrect entry."\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          error\n          id="standard-error"\n          label="Error"\n          defaultValue="Hello World"\n          variant="standard"\n        />\n        <TextField\n          error\n          id="standard-error-helper-text"\n          label="Error"\n          defaultValue="Hello World"\n          helperText="Incorrect entry."\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n'},"InputAdornments.js":{module:"./InputAdornments.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport IconButton from \'@mui/material/IconButton\';\nimport Input from \'@mui/material/Input\';\nimport FilledInput from \'@mui/material/FilledInput\';\nimport OutlinedInput from \'@mui/material/OutlinedInput\';\nimport InputLabel from \'@mui/material/InputLabel\';\nimport InputAdornment from \'@mui/material/InputAdornment\';\nimport FormHelperText from \'@mui/material/FormHelperText\';\nimport FormControl from \'@mui/material/FormControl\';\nimport TextField from \'@mui/material/TextField\';\nimport Visibility from \'@mui/icons-material/Visibility\';\nimport VisibilityOff from \'@mui/icons-material/VisibilityOff\';\n\nexport default function InputAdornments() {\n  const [values, setValues] = React.useState({\n    amount: \'\',\n    password: \'\',\n    weight: \'\',\n    weightRange: \'\',\n    showPassword: false,\n  });\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword,\n    });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <Box sx={{ display: \'flex\', flexWrap: \'wrap\' }}>\n      <div>\n        <TextField\n          label="With normal TextField"\n          id="outlined-start-adornment"\n          sx={{ m: 1, width: \'25ch\' }}\n          InputProps={{\n            startAdornment: <InputAdornment position="start">kg</InputAdornment>,\n          }}\n        />\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="outlined">\n          <OutlinedInput\n            id="outlined-adornment-weight"\n            value={values.weight}\n            onChange={handleChange(\'weight\')}\n            endAdornment={<InputAdornment position="end">kg</InputAdornment>}\n            aria-describedby="outlined-weight-helper-text"\n            inputProps={{\n              \'aria-label\': \'weight\',\n            }}\n          />\n          <FormHelperText id="outlined-weight-helper-text">Weight</FormHelperText>\n        </FormControl>\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="outlined">\n          <InputLabel htmlFor="outlined-adornment-password">Password</InputLabel>\n          <OutlinedInput\n            id="outlined-adornment-password"\n            type={values.showPassword ? \'text\' : \'password\'}\n            value={values.password}\n            onChange={handleChange(\'password\')}\n            endAdornment={\n              <InputAdornment position="end">\n                <IconButton\n                  aria-label="toggle password visibility"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge="end"\n                >\n                  {values.showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n            label="Password"\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor="outlined-adornment-amount">Amount</InputLabel>\n          <OutlinedInput\n            id="outlined-adornment-amount"\n            value={values.amount}\n            onChange={handleChange(\'amount\')}\n            startAdornment={<InputAdornment position="start">$</InputAdornment>}\n            label="Amount"\n          />\n        </FormControl>\n      </div>\n      <div>\n        <TextField\n          label="With normal TextField"\n          id="filled-start-adornment"\n          sx={{ m: 1, width: \'25ch\' }}\n          InputProps={{\n            startAdornment: <InputAdornment position="start">kg</InputAdornment>,\n          }}\n          variant="filled"\n        />\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="filled">\n          <FilledInput\n            id="filled-adornment-weight"\n            value={values.weight}\n            onChange={handleChange(\'weight\')}\n            endAdornment={<InputAdornment position="end">kg</InputAdornment>}\n            aria-describedby="filled-weight-helper-text"\n            inputProps={{\n              \'aria-label\': \'weight\',\n            }}\n          />\n          <FormHelperText id="filled-weight-helper-text">Weight</FormHelperText>\n        </FormControl>\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="filled">\n          <InputLabel htmlFor="filled-adornment-password">Password</InputLabel>\n          <FilledInput\n            id="filled-adornment-password"\n            type={values.showPassword ? \'text\' : \'password\'}\n            value={values.password}\n            onChange={handleChange(\'password\')}\n            endAdornment={\n              <InputAdornment position="end">\n                <IconButton\n                  aria-label="toggle password visibility"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge="end"\n                >\n                  {values.showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }} variant="filled">\n          <InputLabel htmlFor="filled-adornment-amount">Amount</InputLabel>\n          <FilledInput\n            id="filled-adornment-amount"\n            value={values.amount}\n            onChange={handleChange(\'amount\')}\n            startAdornment={<InputAdornment position="start">$</InputAdornment>}\n          />\n        </FormControl>\n      </div>\n      <div>\n        <TextField\n          label="With normal TextField"\n          id="standard-start-adornment"\n          sx={{ m: 1, width: \'25ch\' }}\n          InputProps={{\n            startAdornment: <InputAdornment position="start">kg</InputAdornment>,\n          }}\n          variant="standard"\n        />\n        <FormControl variant="standard" sx={{ m: 1, mt: 3, width: \'25ch\' }}>\n          <Input\n            id="standard-adornment-weight"\n            value={values.weight}\n            onChange={handleChange(\'weight\')}\n            endAdornment={<InputAdornment position="end">kg</InputAdornment>}\n            aria-describedby="standard-weight-helper-text"\n            inputProps={{\n              \'aria-label\': \'weight\',\n            }}\n          />\n          <FormHelperText id="standard-weight-helper-text">Weight</FormHelperText>\n        </FormControl>\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="standard">\n          <InputLabel htmlFor="standard-adornment-password">Password</InputLabel>\n          <Input\n            id="standard-adornment-password"\n            type={values.showPassword ? \'text\' : \'password\'}\n            value={values.password}\n            onChange={handleChange(\'password\')}\n            endAdornment={\n              <InputAdornment position="end">\n                <IconButton\n                  aria-label="toggle password visibility"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {values.showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }} variant="standard">\n          <InputLabel htmlFor="standard-adornment-amount">Amount</InputLabel>\n          <Input\n            id="standard-adornment-amount"\n            value={values.amount}\n            onChange={handleChange(\'amount\')}\n            startAdornment={<InputAdornment position="start">$</InputAdornment>}\n          />\n        </FormControl>\n      </div>\n    </Box>\n  );\n}\n',moduleTS:"./InputAdornments.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport IconButton from \'@mui/material/IconButton\';\nimport Input from \'@mui/material/Input\';\nimport FilledInput from \'@mui/material/FilledInput\';\nimport OutlinedInput from \'@mui/material/OutlinedInput\';\nimport InputLabel from \'@mui/material/InputLabel\';\nimport InputAdornment from \'@mui/material/InputAdornment\';\nimport FormHelperText from \'@mui/material/FormHelperText\';\nimport FormControl from \'@mui/material/FormControl\';\nimport TextField from \'@mui/material/TextField\';\nimport Visibility from \'@mui/icons-material/Visibility\';\nimport VisibilityOff from \'@mui/icons-material/VisibilityOff\';\n\ninterface State {\n  amount: string;\n  password: string;\n  weight: string;\n  weightRange: string;\n  showPassword: boolean;\n}\n\nexport default function InputAdornments() {\n  const [values, setValues] = React.useState<State>({\n    amount: \'\',\n    password: \'\',\n    weight: \'\',\n    weightRange: \'\',\n    showPassword: false,\n  });\n\n  const handleChange =\n    (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValues({ ...values, [prop]: event.target.value });\n    };\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword,\n    });\n  };\n\n  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n  };\n\n  return (\n    <Box sx={{ display: \'flex\', flexWrap: \'wrap\' }}>\n      <div>\n        <TextField\n          label="With normal TextField"\n          id="outlined-start-adornment"\n          sx={{ m: 1, width: \'25ch\' }}\n          InputProps={{\n            startAdornment: <InputAdornment position="start">kg</InputAdornment>,\n          }}\n        />\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="outlined">\n          <OutlinedInput\n            id="outlined-adornment-weight"\n            value={values.weight}\n            onChange={handleChange(\'weight\')}\n            endAdornment={<InputAdornment position="end">kg</InputAdornment>}\n            aria-describedby="outlined-weight-helper-text"\n            inputProps={{\n              \'aria-label\': \'weight\',\n            }}\n          />\n          <FormHelperText id="outlined-weight-helper-text">Weight</FormHelperText>\n        </FormControl>\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="outlined">\n          <InputLabel htmlFor="outlined-adornment-password">Password</InputLabel>\n          <OutlinedInput\n            id="outlined-adornment-password"\n            type={values.showPassword ? \'text\' : \'password\'}\n            value={values.password}\n            onChange={handleChange(\'password\')}\n            endAdornment={\n              <InputAdornment position="end">\n                <IconButton\n                  aria-label="toggle password visibility"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge="end"\n                >\n                  {values.showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n            label="Password"\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor="outlined-adornment-amount">Amount</InputLabel>\n          <OutlinedInput\n            id="outlined-adornment-amount"\n            value={values.amount}\n            onChange={handleChange(\'amount\')}\n            startAdornment={<InputAdornment position="start">$</InputAdornment>}\n            label="Amount"\n          />\n        </FormControl>\n      </div>\n      <div>\n        <TextField\n          label="With normal TextField"\n          id="filled-start-adornment"\n          sx={{ m: 1, width: \'25ch\' }}\n          InputProps={{\n            startAdornment: <InputAdornment position="start">kg</InputAdornment>,\n          }}\n          variant="filled"\n        />\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="filled">\n          <FilledInput\n            id="filled-adornment-weight"\n            value={values.weight}\n            onChange={handleChange(\'weight\')}\n            endAdornment={<InputAdornment position="end">kg</InputAdornment>}\n            aria-describedby="filled-weight-helper-text"\n            inputProps={{\n              \'aria-label\': \'weight\',\n            }}\n          />\n          <FormHelperText id="filled-weight-helper-text">Weight</FormHelperText>\n        </FormControl>\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="filled">\n          <InputLabel htmlFor="filled-adornment-password">Password</InputLabel>\n          <FilledInput\n            id="filled-adornment-password"\n            type={values.showPassword ? \'text\' : \'password\'}\n            value={values.password}\n            onChange={handleChange(\'password\')}\n            endAdornment={\n              <InputAdornment position="end">\n                <IconButton\n                  aria-label="toggle password visibility"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge="end"\n                >\n                  {values.showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }} variant="filled">\n          <InputLabel htmlFor="filled-adornment-amount">Amount</InputLabel>\n          <FilledInput\n            id="filled-adornment-amount"\n            value={values.amount}\n            onChange={handleChange(\'amount\')}\n            startAdornment={<InputAdornment position="start">$</InputAdornment>}\n          />\n        </FormControl>\n      </div>\n      <div>\n        <TextField\n          label="With normal TextField"\n          id="standard-start-adornment"\n          sx={{ m: 1, width: \'25ch\' }}\n          InputProps={{\n            startAdornment: <InputAdornment position="start">kg</InputAdornment>,\n          }}\n          variant="standard"\n        />\n        <FormControl variant="standard" sx={{ m: 1, mt: 3, width: \'25ch\' }}>\n          <Input\n            id="standard-adornment-weight"\n            value={values.weight}\n            onChange={handleChange(\'weight\')}\n            endAdornment={<InputAdornment position="end">kg</InputAdornment>}\n            aria-describedby="standard-weight-helper-text"\n            inputProps={{\n              \'aria-label\': \'weight\',\n            }}\n          />\n          <FormHelperText id="standard-weight-helper-text">Weight</FormHelperText>\n        </FormControl>\n        <FormControl sx={{ m: 1, width: \'25ch\' }} variant="standard">\n          <InputLabel htmlFor="standard-adornment-password">Password</InputLabel>\n          <Input\n            id="standard-adornment-password"\n            type={values.showPassword ? \'text\' : \'password\'}\n            value={values.password}\n            onChange={handleChange(\'password\')}\n            endAdornment={\n              <InputAdornment position="end">\n                <IconButton\n                  aria-label="toggle password visibility"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {values.showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }} variant="standard">\n          <InputLabel htmlFor="standard-adornment-amount">Amount</InputLabel>\n          <Input\n            id="standard-adornment-amount"\n            value={values.amount}\n            onChange={handleChange(\'amount\')}\n            startAdornment={<InputAdornment position="start">$</InputAdornment>}\n          />\n        </FormControl>\n      </div>\n    </Box>\n  );\n}\n'},"TextFieldSizes.js":{module:"./TextFieldSizes.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function TextFieldSizes() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          label="Size"\n          id="outlined-size-small"\n          defaultValue="Small"\n          size="small"\n        />\n        <TextField label="Size" id="outlined-size-normal" defaultValue="Normal" />\n      </div>\n      <div>\n        <TextField\n          label="Size"\n          id="filled-size-small"\n          defaultValue="Small"\n          variant="filled"\n          size="small"\n        />\n        <TextField\n          label="Size"\n          id="filled-size-normal"\n          defaultValue="Normal"\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          label="Size"\n          id="standard-size-small"\n          defaultValue="Small"\n          size="small"\n          variant="standard"\n        />\n        <TextField\n          label="Size"\n          id="standard-size-normal"\n          defaultValue="Normal"\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n',moduleTS:"./TextFieldSizes.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function TextFieldSizes() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& .MuiTextField-root\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <div>\n        <TextField\n          label="Size"\n          id="outlined-size-small"\n          defaultValue="Small"\n          size="small"\n        />\n        <TextField label="Size" id="outlined-size-normal" defaultValue="Normal" />\n      </div>\n      <div>\n        <TextField\n          label="Size"\n          id="filled-size-small"\n          defaultValue="Small"\n          variant="filled"\n          size="small"\n        />\n        <TextField\n          label="Size"\n          id="filled-size-normal"\n          defaultValue="Normal"\n          variant="filled"\n        />\n      </div>\n      <div>\n        <TextField\n          label="Size"\n          id="standard-size-small"\n          defaultValue="Small"\n          size="small"\n          variant="standard"\n        />\n        <TextField\n          label="Size"\n          id="standard-size-normal"\n          defaultValue="Normal"\n          variant="standard"\n        />\n      </div>\n    </Box>\n  );\n}\n'},"TextFieldHiddenLabel.js":{module:"./TextFieldHiddenLabel.js",raw:'import * as React from \'react\';\nimport Stack from \'@mui/material/Stack\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function TextFieldHiddenLabel() {\n  return (\n    <Stack\n      component="form"\n      sx={{\n        width: \'25ch\',\n      }}\n      spacing={2}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField\n        hiddenLabel\n        id="filled-hidden-label-small"\n        defaultValue="Small"\n        variant="filled"\n        size="small"\n      />\n      <TextField\n        hiddenLabel\n        id="filled-hidden-label-normal"\n        defaultValue="Normal"\n        variant="filled"\n      />\n    </Stack>\n  );\n}\n',jsxPreview:'<TextField\n  hiddenLabel\n  id="filled-hidden-label-small"\n  defaultValue="Small"\n  variant="filled"\n  size="small"\n/>\n<TextField\n  hiddenLabel\n  id="filled-hidden-label-normal"\n  defaultValue="Normal"\n  variant="filled"\n/>',moduleTS:"./TextFieldHiddenLabel.js",rawTS:'import * as React from \'react\';\nimport Stack from \'@mui/material/Stack\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function TextFieldHiddenLabel() {\n  return (\n    <Stack\n      component="form"\n      sx={{\n        width: \'25ch\',\n      }}\n      spacing={2}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField\n        hiddenLabel\n        id="filled-hidden-label-small"\n        defaultValue="Small"\n        variant="filled"\n        size="small"\n      />\n      <TextField\n        hiddenLabel\n        id="filled-hidden-label-normal"\n        defaultValue="Normal"\n        variant="filled"\n      />\n    </Stack>\n  );\n}\n'},"LayoutTextFields.js":{module:"./LayoutTextFields.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nfunction RedBar() {\n  return (\n    <Box\n      sx={{\n        height: 20,\n        backgroundColor: (theme) =>\n          theme.palette.mode === 'light'\n            ? 'rgba(255, 0, 0, 0.1)'\n            : 'rgb(255 132 132 / 25%)',\n      }}\n    />\n  );\n}\n\nexport default function LayoutTextFields() {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        '& .MuiTextField-root': { width: '25ch' },\n      }}\n    >\n      <RedBar />\n      <TextField label={'margin=\"none\"'} id=\"margin-none\" />\n      <RedBar />\n      <TextField label={'margin=\"dense\"'} id=\"margin-dense\" margin=\"dense\" />\n      <RedBar />\n      <TextField label={'margin=\"normal\"'} id=\"margin-normal\" margin=\"normal\" />\n      <RedBar />\n    </Box>\n  );\n}\n",jsxPreview:'<RedBar />\n<TextField label={\'margin="none"\'} id="margin-none" />\n<RedBar />\n<TextField label={\'margin="dense"\'} id="margin-dense" margin="dense" />\n<RedBar />\n<TextField label={\'margin="normal"\'} id="margin-normal" margin="normal" />\n<RedBar />',moduleTS:"./LayoutTextFields.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nfunction RedBar() {\n  return (\n    <Box\n      sx={{\n        height: 20,\n        backgroundColor: (theme) =>\n          theme.palette.mode === 'light'\n            ? 'rgba(255, 0, 0, 0.1)'\n            : 'rgb(255 132 132 / 25%)',\n      }}\n    />\n  );\n}\n\nexport default function LayoutTextFields() {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        '& .MuiTextField-root': { width: '25ch' },\n      }}\n    >\n      <RedBar />\n      <TextField label={'margin=\"none\"'} id=\"margin-none\" />\n      <RedBar />\n      <TextField label={'margin=\"dense\"'} id=\"margin-dense\" margin=\"dense\" />\n      <RedBar />\n      <TextField label={'margin=\"normal\"'} id=\"margin-normal\" margin=\"normal\" />\n      <RedBar />\n    </Box>\n  );\n}\n"},"FullWidthTextField.js":{module:"./FullWidthTextField.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport default function FullWidthTextField() {\n  return (\n    <Box\n      sx={{\n        width: 500,\n        maxWidth: '100%',\n      }}\n    >\n      <TextField fullWidth label=\"fullWidth\" id=\"fullWidth\" />\n    </Box>\n  );\n}\n",jsxPreview:'<TextField fullWidth label="fullWidth" id="fullWidth" />',moduleTS:"./FullWidthTextField.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport default function FullWidthTextField() {\n  return (\n    <Box\n      sx={{\n        width: 500,\n        maxWidth: '100%',\n      }}\n    >\n      <TextField fullWidth label=\"fullWidth\" id=\"fullWidth\" />\n    </Box>\n  );\n}\n"},"ComposedTextField.js":{module:"./ComposedTextField.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport FilledInput from \'@mui/material/FilledInput\';\nimport FormControl from \'@mui/material/FormControl\';\nimport FormHelperText from \'@mui/material/FormHelperText\';\nimport Input from \'@mui/material/Input\';\nimport InputLabel from \'@mui/material/InputLabel\';\nimport OutlinedInput from \'@mui/material/OutlinedInput\';\n\nexport default function ComposedTextField() {\n  const [name, setName] = React.useState(\'Composed TextField\');\n\n  const handleChange = (event) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1 },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <FormControl variant="standard">\n        <InputLabel htmlFor="component-simple">Name</InputLabel>\n        <Input id="component-simple" value={name} onChange={handleChange} />\n      </FormControl>\n      <FormControl variant="standard">\n        <InputLabel htmlFor="component-helper">Name</InputLabel>\n        <Input\n          id="component-helper"\n          value={name}\n          onChange={handleChange}\n          aria-describedby="component-helper-text"\n        />\n        <FormHelperText id="component-helper-text">\n          Some important helper text\n        </FormHelperText>\n      </FormControl>\n      <FormControl disabled variant="standard">\n        <InputLabel htmlFor="component-disabled">Name</InputLabel>\n        <Input id="component-disabled" value={name} onChange={handleChange} />\n        <FormHelperText>Disabled</FormHelperText>\n      </FormControl>\n      <FormControl error variant="standard">\n        <InputLabel htmlFor="component-error">Name</InputLabel>\n        <Input\n          id="component-error"\n          value={name}\n          onChange={handleChange}\n          aria-describedby="component-error-text"\n        />\n        <FormHelperText id="component-error-text">Error</FormHelperText>\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor="component-outlined">Name</InputLabel>\n        <OutlinedInput\n          id="component-outlined"\n          value={name}\n          onChange={handleChange}\n          label="Name"\n        />\n      </FormControl>\n      <FormControl variant="filled">\n        <InputLabel htmlFor="component-filled">Name</InputLabel>\n        <FilledInput id="component-filled" value={name} onChange={handleChange} />\n      </FormControl>\n    </Box>\n  );\n}\n',moduleTS:"./ComposedTextField.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport FilledInput from \'@mui/material/FilledInput\';\nimport FormControl from \'@mui/material/FormControl\';\nimport FormHelperText from \'@mui/material/FormHelperText\';\nimport Input from \'@mui/material/Input\';\nimport InputLabel from \'@mui/material/InputLabel\';\nimport OutlinedInput from \'@mui/material/OutlinedInput\';\n\nexport default function ComposedTextField() {\n  const [name, setName] = React.useState(\'Composed TextField\');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1 },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <FormControl variant="standard">\n        <InputLabel htmlFor="component-simple">Name</InputLabel>\n        <Input id="component-simple" value={name} onChange={handleChange} />\n      </FormControl>\n      <FormControl variant="standard">\n        <InputLabel htmlFor="component-helper">Name</InputLabel>\n        <Input\n          id="component-helper"\n          value={name}\n          onChange={handleChange}\n          aria-describedby="component-helper-text"\n        />\n        <FormHelperText id="component-helper-text">\n          Some important helper text\n        </FormHelperText>\n      </FormControl>\n      <FormControl disabled variant="standard">\n        <InputLabel htmlFor="component-disabled">Name</InputLabel>\n        <Input id="component-disabled" value={name} onChange={handleChange} />\n        <FormHelperText>Disabled</FormHelperText>\n      </FormControl>\n      <FormControl error variant="standard">\n        <InputLabel htmlFor="component-error">Name</InputLabel>\n        <Input\n          id="component-error"\n          value={name}\n          onChange={handleChange}\n          aria-describedby="component-error-text"\n        />\n        <FormHelperText id="component-error-text">Error</FormHelperText>\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor="component-outlined">Name</InputLabel>\n        <OutlinedInput\n          id="component-outlined"\n          value={name}\n          onChange={handleChange}\n          label="Name"\n        />\n      </FormControl>\n      <FormControl variant="filled">\n        <InputLabel htmlFor="component-filled">Name</InputLabel>\n        <FilledInput id="component-filled" value={name} onChange={handleChange} />\n      </FormControl>\n    </Box>\n  );\n}\n'},"StateTextFields.js":{module:"./StateTextFields.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function StateTextFields() {\n  const [name, setName] = React.useState(\'Cat in the Hat\');\n  const handleChange = (event) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField\n        id="outlined-name"\n        label="Name"\n        value={name}\n        onChange={handleChange}\n      />\n      <TextField\n        id="outlined-uncontrolled"\n        label="Uncontrolled"\n        defaultValue="foo"\n      />\n    </Box>\n  );\n}\n',jsxPreview:'<TextField\n  id="outlined-name"\n  label="Name"\n  value={name}\n  onChange={handleChange}\n/>\n<TextField\n  id="outlined-uncontrolled"\n  label="Uncontrolled"\n  defaultValue="foo"\n/>',moduleTS:"./StateTextFields.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function StateTextFields() {\n  const [name, setName] = React.useState(\'Cat in the Hat\');\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField\n        id="outlined-name"\n        label="Name"\n        value={name}\n        onChange={handleChange}\n      />\n      <TextField\n        id="outlined-uncontrolled"\n        label="Uncontrolled"\n        defaultValue="foo"\n      />\n    </Box>\n  );\n}\n'},"Inputs.js":{module:"./Inputs.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\n\nconst ariaLabel = { 'aria-label': 'description' };\n\nexport default function Inputs() {\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1 },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <Input defaultValue=\"Hello world\" inputProps={ariaLabel} />\n      <Input placeholder=\"Placeholder\" inputProps={ariaLabel} />\n      <Input disabled defaultValue=\"Disabled\" inputProps={ariaLabel} />\n      <Input defaultValue=\"Error\" error inputProps={ariaLabel} />\n    </Box>\n  );\n}\n",jsxPreview:'<Input defaultValue="Hello world" inputProps={ariaLabel} />\n<Input placeholder="Placeholder" inputProps={ariaLabel} />\n<Input disabled defaultValue="Disabled" inputProps={ariaLabel} />\n<Input defaultValue="Error" error inputProps={ariaLabel} />',moduleTS:"./Inputs.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\n\nconst ariaLabel = { 'aria-label': 'description' };\n\nexport default function Inputs() {\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1 },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <Input defaultValue=\"Hello world\" inputProps={ariaLabel} />\n      <Input placeholder=\"Placeholder\" inputProps={ariaLabel} />\n      <Input disabled defaultValue=\"Disabled\" inputProps={ariaLabel} />\n      <Input defaultValue=\"Error\" error inputProps={ariaLabel} />\n    </Box>\n  );\n}\n"},"ColorTextFields.js":{module:"./ColorTextFields.js",raw:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function ColorTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField label="Outlined secondary" color="secondary" focused />\n      <TextField label="Filled success" variant="filled" color="success" focused />\n      <TextField\n        label="Standard warning"\n        variant="standard"\n        color="warning"\n        focused\n      />\n    </Box>\n  );\n}\n',jsxPreview:'<TextField label="Outlined secondary" color="secondary" focused />\n<TextField label="Filled success" variant="filled" color="success" focused />\n<TextField\n  label="Standard warning"\n  variant="standard"\n  color="warning"\n  focused\n/>',moduleTS:"./ColorTextFields.js",rawTS:'import * as React from \'react\';\nimport Box from \'@mui/material/Box\';\nimport TextField from \'@mui/material/TextField\';\n\nexport default function ColorTextFields() {\n  return (\n    <Box\n      component="form"\n      sx={{\n        \'& > :not(style)\': { m: 1, width: \'25ch\' },\n      }}\n      noValidate\n      autoComplete="off"\n    >\n      <TextField label="Outlined secondary" color="secondary" focused />\n      <TextField label="Filled success" variant="filled" color="success" focused />\n      <TextField\n        label="Standard warning"\n        variant="standard"\n        color="warning"\n        focused\n      />\n    </Box>\n  );\n}\n'},"CustomizedInputs.js":{module:"./CustomizedInputs.js",raw:"import * as React from 'react';\nimport { alpha, styled } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\n\nconst CssTextField = styled(TextField)({\n  '& label.Mui-focused': {\n    color: 'green',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'red',\n    },\n    '&:hover fieldset': {\n      borderColor: 'yellow',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green',\n    },\n  },\n});\n\nconst BootstrapInput = styled(InputBase)(({ theme }) => ({\n  'label + &': {\n    marginTop: theme.spacing(3),\n  },\n  '& .MuiInputBase-input': {\n    borderRadius: 4,\n    position: 'relative',\n    backgroundColor: theme.palette.mode === 'light' ? '#fcfcfb' : '#2b2b2b',\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    width: 'auto',\n    padding: '10px 12px',\n    transition: theme.transitions.create([\n      'border-color',\n      'background-color',\n      'box-shadow',\n    ]),\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:focus': {\n      boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\n      borderColor: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst RedditTextField = styled((props) => (\n  <TextField InputProps={{ disableUnderline: true }} {...props} />\n))(({ theme }) => ({\n  '& .MuiFilledInput-root': {\n    border: '1px solid #e2e2e1',\n    overflow: 'hidden',\n    borderRadius: 4,\n    backgroundColor: theme.palette.mode === 'light' ? '#fcfcfb' : '#2b2b2b',\n    transition: theme.transitions.create([\n      'border-color',\n      'background-color',\n      'box-shadow',\n    ]),\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n    '&.Mui-focused': {\n      backgroundColor: 'transparent',\n      boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n      borderColor: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst ValidationTextField = styled(TextField)({\n  '& input:valid + fieldset': {\n    borderColor: 'green',\n    borderWidth: 2,\n  },\n  '& input:invalid + fieldset': {\n    borderColor: 'red',\n    borderWidth: 2,\n  },\n  '& input:valid:focus + fieldset': {\n    borderLeftWidth: 6,\n    padding: '4px !important', // override inline-style\n  },\n});\n\nexport default function CustomizedInputs() {\n  return (\n    <Box\n      component=\"form\"\n      noValidate\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: { sm: '1fr 1fr' },\n        gap: 2,\n      }}\n    >\n      <FormControl variant=\"standard\">\n        <InputLabel shrink htmlFor=\"bootstrap-input\">\n          Bootstrap\n        </InputLabel>\n        <BootstrapInput defaultValue=\"react-bootstrap\" id=\"bootstrap-input\" />\n      </FormControl>\n      <RedditTextField\n        label=\"Reddit\"\n        defaultValue=\"react-reddit\"\n        id=\"reddit-input\"\n        variant=\"filled\"\n        style={{ marginTop: 11 }}\n      />\n      <CssTextField label=\"Custom CSS\" id=\"custom-css-outlined-input\" />\n      <ValidationTextField\n        label=\"CSS validation style\"\n        required\n        variant=\"outlined\"\n        defaultValue=\"Success\"\n        id=\"validation-outlined-input\"\n      />\n    </Box>\n  );\n}\n",moduleTS:"./CustomizedInputs.js",rawTS:"import * as React from 'react';\nimport { alpha, styled } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport { OutlinedInputProps } from '@mui/material/OutlinedInput';\n\nconst CssTextField = styled(TextField)({\n  '& label.Mui-focused': {\n    color: 'green',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'red',\n    },\n    '&:hover fieldset': {\n      borderColor: 'yellow',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green',\n    },\n  },\n});\n\nconst BootstrapInput = styled(InputBase)(({ theme }) => ({\n  'label + &': {\n    marginTop: theme.spacing(3),\n  },\n  '& .MuiInputBase-input': {\n    borderRadius: 4,\n    position: 'relative',\n    backgroundColor: theme.palette.mode === 'light' ? '#fcfcfb' : '#2b2b2b',\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    width: 'auto',\n    padding: '10px 12px',\n    transition: theme.transitions.create([\n      'border-color',\n      'background-color',\n      'box-shadow',\n    ]),\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:focus': {\n      boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\n      borderColor: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst RedditTextField = styled((props: TextFieldProps) => (\n  <TextField\n    InputProps={{ disableUnderline: true } as Partial<OutlinedInputProps>}\n    {...props}\n  />\n))(({ theme }) => ({\n  '& .MuiFilledInput-root': {\n    border: '1px solid #e2e2e1',\n    overflow: 'hidden',\n    borderRadius: 4,\n    backgroundColor: theme.palette.mode === 'light' ? '#fcfcfb' : '#2b2b2b',\n    transition: theme.transitions.create([\n      'border-color',\n      'background-color',\n      'box-shadow',\n    ]),\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n    '&.Mui-focused': {\n      backgroundColor: 'transparent',\n      boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n      borderColor: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst ValidationTextField = styled(TextField)({\n  '& input:valid + fieldset': {\n    borderColor: 'green',\n    borderWidth: 2,\n  },\n  '& input:invalid + fieldset': {\n    borderColor: 'red',\n    borderWidth: 2,\n  },\n  '& input:valid:focus + fieldset': {\n    borderLeftWidth: 6,\n    padding: '4px !important', // override inline-style\n  },\n});\n\nexport default function CustomizedInputs() {\n  return (\n    <Box\n      component=\"form\"\n      noValidate\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: { sm: '1fr 1fr' },\n        gap: 2,\n      }}\n    >\n      <FormControl variant=\"standard\">\n        <InputLabel shrink htmlFor=\"bootstrap-input\">\n          Bootstrap\n        </InputLabel>\n        <BootstrapInput defaultValue=\"react-bootstrap\" id=\"bootstrap-input\" />\n      </FormControl>\n      <RedditTextField\n        label=\"Reddit\"\n        defaultValue=\"react-reddit\"\n        id=\"reddit-input\"\n        variant=\"filled\"\n        style={{ marginTop: 11 }}\n      />\n      <CssTextField label=\"Custom CSS\" id=\"custom-css-outlined-input\" />\n      <ValidationTextField\n        label=\"CSS validation style\"\n        required\n        variant=\"outlined\"\n        defaultValue=\"Success\"\n        id=\"validation-outlined-input\"\n      />\n    </Box>\n  );\n}\n"},"CustomizedInputBase.js":{module:"./CustomizedInputBase.js",raw:"import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport SearchIcon from '@mui/icons-material/Search';\nimport DirectionsIcon from '@mui/icons-material/Directions';\n\nexport default function CustomizedInputBase() {\n  return (\n    <Paper\n      component=\"form\"\n      sx={{ p: '2px 4px', display: 'flex', alignItems: 'center', width: 400 }}\n    >\n      <IconButton sx={{ p: '10px' }} aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <InputBase\n        sx={{ ml: 1, flex: 1 }}\n        placeholder=\"Search Google Maps\"\n        inputProps={{ 'aria-label': 'search google maps' }}\n      />\n      <IconButton type=\"button\" sx={{ p: '10px' }} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n      <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n      <IconButton color=\"primary\" sx={{ p: '10px' }} aria-label=\"directions\">\n        <DirectionsIcon />\n      </IconButton>\n    </Paper>\n  );\n}\n",moduleTS:"./CustomizedInputBase.js",rawTS:"import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport SearchIcon from '@mui/icons-material/Search';\nimport DirectionsIcon from '@mui/icons-material/Directions';\n\nexport default function CustomizedInputBase() {\n  return (\n    <Paper\n      component=\"form\"\n      sx={{ p: '2px 4px', display: 'flex', alignItems: 'center', width: 400 }}\n    >\n      <IconButton sx={{ p: '10px' }} aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <InputBase\n        sx={{ ml: 1, flex: 1 }}\n        placeholder=\"Search Google Maps\"\n        inputProps={{ 'aria-label': 'search google maps' }}\n      />\n      <IconButton type=\"button\" sx={{ p: '10px' }} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n      <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n      <IconButton color=\"primary\" sx={{ p: '10px' }} aria-label=\"directions\">\n        <DirectionsIcon />\n      </IconButton>\n    </Paper>\n  );\n}\n"},"UseFormControl.js":{module:"./UseFormControl.js",raw:"import * as React from 'react';\nimport FormControl, { useFormControl } from '@mui/material/FormControl';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Box from '@mui/material/Box';\nimport FormHelperText from '@mui/material/FormHelperText';\n\nfunction MyFormHelperText() {\n  const { focused } = useFormControl() || {};\n\n  const helperText = React.useMemo(() => {\n    if (focused) {\n      return 'This field is being focused';\n    }\n\n    return 'Helper text';\n  }, [focused]);\n\n  return <FormHelperText>{helperText}</FormHelperText>;\n}\n\nexport default function UseFormControl() {\n  return (\n    <Box component=\"form\" noValidate autoComplete=\"off\">\n      <FormControl sx={{ width: '25ch' }}>\n        <OutlinedInput placeholder=\"Please enter text\" />\n        <MyFormHelperText />\n      </FormControl>\n    </Box>\n  );\n}\n",jsxPreview:"<FormControl sx={{ width: '25ch' }}>\n  <OutlinedInput placeholder=\"Please enter text\" />\n  <MyFormHelperText />\n</FormControl>",moduleTS:"./UseFormControl.js",rawTS:"import * as React from 'react';\nimport FormControl, { useFormControl } from '@mui/material/FormControl';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Box from '@mui/material/Box';\nimport FormHelperText from '@mui/material/FormHelperText';\n\nfunction MyFormHelperText() {\n  const { focused } = useFormControl() || {};\n\n  const helperText = React.useMemo(() => {\n    if (focused) {\n      return 'This field is being focused';\n    }\n\n    return 'Helper text';\n  }, [focused]);\n\n  return <FormHelperText>{helperText}</FormHelperText>;\n}\n\nexport default function UseFormControl() {\n  return (\n    <Box component=\"form\" noValidate autoComplete=\"off\">\n      <FormControl sx={{ width: '25ch' }}>\n        <OutlinedInput placeholder=\"Please enter text\" />\n        <MyFormHelperText />\n      </FormControl>\n    </Box>\n  );\n}\n"},"HelperTextAligned.js":{module:"./HelperTextAligned.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport default function HelperTextAligned() {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        '& > :not(style)': { m: 1 },\n      }}\n    >\n      <TextField\n        helperText=\"Please enter your name\"\n        id=\"demo-helper-text-aligned\"\n        label=\"Name\"\n      />\n      <TextField\n        helperText=\" \"\n        id=\"demo-helper-text-aligned-no-helper\"\n        label=\"Name\"\n      />\n    </Box>\n  );\n}\n",jsxPreview:'<TextField\n  helperText="Please enter your name"\n  id="demo-helper-text-aligned"\n  label="Name"\n/>\n<TextField\n  helperText=" "\n  id="demo-helper-text-aligned-no-helper"\n  label="Name"\n/>',moduleTS:"./HelperTextAligned.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport default function HelperTextAligned() {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        '& > :not(style)': { m: 1 },\n      }}\n    >\n      <TextField\n        helperText=\"Please enter your name\"\n        id=\"demo-helper-text-aligned\"\n        label=\"Name\"\n      />\n      <TextField\n        helperText=\" \"\n        id=\"demo-helper-text-aligned-no-helper\"\n        label=\"Name\"\n      />\n    </Box>\n  );\n}\n"},"HelperTextMisaligned.js":{module:"./HelperTextMisaligned.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport default function HelperTextMisaligned() {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        '& > :not(style)': { m: 1 },\n      }}\n    >\n      <TextField\n        helperText=\"Please enter your name\"\n        id=\"demo-helper-text-misaligned\"\n        label=\"Name\"\n      />\n      <TextField id=\"demo-helper-text-misaligned-no-helper\" label=\"Name\" />\n    </Box>\n  );\n}\n",jsxPreview:'<TextField\n  helperText="Please enter your name"\n  id="demo-helper-text-misaligned"\n  label="Name"\n/>\n<TextField id="demo-helper-text-misaligned-no-helper" label="Name" />',moduleTS:"./HelperTextMisaligned.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport default function HelperTextMisaligned() {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        '& > :not(style)': { m: 1 },\n      }}\n    >\n      <TextField\n        helperText=\"Please enter your name\"\n        id=\"demo-helper-text-misaligned\"\n        label=\"Name\"\n      />\n      <TextField id=\"demo-helper-text-misaligned-no-helper\" label=\"Name\" />\n    </Box>\n  );\n}\n"},"FormattedInputs.js":{module:"./FormattedInputs.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { IMaskInput } from 'react-imask';\nimport NumberFormat from 'react-number-format';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\n\nconst TextMaskCustom = React.forwardRef(function TextMaskCustom(props, ref) {\n  const { onChange, ...other } = props;\n  return (\n    <IMaskInput\n      {...other}\n      mask=\"(#00) 000-0000\"\n      definitions={{\n        '#': /[1-9]/,\n      }}\n      inputRef={ref}\n      onAccept={(value) => onChange({ target: { name: props.name, value } })}\n      overwrite\n    />\n  );\n});\n\nTextMaskCustom.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst NumberFormatCustom = React.forwardRef(function NumberFormatCustom(props, ref) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"$\"\n    />\n  );\n});\n\nNumberFormatCustom.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default function FormattedInputs() {\n  const [values, setValues] = React.useState({\n    textmask: '(100) 000-0000',\n    numberformat: '1320',\n  });\n\n  const handleChange = (event) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <Box\n      sx={{\n        '& > :not(style)': {\n          m: 1,\n        },\n      }}\n    >\n      <FormControl variant=\"standard\">\n        <InputLabel htmlFor=\"formatted-text-mask-input\">react-imask</InputLabel>\n        <Input\n          value={values.textmask}\n          onChange={handleChange}\n          name=\"textmask\"\n          id=\"formatted-text-mask-input\"\n          inputComponent={TextMaskCustom}\n        />\n      </FormControl>\n      <TextField\n        label=\"react-number-format\"\n        value={values.numberformat}\n        onChange={handleChange}\n        name=\"numberformat\"\n        id=\"formatted-numberformat-input\"\n        InputProps={{\n          inputComponent: NumberFormatCustom,\n        }}\n        variant=\"standard\"\n      />\n    </Box>\n  );\n}\n",moduleTS:"./FormattedInputs.js",rawTS:"import * as React from 'react';\nimport { IMaskInput } from 'react-imask';\nimport NumberFormat, { InputAttributes } from 'react-number-format';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\n\ninterface CustomProps {\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n}\n\nconst TextMaskCustom = React.forwardRef<HTMLElement, CustomProps>(\n  function TextMaskCustom(props, ref) {\n    const { onChange, ...other } = props;\n    return (\n      <IMaskInput\n        {...other}\n        mask=\"(#00) 000-0000\"\n        definitions={{\n          '#': /[1-9]/,\n        }}\n        inputRef={ref}\n        onAccept={(value: any) => onChange({ target: { name: props.name, value } })}\n        overwrite\n      />\n    );\n  },\n);\n\nconst NumberFormatCustom = React.forwardRef<\n  NumberFormat<InputAttributes>,\n  CustomProps\n>(function NumberFormatCustom(props, ref) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"$\"\n    />\n  );\n});\n\ninterface State {\n  textmask: string;\n  numberformat: string;\n}\n\nexport default function FormattedInputs() {\n  const [values, setValues] = React.useState<State>({\n    textmask: '(100) 000-0000',\n    numberformat: '1320',\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <Box\n      sx={{\n        '& > :not(style)': {\n          m: 1,\n        },\n      }}\n    >\n      <FormControl variant=\"standard\">\n        <InputLabel htmlFor=\"formatted-text-mask-input\">react-imask</InputLabel>\n        <Input\n          value={values.textmask}\n          onChange={handleChange}\n          name=\"textmask\"\n          id=\"formatted-text-mask-input\"\n          inputComponent={TextMaskCustom as any}\n        />\n      </FormControl>\n      <TextField\n        label=\"react-number-format\"\n        value={values.numberformat}\n        onChange={handleChange}\n        name=\"numberformat\"\n        id=\"formatted-numberformat-input\"\n        InputProps={{\n          inputComponent: NumberFormatCustom as any,\n        }}\n        variant=\"standard\"\n      />\n    </Box>\n  );\n}\n"}},Oe={"./BasicTextFields.js":function(){return(0,d.jsxs)(r.Z,{component:"form",sx:{"& > :not(style)":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[t||(t=(0,d.jsx)(p.Z,{id:"outlined-basic",label:"Outlined",variant:"outlined"})),o||(o=(0,d.jsx)(p.Z,{id:"filled-basic",label:"Filled",variant:"filled"})),l||(l=(0,d.jsx)(p.Z,{id:"standard-basic",label:"Standard",variant:"standard"}))]})},"./MultilineTextFields.js":function(){var n=s.useState("Controlled"),e=(0,b.Z)(n,2),a=e[0],t=e[1],o=function(n){t(n.target.value)};return(0,d.jsxs)(r.Z,{component:"form",sx:{"& .MuiTextField-root":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{id:"outlined-multiline-flexible",label:"Multiline",multiline:!0,maxRows:4,value:a,onChange:o}),c||(c=(0,d.jsx)(p.Z,{id:"outlined-textarea",label:"Multiline Placeholder",placeholder:"Placeholder",multiline:!0})),u||(u=(0,d.jsx)(p.Z,{id:"outlined-multiline-static",label:"Multiline",multiline:!0,rows:4,defaultValue:"Default Value"}))]}),(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{id:"filled-multiline-flexible",label:"Multiline",multiline:!0,maxRows:4,value:a,onChange:o,variant:"filled"}),m||(m=(0,d.jsx)(p.Z,{id:"filled-textarea",label:"Multiline Placeholder",placeholder:"Placeholder",multiline:!0,variant:"filled"})),h||(h=(0,d.jsx)(p.Z,{id:"filled-multiline-static",label:"Multiline",multiline:!0,rows:4,defaultValue:"Default Value",variant:"filled"}))]}),(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{id:"standard-multiline-flexible",label:"Multiline",multiline:!0,maxRows:4,value:a,onChange:o,variant:"standard"}),f||(f=(0,d.jsx)(p.Z,{id:"standard-textarea",label:"Multiline Placeholder",placeholder:"Placeholder",multiline:!0,variant:"standard"})),x||(x=(0,d.jsx)(p.Z,{id:"standard-multiline-static",label:"Multiline",multiline:!0,rows:4,defaultValue:"Default Value",variant:"standard"}))]})]})},"./SelectTextFields.js":function(){var n=s.useState("EUR"),e=(0,b.Z)(n,2),a=e[0],t=e[1],o=function(n){t(n.target.value)};return(0,d.jsxs)(r.Z,{component:"form",sx:{"& .MuiTextField-root":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{id:"outlined-select-currency",select:!0,label:"Select",value:a,onChange:o,helperText:"Please select your currency",children:z.map((function(n){return(0,d.jsx)(Z.Z,{value:n.value,children:n.label},n.value)}))}),(0,d.jsx)(p.Z,{id:"outlined-select-currency-native",select:!0,label:"Native select",value:a,onChange:o,SelectProps:{native:!0},helperText:"Please select your currency",children:z.map((function(n){return(0,d.jsx)("option",{value:n.value,children:n.label},n.value)}))})]}),(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{id:"filled-select-currency",select:!0,label:"Select",value:a,onChange:o,helperText:"Please select your currency",variant:"filled",children:z.map((function(n){return(0,d.jsx)(Z.Z,{value:n.value,children:n.label},n.value)}))}),(0,d.jsx)(p.Z,{id:"filled-select-currency-native",select:!0,label:"Native select",value:a,onChange:o,SelectProps:{native:!0},helperText:"Please select your currency",variant:"filled",children:z.map((function(n){return(0,d.jsx)("option",{value:n.value,children:n.label},n.value)}))})]}),(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{id:"standard-select-currency",select:!0,label:"Select",value:a,onChange:o,helperText:"Please select your currency",variant:"standard",children:z.map((function(n){return(0,d.jsx)(Z.Z,{value:n.value,children:n.label},n.value)}))}),(0,d.jsx)(p.Z,{id:"standard-select-currency-native",select:!0,label:"Native select",value:a,onChange:o,SelectProps:{native:!0},helperText:"Please select your currency",variant:"standard",children:z.map((function(n){return(0,d.jsx)("option",{value:n.value,children:n.label},n.value)}))})]})]})},"./FormPropsTextFields.js":function(){return(0,d.jsxs)(r.Z,{component:"form",sx:{"& .MuiTextField-root":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[(0,d.jsxs)("div",{children:[g||(g=(0,d.jsx)(p.Z,{required:!0,id:"outlined-required",label:"Required",defaultValue:"Hello World"})),v||(v=(0,d.jsx)(p.Z,{disabled:!0,id:"outlined-disabled",label:"Disabled",defaultValue:"Hello World"})),k||(k=(0,d.jsx)(p.Z,{id:"outlined-password-input",label:"Password",type:"password",autoComplete:"current-password"})),(0,d.jsx)(p.Z,{id:"outlined-read-only-input",label:"Read Only",defaultValue:"Hello World",InputProps:{readOnly:!0}}),(0,d.jsx)(p.Z,{id:"outlined-number",label:"Number",type:"number",InputLabelProps:{shrink:!0}}),y||(y=(0,d.jsx)(p.Z,{id:"outlined-search",label:"Search field",type:"search"})),F||(F=(0,d.jsx)(p.Z,{id:"outlined-helperText",label:"Helper text",defaultValue:"Default Value",helperText:"Some important text"}))]}),(0,d.jsxs)("div",{children:[C||(C=(0,d.jsx)(p.Z,{required:!0,id:"filled-required",label:"Required",defaultValue:"Hello World",variant:"filled"})),T||(T=(0,d.jsx)(p.Z,{disabled:!0,id:"filled-disabled",label:"Disabled",defaultValue:"Hello World",variant:"filled"})),w||(w=(0,d.jsx)(p.Z,{id:"filled-password-input",label:"Password",type:"password",autoComplete:"current-password",variant:"filled"})),(0,d.jsx)(p.Z,{id:"filled-read-only-input",label:"Read Only",defaultValue:"Hello World",InputProps:{readOnly:!0},variant:"filled"}),(0,d.jsx)(p.Z,{id:"filled-number",label:"Number",type:"number",InputLabelProps:{shrink:!0},variant:"filled"}),I||(I=(0,d.jsx)(p.Z,{id:"filled-search",label:"Search field",type:"search",variant:"filled"})),j||(j=(0,d.jsx)(p.Z,{id:"filled-helperText",label:"Helper text",defaultValue:"Default Value",helperText:"Some important text",variant:"filled"}))]}),(0,d.jsxs)("div",{children:[S||(S=(0,d.jsx)(p.Z,{required:!0,id:"standard-required",label:"Required",defaultValue:"Hello World",variant:"standard"})),M||(M=(0,d.jsx)(p.Z,{disabled:!0,id:"standard-disabled",label:"Disabled",defaultValue:"Hello World",variant:"standard"})),P||(P=(0,d.jsx)(p.Z,{id:"standard-password-input",label:"Password",type:"password",autoComplete:"current-password",variant:"standard"})),(0,d.jsx)(p.Z,{id:"standard-read-only-input",label:"Read Only",defaultValue:"Hello World",InputProps:{readOnly:!0},variant:"standard"}),(0,d.jsx)(p.Z,{id:"standard-number",label:"Number",type:"number",InputLabelProps:{shrink:!0},variant:"standard"}),B||(B=(0,d.jsx)(p.Z,{id:"standard-search",label:"Search field",type:"search",variant:"standard"})),V||(V=(0,d.jsx)(p.Z,{id:"standard-helperText",label:"Helper text",defaultValue:"Default Value",helperText:"Some important text",variant:"standard"}))]})]})},"./InputWithIcon.js":function(){return(0,d.jsxs)(r.Z,{sx:{"& > :not(style)":{m:1}},children:[A||(A=(0,d.jsxs)(D.Z,{variant:"standard",children:[(0,d.jsx)(N.Z,{htmlFor:"input-with-icon-adornment",children:"With a start adornment"}),(0,d.jsx)(O.Z,{id:"input-with-icon-adornment",startAdornment:(0,d.jsx)(U.Z,{position:"start",children:(0,d.jsx)(E.default,{})})})]})),(0,d.jsx)(p.Z,{id:"input-with-icon-textfield",label:"TextField",InputProps:{startAdornment:L||(L=(0,d.jsx)(U.Z,{position:"start",children:(0,d.jsx)(E.default,{})}))},variant:"standard"}),(0,d.jsxs)(r.Z,{sx:{display:"flex",alignItems:"flex-end"},children:[(0,d.jsx)(E.default,{sx:{color:"action.active",mr:1,my:.5}}),R||(R=(0,d.jsx)(p.Z,{id:"input-with-sx",label:"With sx",variant:"standard"}))]})]})},"./ValidationTextFields.js":function(){return(0,d.jsxs)(r.Z,{component:"form",sx:{"& .MuiTextField-root":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[H||(H=(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{error:!0,id:"outlined-error",label:"Error",defaultValue:"Hello World"}),(0,d.jsx)(p.Z,{error:!0,id:"outlined-error-helper-text",label:"Error",defaultValue:"Hello World",helperText:"Incorrect entry."})]})),q||(q=(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{error:!0,id:"filled-error",label:"Error",defaultValue:"Hello World",variant:"filled"}),(0,d.jsx)(p.Z,{error:!0,id:"filled-error-helper-text",label:"Error",defaultValue:"Hello World",helperText:"Incorrect entry.",variant:"filled"})]})),W||(W=(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{error:!0,id:"standard-error",label:"Error",defaultValue:"Hello World",variant:"standard"}),(0,d.jsx)(p.Z,{error:!0,id:"standard-error-helper-text",label:"Error",defaultValue:"Hello World",helperText:"Incorrect entry.",variant:"standard"})]}))]})},"./InputAdornments.js":function(){var n=s.useState({amount:"",password:"",weight:"",weightRange:"",showPassword:!1}),e=(0,b.Z)(n,2),a=e[0],t=e[1],o=function(n){return function(e){t((0,yn.Z)((0,yn.Z)({},a),{},(0,kn.Z)({},n,e.target.value)))}},l=function(){t((0,yn.Z)((0,yn.Z)({},a),{},{showPassword:!a.showPassword}))},i=function(n){n.preventDefault()};return(0,d.jsxs)(r.Z,{sx:{display:"flex",flexWrap:"wrap"},children:[(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{label:"With normal TextField",id:"outlined-start-adornment",sx:{m:1,width:"25ch"},InputProps:{startAdornment:$||($=(0,d.jsx)(U.Z,{position:"start",children:"kg"}))}}),(0,d.jsxs)(D.Z,{sx:{m:1,width:"25ch"},variant:"outlined",children:[(0,d.jsx)(Tn.Z,{id:"outlined-adornment-weight",value:a.weight,onChange:o("weight"),endAdornment:K||(K=(0,d.jsx)(U.Z,{position:"end",children:"kg"})),"aria-describedby":"outlined-weight-helper-text",inputProps:{"aria-label":"weight"}}),_||(_=(0,d.jsx)(wn.Z,{id:"outlined-weight-helper-text",children:"Weight"}))]}),(0,d.jsxs)(D.Z,{sx:{m:1,width:"25ch"},variant:"outlined",children:[Y||(Y=(0,d.jsx)(N.Z,{htmlFor:"outlined-adornment-password",children:"Password"})),(0,d.jsx)(Tn.Z,{id:"outlined-adornment-password",type:a.showPassword?"text":"password",value:a.password,onChange:o("password"),endAdornment:(0,d.jsx)(U.Z,{position:"end",children:(0,d.jsx)(Fn.Z,{"aria-label":"toggle password visibility",onClick:l,onMouseDown:i,edge:"end",children:a.showPassword?G||(G=(0,d.jsx)(jn.default,{})):J||(J=(0,d.jsx)(In.default,{}))})}),label:"Password"})]}),(0,d.jsxs)(D.Z,{fullWidth:!0,sx:{m:1},children:[X||(X=(0,d.jsx)(N.Z,{htmlFor:"outlined-adornment-amount",children:"Amount"})),(0,d.jsx)(Tn.Z,{id:"outlined-adornment-amount",value:a.amount,onChange:o("amount"),startAdornment:Q||(Q=(0,d.jsx)(U.Z,{position:"start",children:"$"})),label:"Amount"})]})]}),(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{label:"With normal TextField",id:"filled-start-adornment",sx:{m:1,width:"25ch"},InputProps:{startAdornment:nn||(nn=(0,d.jsx)(U.Z,{position:"start",children:"kg"}))},variant:"filled"}),(0,d.jsxs)(D.Z,{sx:{m:1,width:"25ch"},variant:"filled",children:[(0,d.jsx)(Cn.Z,{id:"filled-adornment-weight",value:a.weight,onChange:o("weight"),endAdornment:en||(en=(0,d.jsx)(U.Z,{position:"end",children:"kg"})),"aria-describedby":"filled-weight-helper-text",inputProps:{"aria-label":"weight"}}),an||(an=(0,d.jsx)(wn.Z,{id:"filled-weight-helper-text",children:"Weight"}))]}),(0,d.jsxs)(D.Z,{sx:{m:1,width:"25ch"},variant:"filled",children:[tn||(tn=(0,d.jsx)(N.Z,{htmlFor:"filled-adornment-password",children:"Password"})),(0,d.jsx)(Cn.Z,{id:"filled-adornment-password",type:a.showPassword?"text":"password",value:a.password,onChange:o("password"),endAdornment:(0,d.jsx)(U.Z,{position:"end",children:(0,d.jsx)(Fn.Z,{"aria-label":"toggle password visibility",onClick:l,onMouseDown:i,edge:"end",children:a.showPassword?on||(on=(0,d.jsx)(jn.default,{})):ln||(ln=(0,d.jsx)(In.default,{}))})})})]}),(0,d.jsxs)(D.Z,{fullWidth:!0,sx:{m:1},variant:"filled",children:[sn||(sn=(0,d.jsx)(N.Z,{htmlFor:"filled-adornment-amount",children:"Amount"})),(0,d.jsx)(Cn.Z,{id:"filled-adornment-amount",value:a.amount,onChange:o("amount"),startAdornment:rn||(rn=(0,d.jsx)(U.Z,{position:"start",children:"$"}))})]})]}),(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{label:"With normal TextField",id:"standard-start-adornment",sx:{m:1,width:"25ch"},InputProps:{startAdornment:pn||(pn=(0,d.jsx)(U.Z,{position:"start",children:"kg"}))},variant:"standard"}),(0,d.jsxs)(D.Z,{variant:"standard",sx:{m:1,mt:3,width:"25ch"},children:[(0,d.jsx)(O.Z,{id:"standard-adornment-weight",value:a.weight,onChange:o("weight"),endAdornment:dn||(dn=(0,d.jsx)(U.Z,{position:"end",children:"kg"})),"aria-describedby":"standard-weight-helper-text",inputProps:{"aria-label":"weight"}}),cn||(cn=(0,d.jsx)(wn.Z,{id:"standard-weight-helper-text",children:"Weight"}))]}),(0,d.jsxs)(D.Z,{sx:{m:1,width:"25ch"},variant:"standard",children:[un||(un=(0,d.jsx)(N.Z,{htmlFor:"standard-adornment-password",children:"Password"})),(0,d.jsx)(O.Z,{id:"standard-adornment-password",type:a.showPassword?"text":"password",value:a.password,onChange:o("password"),endAdornment:(0,d.jsx)(U.Z,{position:"end",children:(0,d.jsx)(Fn.Z,{"aria-label":"toggle password visibility",onClick:l,onMouseDown:i,children:a.showPassword?mn||(mn=(0,d.jsx)(jn.default,{})):hn||(hn=(0,d.jsx)(In.default,{}))})})})]}),(0,d.jsxs)(D.Z,{fullWidth:!0,sx:{m:1},variant:"standard",children:[fn||(fn=(0,d.jsx)(N.Z,{htmlFor:"standard-adornment-amount",children:"Amount"})),(0,d.jsx)(O.Z,{id:"standard-adornment-amount",value:a.amount,onChange:o("amount"),startAdornment:xn||(xn=(0,d.jsx)(U.Z,{position:"start",children:"$"}))})]})]})]})},"./TextFieldSizes.js":function(){return(0,d.jsxs)(r.Z,{component:"form",sx:{"& .MuiTextField-root":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[bn||(bn=(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{label:"Size",id:"outlined-size-small",defaultValue:"Small",size:"small"}),(0,d.jsx)(p.Z,{label:"Size",id:"outlined-size-normal",defaultValue:"Normal"})]})),gn||(gn=(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{label:"Size",id:"filled-size-small",defaultValue:"Small",variant:"filled",size:"small"}),(0,d.jsx)(p.Z,{label:"Size",id:"filled-size-normal",defaultValue:"Normal",variant:"filled"})]})),vn||(vn=(0,d.jsxs)("div",{children:[(0,d.jsx)(p.Z,{label:"Size",id:"standard-size-small",defaultValue:"Small",size:"small",variant:"standard"}),(0,d.jsx)(p.Z,{label:"Size",id:"standard-size-normal",defaultValue:"Normal",variant:"standard"})]}))]})},"./TextFieldHiddenLabel.js":function(){return(0,d.jsxs)(Xn.Z,{component:"form",sx:{width:"25ch"},spacing:2,noValidate:!0,autoComplete:"off",children:[Sn||(Sn=(0,d.jsx)(p.Z,{hiddenLabel:!0,id:"filled-hidden-label-small",defaultValue:"Small",variant:"filled",size:"small"})),Mn||(Mn=(0,d.jsx)(p.Z,{hiddenLabel:!0,id:"filled-hidden-label-normal",defaultValue:"Normal",variant:"filled"}))]})},"./LayoutTextFields.js":function(){return(0,d.jsxs)(r.Z,{sx:{display:"flex",flexDirection:"column","& .MuiTextField-root":{width:"25ch"}},children:[Pn||(Pn=(0,d.jsx)(Qn,{})),Bn||(Bn=(0,d.jsx)(p.Z,{label:'margin="none"',id:"margin-none"})),Vn||(Vn=(0,d.jsx)(Qn,{})),Zn||(Zn=(0,d.jsx)(p.Z,{label:'margin="dense"',id:"margin-dense",margin:"dense"})),zn||(zn=(0,d.jsx)(Qn,{})),An||(An=(0,d.jsx)(p.Z,{label:'margin="normal"',id:"margin-normal",margin:"normal"})),Ln||(Ln=(0,d.jsx)(Qn,{}))]})},"./FullWidthTextField.js":function(){return(0,d.jsx)(r.Z,{sx:{width:500,maxWidth:"100%"},children:Rn||(Rn=(0,d.jsx)(p.Z,{fullWidth:!0,label:"fullWidth",id:"fullWidth"}))})},"./ComposedTextField.js":function(){var n=s.useState("Composed TextField"),e=(0,b.Z)(n,2),a=e[0],t=e[1],o=function(n){t(n.target.value)};return(0,d.jsxs)(r.Z,{component:"form",sx:{"& > :not(style)":{m:1}},noValidate:!0,autoComplete:"off",children:[(0,d.jsxs)(D.Z,{variant:"standard",children:[Hn||(Hn=(0,d.jsx)(N.Z,{htmlFor:"component-simple",children:"Name"})),(0,d.jsx)(O.Z,{id:"component-simple",value:a,onChange:o})]}),(0,d.jsxs)(D.Z,{variant:"standard",children:[qn||(qn=(0,d.jsx)(N.Z,{htmlFor:"component-helper",children:"Name"})),(0,d.jsx)(O.Z,{id:"component-helper",value:a,onChange:o,"aria-describedby":"component-helper-text"}),Wn||(Wn=(0,d.jsx)(wn.Z,{id:"component-helper-text",children:"Some important helper text"}))]}),(0,d.jsxs)(D.Z,{disabled:!0,variant:"standard",children:[On||(On=(0,d.jsx)(N.Z,{htmlFor:"component-disabled",children:"Name"})),(0,d.jsx)(O.Z,{id:"component-disabled",value:a,onChange:o}),Nn||(Nn=(0,d.jsx)(wn.Z,{children:"Disabled"}))]}),(0,d.jsxs)(D.Z,{error:!0,variant:"standard",children:[Un||(Un=(0,d.jsx)(N.Z,{htmlFor:"component-error",children:"Name"})),(0,d.jsx)(O.Z,{id:"component-error",value:a,onChange:o,"aria-describedby":"component-error-text"}),Dn||(Dn=(0,d.jsx)(wn.Z,{id:"component-error-text",children:"Error"}))]}),(0,d.jsxs)(D.Z,{children:[En||(En=(0,d.jsx)(N.Z,{htmlFor:"component-outlined",children:"Name"})),(0,d.jsx)(Tn.Z,{id:"component-outlined",value:a,onChange:o,label:"Name"})]}),(0,d.jsxs)(D.Z,{variant:"filled",children:[$n||($n=(0,d.jsx)(N.Z,{htmlFor:"component-filled",children:"Name"})),(0,d.jsx)(Cn.Z,{id:"component-filled",value:a,onChange:o})]})]})},"./StateTextFields.js":function(){var n=s.useState("Cat in the Hat"),e=(0,b.Z)(n,2),a=e[0],t=e[1];return(0,d.jsxs)(r.Z,{component:"form",sx:{"& > :not(style)":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[(0,d.jsx)(p.Z,{id:"outlined-name",label:"Name",value:a,onChange:function(n){t(n.target.value)}}),Kn||(Kn=(0,d.jsx)(p.Z,{id:"outlined-uncontrolled",label:"Uncontrolled",defaultValue:"foo"}))]})},"./Inputs.js":function(){return(0,d.jsxs)(r.Z,{component:"form",sx:{"& > :not(style)":{m:1}},noValidate:!0,autoComplete:"off",children:[_n||(_n=(0,d.jsx)(O.Z,{defaultValue:"Hello world",inputProps:te})),Yn||(Yn=(0,d.jsx)(O.Z,{placeholder:"Placeholder",inputProps:te})),Gn||(Gn=(0,d.jsx)(O.Z,{disabled:!0,defaultValue:"Disabled",inputProps:te})),Jn||(Jn=(0,d.jsx)(O.Z,{defaultValue:"Error",error:!0,inputProps:te}))]})},"./ColorTextFields.js":function(){return(0,d.jsxs)(r.Z,{component:"form",sx:{"& > :not(style)":{m:1,width:"25ch"}},noValidate:!0,autoComplete:"off",children:[ne||(ne=(0,d.jsx)(p.Z,{label:"Outlined secondary",color:"secondary",focused:!0})),ee||(ee=(0,d.jsx)(p.Z,{label:"Filled success",variant:"filled",color:"success",focused:!0})),ae||(ae=(0,d.jsx)(p.Z,{label:"Standard warning",variant:"standard",color:"warning",focused:!0}))]})},"./CustomizedInputs.js":function(){return(0,d.jsxs)(r.Z,{component:"form",noValidate:!0,sx:{display:"grid",gridTemplateColumns:{sm:"1fr 1fr"},gap:2},children:[oe||(oe=(0,d.jsxs)(D.Z,{variant:"standard",children:[(0,d.jsx)(N.Z,{shrink:!0,htmlFor:"bootstrap-input",children:"Bootstrap"}),(0,d.jsx)(ce,{defaultValue:"react-bootstrap",id:"bootstrap-input"})]})),(0,d.jsx)(ue,{label:"Reddit",defaultValue:"react-reddit",id:"reddit-input",variant:"filled",style:{marginTop:11}}),le||(le=(0,d.jsx)(de,{label:"Custom CSS",id:"custom-css-outlined-input"})),se||(se=(0,d.jsx)(me,{label:"CSS validation style",required:!0,variant:"outlined",defaultValue:"Success",id:"validation-outlined-input"}))]})},"./CustomizedInputBase.js":function(){return(0,d.jsxs)(be.Z,{component:"form",sx:{p:"2px 4px",display:"flex",alignItems:"center",width:400},children:[(0,d.jsx)(Fn.Z,{sx:{p:"10px"},"aria-label":"menu",children:he||(he=(0,d.jsx)(ve.default,{}))}),(0,d.jsx)(pe.ZP,{sx:{ml:1,flex:1},placeholder:"Search Google Maps",inputProps:{"aria-label":"search google maps"}}),(0,d.jsx)(Fn.Z,{type:"button",sx:{p:"10px"},"aria-label":"search",children:fe||(fe=(0,d.jsx)(ke.default,{}))}),(0,d.jsx)(ge.Z,{sx:{height:28,m:.5},orientation:"vertical"}),(0,d.jsx)(Fn.Z,{color:"primary",sx:{p:"10px"},"aria-label":"directions",children:xe||(xe=(0,d.jsx)(ye.default,{}))})]})},"./UseFormControl.js":function(){return(0,d.jsx)(r.Z,{component:"form",noValidate:!0,autoComplete:"off",children:(0,d.jsxs)(D.Z,{sx:{width:"25ch"},children:[Fe||(Fe=(0,d.jsx)(Tn.Z,{placeholder:"Please enter text"})),Ce||(Ce=(0,d.jsx)(Me,{}))]})})},"./HelperTextAligned.js":function(){return(0,d.jsxs)(r.Z,{sx:{display:"flex",alignItems:"center","& > :not(style)":{m:1}},children:[Te||(Te=(0,d.jsx)(p.Z,{helperText:"Please enter your name",id:"demo-helper-text-aligned",label:"Name"})),we||(we=(0,d.jsx)(p.Z,{helperText:" ",id:"demo-helper-text-aligned-no-helper",label:"Name"}))]})},"./HelperTextMisaligned.js":function(){return(0,d.jsxs)(r.Z,{sx:{display:"flex",alignItems:"center","& > :not(style)":{m:1}},children:[Ie||(Ie=(0,d.jsx)(p.Z,{helperText:"Please enter your name",id:"demo-helper-text-misaligned",label:"Name"})),je||(je=(0,d.jsx)(p.Z,{id:"demo-helper-text-misaligned-no-helper",label:"Name"}))]})},"./FormattedInputs.js":function(){var n=s.useState({textmask:"(100) 000-0000",numberformat:"1320"}),e=(0,b.Z)(n,2),a=e[0],t=e[1],o=function(n){t((0,yn.Z)((0,yn.Z)({},a),{},(0,kn.Z)({},n.target.name,n.target.value)))};return(0,d.jsxs)(r.Z,{sx:{"& > :not(style)":{m:1}},children:[(0,d.jsxs)(D.Z,{variant:"standard",children:[Pe||(Pe=(0,d.jsx)(N.Z,{htmlFor:"formatted-text-mask-input",children:"react-imask"})),(0,d.jsx)(O.Z,{value:a.textmask,onChange:o,name:"textmask",id:"formatted-text-mask-input",inputComponent:Le})]}),(0,d.jsx)(p.Z,{label:"react-number-format",value:a.numberformat,onChange:o,name:"numberformat",id:"formatted-numberformat-input",InputProps:{inputComponent:Re},variant:"standard"})]})}};function Ne(){return He||(He=(0,d.jsx)(i.Z,{demos:We,docs:qe,demoComponents:Oe}))}},847635:function(n,e,a){"use strict";a.d(e,{Z:function(){return F}});var t=a(481936),o=a(957379),l=a(295649),s=a(827378),i=a(138944),r=a(501330),p=a(326162),d=a(376811),c=a(255960),u=a(760163),m=a(290763),h=a(618932);function f(n){return(0,h.Z)("MuiInputAdornment",n)}var x,b=(0,a(761424).Z)("MuiInputAdornment",["root","filled","standard","outlined","positionStart","positionEnd","disablePointerEvents","hiddenLabel","sizeSmall"]),g=a(906205),v=a(824246),k=["children","className","component","disablePointerEvents","disableTypography","position","variant"],y=(0,m.ZP)("div",{name:"MuiInputAdornment",slot:"Root",overridesResolver:function(n,e){var a=n.ownerState;return[e.root,e["position".concat((0,p.Z)(a.position))],!0===a.disablePointerEvents&&e.disablePointerEvents,e[a.variant]]}})((function(n){var e=n.theme,a=n.ownerState;return(0,l.Z)((0,l.Z)((0,l.Z)((0,l.Z)({display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center",whiteSpace:"nowrap",color:(e.vars||e).palette.action.active},"filled"===a.variant&&(0,o.Z)({},"&.".concat(b.positionStart,"&:not(.").concat(b.hiddenLabel,")"),{marginTop:16})),"start"===a.position&&{marginRight:8}),"end"===a.position&&{marginLeft:8}),!0===a.disablePointerEvents&&{pointerEvents:"none"})})),F=s.forwardRef((function(n,e){var a=(0,g.Z)({props:n,name:"MuiInputAdornment"}),o=a.children,m=a.className,h=a.component,b=void 0===h?"div":h,F=a.disablePointerEvents,C=void 0!==F&&F,T=a.disableTypography,w=void 0!==T&&T,I=a.position,j=a.variant,S=(0,t.Z)(a,k),M=(0,u.Z)()||{},P=j;j&&M.variant,M&&!P&&(P=M.variant);var B=(0,l.Z)((0,l.Z)({},a),{},{hiddenLabel:M.hiddenLabel,size:M.size,disablePointerEvents:C,position:I,variant:P}),V=function(n){var e=n.classes,a=n.disablePointerEvents,t=n.hiddenLabel,o=n.position,l=n.size,s=n.variant,i={root:["root",a&&"disablePointerEvents",o&&"position".concat((0,p.Z)(o)),s,t&&"hiddenLabel",l&&"size".concat((0,p.Z)(l))]};return(0,r.Z)(i,f,e)}(B);return(0,v.jsx)(c.Z.Provider,{value:null,children:(0,v.jsx)(y,(0,l.Z)((0,l.Z)({as:b,ownerState:B,className:(0,i.default)(V.root,m),ref:e},S),{},{children:"string"!==typeof o||w?(0,v.jsxs)(s.Fragment,{children:["start"===I?x||(x=(0,v.jsx)("span",{className:"notranslate",children:"\u200b"})):null,o]}):(0,v.jsx)(d.Z,{color:"text.secondary",children:o})}))})}))},370425:function(n,e,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/react-text-field",function(){return a(499717)}])},712905:function(n,e,a){"use strict";var t=a(573203);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=t(a(122268)),l=a(824246),s=(0,o.default)((0,l.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4c1.93 0 3.5 1.57 3.5 3.5S13.93 13 12 13s-3.5-1.57-3.5-3.5S10.07 6 12 6zm0 14c-2.03 0-4.43-.82-6.14-2.88C7.55 15.8 9.68 15 12 15s4.45.8 6.14 2.12C16.43 19.18 14.03 20 12 20z"}),"AccountCircle");e.default=s},314684:function(n,e,a){"use strict";var t=a(573203);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=t(a(122268)),l=a(824246),s=(0,o.default)((0,l.jsx)("path",{d:"m21.41 10.59-7.99-8c-.78-.78-2.05-.78-2.83 0l-8.01 8c-.78.78-.78 2.05 0 2.83l8.01 8c.78.78 2.05.78 2.83 0l7.99-8c.79-.79.79-2.05 0-2.83zM13.5 14.5V12H10v3H8v-4c0-.55.45-1 1-1h4.5V7.5L17 11l-3.5 3.5z"}),"Directions");e.default=s},542255:function(n,e,a){"use strict";var t=a(573203);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=t(a(122268)),l=a(824246),s=(0,o.default)((0,l.jsx)("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu");e.default=s},770154:function(n,e,a){"use strict";var t=a(573203);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=t(a(122268)),l=a(824246),s=(0,o.default)((0,l.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search");e.default=s},987970:function(n,e,a){"use strict";var t=a(573203);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=t(a(122268)),l=a(824246),s=(0,o.default)((0,l.jsx)("path",{d:"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"}),"Visibility");e.default=s},827108:function(n,e,a){"use strict";var t=a(573203);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=t(a(122268)),l=a(824246),s=(0,o.default)((0,l.jsx)("path",{d:"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"}),"VisibilityOff");e.default=s}},function(n){n.O(0,[75760,31194,91642,35408,85992,51588,86306,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,49774,92888,40179],(function(){return e=370425,n(n.s=e);var e}));var e=n.O();_N_E=e}]);