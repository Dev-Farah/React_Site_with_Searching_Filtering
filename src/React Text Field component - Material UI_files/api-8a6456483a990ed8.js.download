(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[17882],{493310:function(e,n,a){"use strict";a.r(n),a.d(n,{default:function(){return l}});a(827378);var o,s=a(494616),t={en:{description:"We have learned a great deal regarding how MUI is used, and the v1 rewrite allowed us to completely rethink the component API.",location:"/docs/data/material/guides/api/api.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>API design approach</h1><p class="description">We have learned a great deal regarding how MUI is used, and the v1 rewrite allowed us to completely rethink the component API.</p>\n\n<aside class="MuiCallout-root MuiCallout-info"><p>API design is hard because you can make it seem simple but it&#39;s actually deceptively complex, or make it actually simple but seem complex.</p>\n\n</aside><p><a href="https://twitter.com/sebmarkbage/status/728433349337841665">@sebmarkbage</a></p>\n<p>As Sebastian Markbage <a href="https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html">pointed out</a>, no abstraction is superior to wrong abstractions.\nWe are providing low-level components to maximize composition capabilities.</p>\n<h2 id="composition">Composition<a aria-labelledby="composition" class="anchor-link-style" href="#composition" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You may have noticed some inconsistency in the API regarding composing components.\nTo provide some transparency, we have been using the following rules when designing the API:</p>\n<ol>\n<li>Using the <code>children</code> prop is the idiomatic way to do composition with React.</li>\n<li>Sometimes we only need limited child composition, for instance when we don&#39;t need to allow child order permutations.\nIn this case, providing explicit props makes the implementation simpler and more performant; for example, the <code>Tab</code> takes an <code>icon</code> and a <code>label</code> prop.</li>\n<li>API consistency matters.</li>\n</ol>\n<h2 id="rules">Rules<a aria-labelledby="rules" class="anchor-link-style" href="#rules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Aside from the above composition trade-off, we enforce the following rules:</p>\n<h3 id="spread">Spread<a aria-labelledby="spread" class="anchor-link-style" href="#spread" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Props supplied to a component which are not explicitly documented are spread to the root element;\nfor instance, the <code>className</code> prop is applied to the root.</p>\n<p>Now, let&#39;s say you want to disable the ripples on the <code>MenuItem</code>.\nYou can take advantage of the spread behavior:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MenuItem</span></span> <span class="token attr-name">disableRipple</span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>disableRipple</code> prop will flow this way: <a href="/material-ui/api/menu-item/"><code>MenuItem</code></a> &gt; <a href="/material-ui/api/list-item/"><code>ListItem</code></a> &gt; <a href="/material-ui/api/button-base/"><code>ButtonBase</code></a>.</p>\n<h3 id="native-properties">Native properties<a aria-labelledby="native-properties" class="anchor-link-style" href="#native-properties" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>We avoid documenting native properties supported by the DOM like <a href="/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>className</code></a>.</p>\n<h3 id="css-classes">CSS Classes<a aria-labelledby="css-classes" class="anchor-link-style" href="#css-classes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>All components accept a <a href="/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>classes</code></a> prop to customize the styles.\nThe classes design answers two constraints:\nto make the classes structure as simple as possible, while sufficient to implement the Material Design guidelines.</p>\n<ul>\n<li>The class applied to the root element is always called <code>root</code>.</li>\n<li>All the default styles are grouped in a single class.</li>\n<li>The classes applied to non-root elements are prefixed with the name of the element, e.g. <code>paperWidthXs</code> in the Dialog component.</li>\n<li>The variants applied by a boolean prop <strong>aren&#39;t</strong> prefixed, e.g. the <code>rounded</code> class\napplied by the <code>rounded</code> prop.</li>\n<li>The variants applied by an enum prop <strong>are</strong> prefixed, e.g. the <code>colorPrimary</code> class\napplied by the <code>color=&quot;primary&quot;</code> prop.</li>\n<li>A variant has <strong>one level of specificity</strong>.\nThe <code>color</code> and <code>variant</code> props are considered a variant.\nThe lower the style specificity is, the simpler it is to override.</li>\n<li>We increase the specificity for a variant modifier.\nWe already <strong>have to do it</strong> for the pseudo-classes (<code>:hover</code>, <code>:focus</code>, etc.).\nIt allows much more control at the cost of more boilerplate.\nHopefully, it&#39;s also more intuitive.</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;$checked\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">checked</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="nested-components">Nested components<a aria-labelledby="nested-components" class="anchor-link-style" href="#nested-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Nested components inside a component have:</p>\n<ul>\n<li>their own flattened props when these are key to the top level component abstraction,\nfor instance an <code>id</code> prop for the <code>Input</code> component.</li>\n<li>their own <code>xxxProps</code> prop when users might need to tweak the internal render method&#39;s sub-components,\nfor instance, exposing the <code>inputProps</code> and <code>InputProps</code> props on components that use <code>Input</code> internally.</li>\n<li>their own <code>xxxComponent</code> prop for performing component injection.</li>\n<li>their own <code>xxxRef</code> prop when you might need to perform imperative actions,\nfor instance, exposing an <code>inputRef</code> prop to access the native <code>input</code> on the <code>Input</code> component.\nThis helps answer the question <a href="/material-ui/getting-started/faq/#how-can-i-access-the-dom-element">&quot;How can I access the DOM element?&quot;</a></li>\n</ul>\n<h3 id="prop-naming">Prop naming<a aria-labelledby="prop-naming" class="anchor-link-style" href="#prop-naming" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The name of a boolean prop should be chosen based on the <strong>default value</strong>. This choice allows:</p>\n<ul>\n<li><p>the shorthand notation. For example, the <code>disabled</code> attribute on an input element, if supplied, defaults to <code>true</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">enabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span> \u274c\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">disabled</span> <span class="token punctuation">/></span></span> \u2705\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>developers to know what the default value is from the name of the boolean prop. It&#39;s always the opposite.</p>\n</li>\n</ul>\n<h3 id="controlled-components">Controlled components<a aria-labelledby="controlled-components" class="anchor-link-style" href="#controlled-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Most of the controlled component are controlled via the <code>value</code> and the <code>onChange</code> props,\nhowever, the <code>open</code> / <code>onClose</code> / <code>onOpen</code> combination is used for display related state.\nIn the cases where there are more events, we put the noun first, and then the verb, for example: <code>onPageChange</code>, <code>onRowsChange</code>.</p>\n<h3 id="boolean-vs-enum">boolean vs. enum<a aria-labelledby="boolean-vs-enum" class="anchor-link-style" href="#boolean-vs-enum" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>There are two options to design the API for the variations of a component: with a <em>boolean</em>; or with an <em>enum</em>.\nFor example, let&#39;s take a button that has different types. Each option has its pros and cons:</p>\n<ul>\n<li><p>Option 1 <em>boolean</em>:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contained<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  fab<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>This API enables the shorthand notation:\n<code>&lt;Button&gt;</code>, <code>&lt;Button contained /&gt;</code>, <code>&lt;Button fab /&gt;</code>.</p>\n</li>\n<li><p>Option 2 <em>enum</em>:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  variant<span class="token operator">:</span> <span class="token string">\'text\'</span> <span class="token operator">|</span> <span class="token string">\'contained\'</span> <span class="token operator">|</span> <span class="token string">\'fab\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>This API is more verbose:\n<code>&lt;Button&gt;</code>, <code>&lt;Button variant=&quot;contained&quot;&gt;</code>, <code>&lt;Button variant=&quot;fab&quot;&gt;</code>.</p>\n<p>However, it prevents an invalid combination from being used,\nbounds the number of props exposed,\nand can easily support new values in the future.</p>\n</li>\n</ul>\n<p>The MUI components use a combination of the two approaches according to the following rules:</p>\n<ul>\n<li>A <em>boolean</em> is used when <strong>2</strong> possible values are required.</li>\n<li>An <em>enum</em> is used when <strong>&gt; 2</strong> possible values are required, or if there is the possibility that additional possible values may be required in the future.</li>\n</ul>\n<p>Going back to the previous button example; since it requires 3 possible values, we use an <em>enum</em>.</p>\n<h3 id="ref">Ref<a aria-labelledby="ref" class="anchor-link-style" href="#ref" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>ref</code> is forwarded to the root element. This means that, without changing the rendered root element\nvia the <code>component</code> prop, it is forwarded to the outermost DOM element which the component\nrenders. If you pass a different component via the <code>component</code> prop, the ref will be attached\nto that component instead.</p>\n<h2 id="glossary">Glossary<a aria-labelledby="glossary" class="anchor-link-style" href="#glossary" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><strong>host component</strong>: a DOM node type in the context of <code>react-dom</code>, e.g. a <code>&#39;div&#39;</code>. See also <a href="https://reactjs.org/docs/implementation-notes.html#mounting-host-elements">React Implementation Notes</a>.</li>\n<li><strong>host element</strong>: a DOM node in the context of <code>react-dom</code>, e.g. an instance of <code>window.HTMLDivElement</code>.</li>\n<li><strong>outermost</strong>: The first component when reading the component tree from top to bottom i.e. breadth-first search.</li>\n<li><strong>root component</strong>: the outermost component that renders a host component.</li>\n<li><strong>root element</strong>: the outermost element that renders a host component.</li>\n</ul>\n'],toc:[{text:"Composition",level:2,hash:"composition",children:[]},{text:"Rules",level:2,hash:"rules",children:[{text:"Spread",level:3,hash:"spread"},{text:"Native properties",level:3,hash:"native-properties"},{text:"CSS Classes",level:3,hash:"css-classes"},{text:"Nested components",level:3,hash:"nested-components"},{text:"Prop naming",level:3,hash:"prop-naming"},{text:"Controlled components",level:3,hash:"controlled-components"},{text:"boolean vs. enum",level:3,hash:"boolean-vs-enum"},{text:"Ref",level:3,hash:"ref"}]},{text:"Glossary",level:2,hash:"glossary",children:[]}],title:"API design approach",headers:{components:[]}},pt:{description:"N\xf3s aprendemos bastante como o Material-UI \xe9 usado e a refatora\xe7\xe3o da v1 permitiu-nos repensar completamente a API dos componentes.",location:"/docs/data/material/guides/api/api-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>API design approach</h1><p class="description">N\xf3s aprendemos bastante como o Material-UI \xe9 usado e a refatora\xe7\xe3o da v1 permitiu-nos repensar completamente a API dos componentes.</p>\n\n<aside class="MuiCallout-root MuiCallout-info"><p>API design is hard because you can make it seem simple but it&#39;s actually deceptively complex, or make it actually simple but seem complex.</p>\n\n</aside><p><a href="https://twitter.com/sebmarkbage/status/728433349337841665">@sebmarkbage</a></p>\n<p>As Sebastian Markbage <a href="https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html">pointed out</a>, no abstraction is superior to wrong abstractions. We are providing low-level components to maximize composition capabilities.</p>\n<h2 id="composition">Composi\xe7\xe3o<a aria-labelledby="composition" class="anchor-link-style" href="#composition" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You may have noticed some inconsistency in the API regarding composing components. To provide some transparency, we have been using the following rules when designing the API:</p>\n<ol>\n<li>Usando a propriedade <code>children</code> \xe9 a maneira idiom\xe1tica de fazer composi\xe7\xe3o com React.</li>\n<li>\xc0s vezes, precisamos apenas de uma composi\xe7\xe3o limitada ao elemento filho, por exemplo, quando n\xe3o precisamos permitir ordem de permuta\xe7\xf5es com um elemento filho. Nesse caso, fornecer propriedades expl\xedcitas torna a implementa\xe7\xe3o mais simples e com maior desempenho; por exemplo, o componente <code>Tab</code> recebe uma propriedade <code>icon</code> e <code>label</code>.</li>\n<li>A consist\xeancia da API \xe9 importante.</li>\n</ol>\n<h2 id="rules">Regras<a aria-labelledby="rules" class="anchor-link-style" href="#rules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Aside from the above composition trade-off, we enforce the following rules:</p>\n<h3 id="spread">Propaga\xe7\xe3o<a aria-labelledby="spread" class="anchor-link-style" href="#spread" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Props supplied to a component which are not explicitly documented are spread to the root element; for instance, the <code>className</code> prop is applied to the root.</p>\n<p>Now, let&#39;s say you want to disable the ripples on the <code>MenuItem</code>. You can take advantage of the spread behavior:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MenuItem</span></span> <span class="token attr-name">disableRipple</span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>disableRipple</code> prop will flow this way: <a href="/pt/material-ui/api/menu-item/"><code>MenuItem</code></a> &gt; <a href="/pt/material-ui/api/list-item/"><code>ListItem</code></a> &gt; <a href="/pt/material-ui/api/button-base/"><code>ButtonBase</code></a>.</p>\n<h3 id="native-properties">Propriedades nativas<a aria-labelledby="native-properties" class="anchor-link-style" href="#native-properties" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>We avoid documenting native properties supported by the DOM like <a href="/pt/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>className</code></a>.</p>\n<h3 id="css-classes">Classes CSS<a aria-labelledby="css-classes" class="anchor-link-style" href="#css-classes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>All components accept a <a href="/pt/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>classes</code></a> prop to customize the styles. The classes design answers two constraints: to make the classes structure as simple as possible, while sufficient to implement the Material Design guidelines.</p>\n<ul>\n<li>A classe aplicada ao elemento raiz \xe9 sempre chamada de <code>root</code>.</li>\n<li>Todos os estilos padr\xe3o s\xe3o agrupados em uma \xfanica classe.</li>\n<li>As classes aplicadas a elementos n\xe3o-raiz s\xe3o prefixadas com o nome do elemento, por exemplo, <code>paperWidthXs</code> no componente Dialog.</li>\n<li>As variantes aplicadas por uma propriedade booleana <strong>n\xe3o s\xe3o</strong> prefixadas, por exemplo, a classe <code>rounded</code> aplicada pela propriedade <code>rounded</code>.</li>\n<li>As variantes aplicadas por uma propriedade enum <strong>s\xe3o</strong> prefixadas, por exemplo, a classe <code>colorPrimary</code> aplicada pela propriedade <code>color=&quot;primary&quot;</code>.</li>\n<li>Uma variante tem <strong>um n\xedvel de especificidade</strong>. As propriedades <code>color</code> e <code>variant</code> s\xe3o consideradas uma variante. Quanto menor a especificidade de estilo, mais simples \xe9 sobrescrever.</li>\n<li>Aumentamos a especificidade de um modificador variante. N\xf3s j\xe1 <strong>temos que fazer isso</strong> para as pseudo-classes (<code>:hover</code>, <code>:focus</code>, etc.). Permite muito mais controle ao custo de mais trabalho. Esperamos que tamb\xe9m seja mais intuitivo.</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;$checked\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">checked</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="nested-components">Componentes aninhados<a aria-labelledby="nested-components" class="anchor-link-style" href="#nested-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Nested components inside a component have:</p>\n<ul>\n<li>suas pr\xf3prias propriedades niveladas quando estas s\xe3o chaves para a abstra\xe7\xe3o do componente de n\xedvel superior, por exemplo, uma propriedade <code>id</code> para o componente <code>input</code>.</li>\n<li>suas pr\xf3prias propriedades <code>xxxProps</code>, quando os usu\xe1rios podem precisar ajustar os subcomponentes do m\xe9todo de renderiza\xe7\xe3o interno, por exemplo, expondo as propriedades <code>inputProps</code> e <code>InputProps</code> em componentes que usam <code>Input</code> internamente.</li>\n<li>suas pr\xf3prias propriedades <code>xxxComponent</code> para executar a inje\xe7\xe3o de componentes.</li>\n<li>suas pr\xf3prias propriedades <code>xxxRef</code>, quando o usu\xe1rio precisar executar a\xe7\xf5es imperativas, por exemplo, expondo uma propriedade <code>inputRef</code> para acessar nativamente o <code>input</code> no componente <code>Input</code>. This helps answer the question <a href="/pt/material-ui/getting-started/faq/#how-can-i-access-the-dom-element">&quot;How can I access the DOM element?&quot;</a></li>\n</ul>\n<h3 id="prop-naming">Prop naming<a aria-labelledby="prop-naming" class="anchor-link-style" href="#prop-naming" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The name of a boolean prop should be chosen based on the <strong>default value</strong>. This choice allows:</p>\n<ul>\n<li><p>the shorthand notation. Por exemplo, o atributo <code>disabled</code> em um elemento de entrada, se fornecido, \xe9 padronizado para <code>true</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">contained</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n  <span class="token literal-property property">fab</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>developers to know what the default value is from the name of the boolean prop. It&#39;s always the opposite.</p>\n</li>\n</ul>\n<h3 id="controlled-components">Componentes controlados<a aria-labelledby="controlled-components" class="anchor-link-style" href="#controlled-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Most of the controlled component are controlled via the <code>value</code> and the <code>onChange</code> props, however, the <code>open</code> / <code>onClose</code> / <code>onOpen</code> combination is used for display related state. In the cases where there are more events, we put the noun first, and then the verb, for example: <code>onPageChange</code>, <code>onRowsChange</code>.</p>\n<h3 id="boolean-vs-enum">boolean vs. enum<a aria-labelledby="boolean-vs-enum" class="anchor-link-style" href="#boolean-vs-enum" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>There are two options to design the API for the variations of a component: with a <em>boolean</em>; or with an <em>enum</em>. For example, let&#39;s take a button that has different types. Each option has its pros and cons:</p>\n<ul>\n<li><p>Op\xe7\xe3o 1 <em>booleano</em>:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contained<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  fab<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Esta API ativou a nota\xe7\xe3o abreviada: <code>&lt;Button&gt;</code>, <code>&lt;Button contained /&gt;</code>, <code>&lt;Button fab /&gt;</code>.</p>\n</li>\n<li><p>Op\xe7\xe3o 2 <em>enumerador</em>:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  variant<span class="token operator">:</span> <span class="token string">\'text\'</span> <span class="token operator">|</span> <span class="token string">\'contained\'</span> <span class="token operator">|</span> <span class="token string">\'fab\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Esta API \xe9 mais verbosa: <code>&lt;Button&gt;</code>, <code>&lt;Button variant=&quot;contained&quot;&gt;</code>, <code>&lt;Button variant=&quot;fab&quot;&gt;</code>.</p>\n<p>However, it prevents an invalid combination from being used, bounds the number of props exposed, and can easily support new values in the future.</p>\n</li>\n</ul>\n<p>The MUI components use a combination of the two approaches according to the following rules:</p>\n<ul>\n<li>Um <em>booleano</em> \xe9 usado quando <strong>2</strong> valores poss\xedveis s\xe3o necess\xe1rios.</li>\n<li><strong>elemento hospedeiro</strong>: um n\xf3 DOM no contexto de <code>react-dom</code>, por exemplo, uma inst\xe2ncia de <code>window.HTMLDivElement</code>.</li>\n</ul>\n<p>Going back to the previous button example; since it requires 3 possible values, we use an <em>enum</em>.</p>\n<h3 id="ref">Ref<a aria-labelledby="ref" class="anchor-link-style" href="#ref" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>ref</code> is forwarded to the root element. This means that, without changing the rendered root element via the <code>component</code> prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the <code>component</code> prop, the ref will be attached to that component instead.</p>\n<h2 id="glossary">Gloss\xe1rio<a aria-labelledby="glossary" class="anchor-link-style" href="#glossary" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><strong>componente hospedeiro</strong>: um tipo de n\xf3 DOM no contexto de <code>react-dom</code>, por exemplo, um <code>&#39;div&#39;</code>. Veja tamb\xe9m as <a href="https://reactjs.org/docs/implementation-notes.html#mounting-host-elements">Notas de implementa\xe7\xe3o do React</a>.</li>\n<li><strong>elemento hospedeiro</strong>: um n\xf3 DOM no contexto de <code>react-dom</code>, por exemplo, uma inst\xe2ncia de <code>window.HTMLDivElement</code>.</li>\n<li><strong>mais externo</strong>: O primeiro componente ao ler a \xe1rvore de componentes de cima para baixo, ou seja, busca em largura (breadth-first search).</li>\n<li><strong>componente raiz</strong>: o componente mais externo que renderiza um componente do hospedeiro.</li>\n<li><strong>elemento raiz</strong>: o elemento mais externo que renderiza um componente hospedeiro.</li>\n</ul>\n'],toc:[{text:"Composi\xe7\xe3o",level:2,hash:"composition",children:[]},{text:"Regras",level:2,hash:"rules",children:[{text:"Propaga\xe7\xe3o",level:3,hash:"spread"},{text:"Propriedades nativas",level:3,hash:"native-properties"},{text:"Classes CSS",level:3,hash:"css-classes"},{text:"Componentes aninhados",level:3,hash:"nested-components"},{text:"Prop naming",level:3,hash:"prop-naming"},{text:"Componentes controlados",level:3,hash:"controlled-components"},{text:"boolean vs. enum",level:3,hash:"boolean-vs-enum"},{text:"Ref",level:3,hash:"ref"}]},{text:"Gloss\xe1rio",level:2,hash:"glossary",children:[]}],title:"API design approach",headers:{components:[]}},zh:{description:"\u6211\u4eec\u5728\u5982\u4f55\u4f7f\u7528 Material-UI \u65b9\u9762\u5b66\u5230\u4e86\u5f88\u591a\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u800c\u901a\u8fc7 v1 \u7248\u672c\u7684\u91cd\u5199\uff0c\u6211\u4eec\u80fd\u591f\u5f7b\u5e95\u91cd\u65b0\u8003\u8651\u7ec4\u4ef6\u7684 API\u3002",location:"/docs/data/material/guides/api/api-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>API design approach</h1><p class="description">\u6211\u4eec\u5728\u5982\u4f55\u4f7f\u7528 Material-UI \u65b9\u9762\u5b66\u5230\u4e86\u5f88\u591a\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u800c\u901a\u8fc7 v1 \u7248\u672c\u7684\u91cd\u5199\uff0c\u6211\u4eec\u80fd\u591f\u5f7b\u5e95\u91cd\u65b0\u8003\u8651\u7ec4\u4ef6\u7684 API\u3002</p>\n\n<aside class="MuiCallout-root MuiCallout-info"><p>API design is hard because you can make it seem simple but it&#39;s actually deceptively complex, or make it actually simple but seem complex.</p>\n\n</aside><p><a href="https://twitter.com/sebmarkbage/status/728433349337841665">@sebmarkbage</a></p>\n<p>As Sebastian Markbage <a href="https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html">pointed out</a>, no abstraction is superior to wrong abstractions. We are providing low-level components to maximize composition capabilities.</p>\n<h2 id="composition">\u5c01\u88c5<a aria-labelledby="composition" class="anchor-link-style" href="#composition" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You may have noticed some inconsistency in the API regarding composing components. To provide some transparency, we have been using the following rules when designing the API:</p>\n<ol>\n<li>\u4f7f\u7528<code>children</code>\u5c5e\u6027\u662f\u4f7f\u7528 React \u8fdb\u884c\u5408\u6210\u7684\u60ef\u7528\u65b9\u6cd5\u3002</li>\n<li>\u6709\u65f6\u6211\u4eec\u53ea\u9700\u8981\u6709\u9650\u7684\u5b50\u7ec4\u4ef6\u5c01\u88c5\uff0c\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u4e0d\u9700\u8981\u5141\u8bb8\u5b50\u7ec4\u4ef6\u7684\u987a\u5e8f\u6392\u5217\u7684\u65f6\u5019\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u663e\u5f0f\u5c5e\u6027\u53ef\u4ee5\u4f7f\u5b9e\u73b0\u66f4\u7b80\u5355\uff0c\u66f4\u9ad8\u6548; \u4f8b\u5982\uff0c<code>Tab</code>\u91c7\u7528<code>icon</code>\u548c<code>label</code>\u5c5e\u6027\u3002</li>\n<li>API \u7684\u4e00\u81f4\u6027\u81f3\u5173\u91cd\u8981\u3002</li>\n</ol>\n<h2 id="rules">\u89c4\u5219<a aria-labelledby="rules" class="anchor-link-style" href="#rules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Aside from the above composition trade-off, we enforce the following rules:</p>\n<h3 id="spread">\u6269\u5c55<a aria-labelledby="spread" class="anchor-link-style" href="#spread" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Props supplied to a component which are not explicitly documented are spread to the root element; for instance, the <code>className</code> prop is applied to the root.</p>\n<p>Now, let&#39;s say you want to disable the ripples on the <code>MenuItem</code>. You can take advantage of the spread behavior:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MenuItem</span></span> <span class="token attr-name">disableRipple</span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>disableRipple</code> prop will flow this way: <a href="/zh/material-ui/api/menu-item/"><code>MenuItem</code></a> &gt; <a href="/zh/material-ui/api/list-item/"><code>ListItem</code></a> &gt; <a href="/zh/material-ui/api/button-base/"><code>ButtonBase</code></a>.</p>\n<h3 id="native-properties">\u539f\u751f\u5c5e\u6027<a aria-labelledby="native-properties" class="anchor-link-style" href="#native-properties" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>We avoid documenting native properties supported by the DOM like <a href="/zh/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>className</code></a>.</p>\n<h3 id="css-classes">CSS classes<a aria-labelledby="css-classes" class="anchor-link-style" href="#css-classes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>All components accept a <a href="/zh/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>classes</code></a> prop to customize the styles. The classes design answers two constraints: to make the classes structure as simple as possible, while sufficient to implement the Material Design guidelines.</p>\n<ul>\n<li>\u5e94\u7528\u4e8e\u6839\u5143\u7d20\u7684\u7c7b\u59cb\u7ec8\u79f0\u4e3a <code>root</code>\u3002</li>\n<li>\u6240\u6709\u9ed8\u8ba4\u6837\u5f0f\u90fd\u5206\u7ec4\u5728\u5355\u4e2a\u7c7b\u4e2d\u3002</li>\n<li>\u5e94\u7528\u4e8e\u975e\u6839\u5143\u7d20\u7684\u7c7b\u5219\u4ee5\u5143\u7d20\u7684\u540d\u79f0\u4e3a\u524d\u7f00\uff0c\u4f8b\u5982\uff0c Dialog \u7ec4\u4ef6\u4e2d\u7684 <code>paperWidthXs</code>\u3002</li>\n<li>\u7531\u5e03\u5c14\u5c5e\u6027\u8d4b\u503c\u7684 variants <strong>\u4e0d\u6dfb\u52a0</strong> \u524d\u7f00\uff0c\u4f8b\u5982 <code>rounded</code> \u7c7b\u7531 <code>rounded</code> \u5c5e\u6027\u8d4b\u503c\u3002</li>\n<li>\u7531\u679a\u4e3e\u5c5e\u6027\u8d4b\u503c\u7684 variants<strong>\u6dfb\u52a0</strong>\u524d\u7f00\uff0c\u4f8b\u5982\uff0c<code>colorPrimary</code> \u7c7b\u4f7f\u7528 <code>color=&quot;primary&quot;</code> \u5c5e\u6027\u8d4b\u503c\u3002</li>\n<li>Variant \u5177\u6709 ** \u4e00\u4e2a\u7279\u5b9a\u7ea7\u522b **\u3002 <code>color</code>\u548c<code>variant</code>\u5c5e\u6027\u88ab\u89c6\u4e3a variant\u3002 \u6837\u5f0f\u7279\u5f02\u6027\u8d8a\u4f4e\uff0c\u5b83\u5c31\u8d8a\u5bb9\u6613\u88ab\u8986\u76d6\u3002</li>\n<li>\u6211\u4eec\u589e\u52a0\u4e86\u53d8\u4f53\u4fee\u9970\u7b26\uff08variant modifier\uff09\u7684\u7279\u5f02\u6027\u3002 \u6211\u4eec\u5df2\u7ecf ** \u5fc5\u987b\u8fd9\u6837\u505a ** \u4e3a\u4f2a\u7c7b (<code>:hover</code>, <code>:focus</code> \u7b49)\u3002 \u4ee5\u66f4\u591a\u6a21\u677f\u4e3a\u4ee3\u4ef7\uff0c\u5b83\u624d\u4f1a\u5f00\u653e\u66f4\u591a\u7684\u63a7\u5236\u6743\u3002 \u6211\u4eec\u4e5f\u5e0c\u671b\uff0c\u5b83\u4e5f\u80fd\u66f4\u52a0\u76f4\u89c2\u3002</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;$checked\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">checked</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="nested-components">\u5d4c\u5957\u7684\u7ec4\u4ef6<a aria-labelledby="nested-components" class="anchor-link-style" href="#nested-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Nested components inside a component have:</p>\n<ul>\n<li>\u5b83\u4eec\u81ea\u5df1\u7684\u6241\u5e73\u5316\u5c5e\u6027\uff08\u5f53\u8fd9\u4e9b\u5c5e\u6027\u662f\u9876\u5c42\u7ec4\u4ef6\u62bd\u8c61\u7684\u5173\u952e\u65f6\uff09\uff0c\u4f8b\u5982 <code>Input</code> \u7ec4\u4ef6\u7684 <code>id</code> \u5c5e\u6027\u3002</li>\n<li>\u5f53\u7528\u6237\u53ef\u80fd\u9700\u8981\u8c03\u6574\u5185\u90e8 render \u65b9\u6cd5\u7684\u5b50\u7ec4\u4ef6\u65f6\uff0c\u4ed6\u4eec\u81ea\u5df1\u7684<code>xxxProps</code>\u5c5e\u6027\uff0c\u4f8b\u5982\uff0c\u5728\u5185\u90e8\u4f7f\u7528<code>input</code>\u7684\u7ec4\u4ef6\u4e0a\u516c\u5f00<code>inputProps</code>\u548c<code>InputProps</code>\u5c5e\u6027\u3002</li>\n<li>\u4ed6\u4eec\u81ea\u5df1\u7684<code>xxxComponent</code>\u5c5e\u6027\uff0c\u7528\u4e8e\u6267\u884c\u7ec4\u4ef6\u6ce8\u5165\u3002</li>\n<li>\u5f53\u60a8\u53ef\u80fd\u9700\u8981\u6267\u884c\u547d\u4ee4\u6027\u64cd\u4f5c\u65f6\uff0c\u4f8b\u5982\uff0c\u516c\u5f00 <code>inputRef</code> \u5c5e\u6027\u4ee5\u8bbf\u95ee <code>input</code> \u7ec4\u4ef6\u4e0a\u7684\u539f\u751f<code>input</code>\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u81ea\u5df1\u7684 <code>xxxRef</code> \u5c5e\u6027\u3002 This helps answer the question <a href="/zh/material-ui/getting-started/faq/#how-can-i-access-the-dom-element">&quot;How can I access the DOM element?&quot;</a></li>\n</ul>\n<h3 id="prop-naming">Prop naming<a aria-labelledby="prop-naming" class="anchor-link-style" href="#prop-naming" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The name of a boolean prop should be chosen based on the <strong>default value</strong>. This choice allows:</p>\n<ul>\n<li><p>the shorthand notation. the shorthand notation. \u4f8b\u5982\uff0c\u82e5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f93\u5165\u6846\u5143\u7d20\u7684 <code>disabled</code> \u5c5e\u6027\uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a <code>true</code>\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token operator">-</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">enabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">disabled</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>developers to know what the default value is from the name of the boolean prop. It&#39;s always the opposite. It&#39;s always the opposite.</p>\n</li>\n</ul>\n<h3 id="controlled-components">\u53d7\u63a7\u7684\u7ec4\u4ef6<a aria-labelledby="controlled-components" class="anchor-link-style" href="#controlled-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Most of the controlled component are controlled via the <code>value</code> and the <code>onChange</code> props, however, the <code>open</code> / <code>onClose</code> / <code>onOpen</code> combination is used for display related state. In the cases where there are more events, we put the noun first, and then the verb, for example: <code>onPageChange</code>, <code>onRowsChange</code>.</p>\n<h3 id="boolean-vs-enum">boolean vs. enum<a aria-labelledby="boolean-vs-enum" class="anchor-link-style" href="#boolean-vs-enum" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>There are two options to design the API for the variations of a component: with a <em>boolean</em>; or with an <em>enum</em>. For example, let&#39;s take a button that has different types. Each option has its pros and cons:</p>\n<ul>\n<li><p>\u9009\u9879 1 _\u5e03\u5c14\u503c\uff08boolean\uff09_\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contained<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  fab<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u8be5 API \u542f\u7528\u4e86\u7b80\u5199\u7684\u8868\u793a\u6cd5\uff1a<code>&lt;Button&gt;</code>\uff0c<code>&lt;Button contained /&gt;</code>\uff0c<code>&lt;Button fab /&gt;</code>\u3002</p>\n</li>\n<li><p>\u9009\u9879 2 _\u679a\u4e3e\uff08enum\uff09_\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  variant<span class="token operator">:</span> <span class="token string">\'text\'</span> <span class="token operator">|</span> <span class="token string">\'contained\'</span> <span class="token operator">|</span> <span class="token string">\'fab\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u8fd9\u4e2a API \u66f4\u8be6\u7ec6\uff1a <code>&lt;Button&gt;</code>,<code>&lt;Button variant=&quot;contained&quot;&gt;</code>,<code>&lt;Button variant=&quot;fab&quot;&gt;</code>\u3002</p>\n<p>However, it prevents an invalid combination from being used, bounds the number of props exposed, and can easily support new values in the future.</p>\n</li>\n</ul>\n<p>The MUI components use a combination of the two approaches according to the following rules:</p>\n<ul>\n<li>\u5f53\u9700\u8981 <strong>2</strong> \u4e2a\u53ef\u80fd\u7684\u503c\u65f6\uff0c\u6211\u4eec\u4f7f\u7528 _boolean_\u3002</li>\n<li><strong>host element</strong>\uff1a<code>react-dom</code> \u4e2d\u7684\u4e00\u4e2a DOM \u8282\u70b9\uff0c\u4f8b\u5982 <code>window.HTMLDivElement</code> \u7684\u5b9e\u4f8b\u3002</li>\n</ul>\n<p>Going back to the previous button example; since it requires 3 possible values, we use an <em>enum</em>.</p>\n<h3 id="ref">Ref<a aria-labelledby="ref" class="anchor-link-style" href="#ref" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>ref</code> is forwarded to the root element. This means that, without changing the rendered root element via the <code>component</code> prop, it is forwarded to the outermost DOM element which the component renders. If you pass a different component via the <code>component</code> prop, the ref will be attached to that component instead.</p>\n<h2 id="glossary">\u672f\u8bed\u8868<a aria-labelledby="glossary" class="anchor-link-style" href="#glossary" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><strong>host component</strong>\uff1a<code>react-dom</code> \u7684 DOM \u8282\u70b9\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a <code>\u201cdiv\u201d</code>\u3002 \u53e6\u8bf7\u53c2\u9605 <a href="https://reactjs.org/docs/implementation-notes.html#mounting-host-elements">React \u5b9e\u65bd\u8bf4\u660e</a>\u3002</li>\n<li><strong>host element</strong>\uff1a<code>react-dom</code> \u4e2d\u7684\u4e00\u4e2a DOM \u8282\u70b9\uff0c\u4f8b\u5982 <code>window.HTMLDivElement</code> \u7684\u5b9e\u4f8b\u3002</li>\n<li><strong>outermost</strong>\uff1a\u4ece\u4e0a\u5230\u4e0b\u8bfb\u53d6\u7ec4\u4ef6\u6811\u65f6\u7684\u7b2c\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u4f8b\u5982\uff0c\u5e7f\u5ea6\u4f18\u5148\uff08breadth-first\uff09\u641c\u7d22\u3002</li>\n<li><strong>root component</strong>\uff1a\u6e32\u67d3\u4e00\u4e2a\u5bbf\u4e3b\u7ec4\u4ef6\u7684\u6700\u5916\u5c42\u7684\u90a3\u4e2a\u7ec4\u4ef6\u3002</li>\n<li><strong>root element</strong>\uff1a\u6e32\u67d3\u4e00\u4e2a\u5bbf\u4e3b\u7ec4\u4ef6\u7684\u6700\u5916\u5c42\u7684\u90a3\u4e2a\u5143\u7d20\u3002</li>\n</ul>\n'],toc:[{text:"\u5c01\u88c5",level:2,hash:"composition",children:[]},{text:"\u89c4\u5219",level:2,hash:"rules",children:[{text:"\u6269\u5c55",level:3,hash:"spread"},{text:"\u539f\u751f\u5c5e\u6027",level:3,hash:"native-properties"},{text:"CSS classes",level:3,hash:"css-classes"},{text:"\u5d4c\u5957\u7684\u7ec4\u4ef6",level:3,hash:"nested-components"},{text:"Prop naming",level:3,hash:"prop-naming"},{text:"\u53d7\u63a7\u7684\u7ec4\u4ef6",level:3,hash:"controlled-components"},{text:"boolean vs. enum",level:3,hash:"boolean-vs-enum"},{text:"Ref",level:3,hash:"ref"}]},{text:"\u672f\u8bed\u8868",level:2,hash:"glossary",children:[]}],title:"API design approach",headers:{components:[]}}},p={},i={},c=a(824246);function l(){return o||(o=(0,c.jsx)(s.Z,{demos:p,docs:t,demoComponents:i}))}},640532:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/guides/api",function(){return a(493310)}])}},function(e){e.O(0,[75760,31194,91642,35408,85992,51588,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,49774,92888,40179],(function(){return n=640532,e(e.s=n);var n}));var n=e.O();_N_E=n}]);