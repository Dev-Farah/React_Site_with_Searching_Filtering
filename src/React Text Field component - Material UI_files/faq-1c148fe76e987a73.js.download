(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[88180],{251623:function(n,a,s){"use strict";s.r(a),s.d(a,{default:function(){return l}});s(827378);var e,t=s(494616),o={en:{description:"Stuck on a particular problem? Check some of these common gotchas first in the FAQ.",location:"/docs/data/material/getting-started/faq/faq.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Frequently Asked Questions</h1><p class="description">Stuck on a particular problem? Check some of these common gotchas first in the FAQ.</p>\n\n<p>If you still can&#39;t find what you&#39;re looking for, you can refer to our <a href="/material-ui/getting-started/support/">support page</a>.</p>\n<h2 id="mui-is-awesome-how-can-i-support-the-project">MUI is awesome. How can I support the project?<a aria-labelledby="mui-is-awesome-how-can-i-support-the-project" class="anchor-link-style" href="#mui-is-awesome-how-can-i-support-the-project" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>There are many ways to support MUI:</p>\n<ul>\n<li><strong>Spread the word</strong>. Evangelize MUI by <a href="https://mui.com/">linking to mui.com</a> on your website, every backlink matters.\nFollow us on <a href="https://twitter.com/MUI_hq">Twitter</a>, like and retweet the important news. Or just talk about us with your friends.</li>\n<li><strong>Give us feedback</strong>. Tell us what we&#39;re doing well or where we can improve. Please upvote (\ud83d\udc4d) the issues that you are the most interested in seeing solved.</li>\n<li><strong>Help new users</strong>. You can answer questions on\n<a href="https://stackoverflow.com/questions/tagged/mui">Stack Overflow</a>.</li>\n<li><strong>Make changes happen</strong>.<ul>\n<li>Edit the documentation. Every page has an &quot;EDIT THIS PAGE&quot; link in the top right.</li>\n<li>Report bugs or missing features by <a href="https://github.com/mui/material-ui/issues/new">creating an issue</a>.</li>\n<li>Review and comment on existing <a href="https://github.com/mui/material-ui/pulls">pull requests</a> and <a href="https://github.com/mui/material-ui/issues">issues</a>.</li>\n<li>Help <a href="https://translate.mui.com">translate</a> the documentation.</li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/docs">Improve our documentation</a>, fix bugs, or add features by <a href="https://github.com/mui/material-ui/pulls">submitting a pull request</a>.</li>\n</ul>\n</li>\n<li><strong>Support us financially on <a href="https://opencollective.com/mui">OpenCollective</a></strong>.\nIf you use MUI in a commercial project and would like to support its continued development by becoming a Sponsor, or in a side or hobby project and would like to become a Backer, you can do so through OpenCollective.\nAll funds donated are managed transparently, and Sponsors receive recognition in the README and on the MUI home page.</li>\n</ul>\n<h2 id="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened">Why do the fixed positioned elements move when a modal is opened?<a aria-labelledby="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" class="anchor-link-style" href="#why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Scrolling is blocked as soon as a modal is opened.\nThis prevents interacting with the background when the modal should be the only interactive content. However, removing the scrollbar can make your <strong>fixed positioned elements</strong> move.\nIn this situation, you can apply a global <code>.mui-fixed</code> class name to tell MUI to handle those elements.</p>\n<h2 id="how-can-i-disable-the-ripple-effect-globally">How can I disable the ripple effect globally?<a aria-labelledby="how-can-i-disable-the-ripple-effect-globally" class="anchor-link-style" href="#how-can-i-disable-the-ripple-effect-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The ripple effect is exclusively coming from the <code>BaseButton</code> component.\nYou can disable the ripple effect globally by providing the following in your theme:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component \u269b\ufe0f</span>\n    <span class="token literal-property property">MuiButtonBase</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// The props to apply</span>\n        <span class="token literal-property property">disableRipple</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// No more ripple, on the whole application \ud83d\udca3!</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="how-can-i-disable-transitions-globally">How can I disable transitions globally?<a aria-labelledby="how-can-i-disable-transitions-globally" class="anchor-link-style" href="#how-can-i-disable-transitions-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>MUI uses the same theme helper for creating all its transitions.\nTherefore you can disable all transitions by overriding the helper in your theme:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">transitions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// So we have `transition: none;` everywhere</span>\n    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>It can be useful to disable transitions during visual testing or to improve performance on low-end devices.</p>\n<p>You can go one step further by disabling all transitions and animations effects:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component \u269b\ufe0f</span>\n    <span class="token literal-property property">MuiCssBaseline</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'*, *::before, *::after\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">animation</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Notice that the usage of <code>CssBaseline</code> is required for the above approach to work.\nIf you choose not to use it, you can still disable transitions and animations by including these CSS rules:</p>\n<div class="MuiCode-root"><pre><code class="language-css"><span class="token selector">*,\n*::before,\n*::after</span> <span class="token punctuation">{</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n  <span class="token property">animation</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="do-i-have-to-use-emotion-to-style-my-app">Do I have to use Emotion to style my app?<a aria-labelledby="do-i-have-to-use-emotion-to-style-my-app" class="anchor-link-style" href="#do-i-have-to-use-emotion-to-style-my-app" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>No, it&#39;s not required.\nBut if you are using the default styled engine (<code>@mui/styled-engine</code>) the Emotion dependency comes built in, so carries no additional bundle size overhead.</p>\n<p>Perhaps, however, you&#39;re adding some MUI components to an app that already uses another styling solution,\nor are already familiar with a different API, and don&#39;t want to learn a new one? In that case, head over to the\n<a href="/material-ui/guides/interoperability/">Style library interoperability</a> section,\nwhere we show how simple it is to restyle MUI components with alternative style libraries.</p>\n<h2 id="when-should-i-use-inline-style-vs-css">When should I use inline-style vs. CSS?<a aria-labelledby="when-should-i-use-inline-style-vs-css" class="anchor-link-style" href="#when-should-i-use-inline-style-vs-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>As a rule of thumb, only use inline-styles for dynamic style properties.\nThe CSS alternative provides more advantages, such as:</p>\n<ul>\n<li>auto-prefixing</li>\n<li>better debugging</li>\n<li>media queries</li>\n<li>keyframes</li>\n</ul>\n<h2 id="how-do-i-use-react-router">How do I use react-router?<a aria-labelledby="how-do-i-use-react-router" class="anchor-link-style" href="#how-do-i-use-react-router" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We detail the <a href="/material-ui/guides/routing/">integration with third-party routing libraries</a> like react-router, Gatsby or Next.js in our guide.</p>\n<h2 id="how-can-i-access-the-dom-element">How can I access the DOM element?<a aria-labelledby="how-can-i-access-the-dom-element" class="anchor-link-style" href="#how-can-i-access-the-dom-element" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>All MUI components that should render something in the DOM forward their\nref to the underlying DOM component. This means that you can get DOM elements\nby reading the ref attached to MUI components:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// or a ref setter function</span>\n<span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// render</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token comment">// usage</span>\n<span class="token keyword">const</span> element <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>If you&#39;re not sure if the MUI component in question forwards its ref you\ncan check the API documentation under &quot;Props&quot; e.g. the <a href="/material-ui/api/button/#props">Button API</a>\nincludes</p>\n<aside class="MuiCallout-root MuiCallout-info"><p>The ref is forwarded to the root element.</p>\n\n</aside><p>indicating that you can access the DOM element with a ref.</p>\n<h2 id="i-have-several-instances-of-styles-on-the-page">I have several instances of styles on the page<a aria-labelledby="i-have-several-instances-of-styles-on-the-page" class="anchor-link-style" href="#i-have-several-instances-of-styles-on-the-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you are seeing a warning message in the console like the one below, you probably have several instances of <code>@mui/styles</code> initialized on the page.</p>\n<aside class="MuiCallout-root MuiCallout-warning"><p>It looks like there are several instances of <code>@mui/styles</code> initialized in this application.\nThis may cause theme propagation issues, broken class names, specificity issues, and make your application bigger without a good reason.</p>\n\n</aside><h3 id="possible-reasons">Possible reasons<a aria-labelledby="possible-reasons" class="anchor-link-style" href="#possible-reasons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>There are several common reasons for this to happen:</p>\n<ul>\n<li>You have another <code>@mui/styles</code> library somewhere in your dependencies.</li>\n<li>You have a monorepo structure for your project (e.g, lerna, yarn workspaces) and <code>@mui/styles</code> module is a dependency in more than one package (this one is more or less the same as the previous one).</li>\n<li>You have several applications that are using <code>@mui/styles</code> running on the same page (e.g., several entry points in webpack are loaded on the same page).</li>\n</ul>\n<h3 id="duplicated-module-in-node-modules">Duplicated module in node_modules<a aria-labelledby="duplicated-module-in-node-modules" class="anchor-link-style" href="#duplicated-module-in-node-modules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you think that the issue may be in the duplication of the @mui/styles module somewhere in your dependencies, there are several ways to check this.\nYou can use <code>npm ls @mui/styles</code>, <code>yarn list @mui/styles</code> or <code>find -L ./node_modules | grep /@mui/styles/package.json</code> commands in your application folder.</p>\n<p>If none of these commands identified the duplication, try analyzing your bundle for multiple instances of @mui/styles. You can just check your bundle source, or use a tool like <a href="https://github.com/danvk/source-map-explorer">source-map-explorer</a> or <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a>.</p>\n<p>If you identified that duplication is the issue that you are encountering there are several things you can try to solve it:</p>\n<p>If you are using npm you can try running <code>npm dedupe</code>.\nThis command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.</p>\n<p>If you are using webpack, you can change the way it will <a href="https://webpack.js.org/configuration/resolve/#resolve-modules">resolve</a> the @mui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> resolve: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   alias: {\n</span><span class="token prefix inserted">+</span><span class="token line">     "@mui/styles": path.resolve(appFolder, "node_modules", "@mui/styles"),\n</span><span class="token prefix inserted">+</span><span class="token line">   }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="usage-with-lerna">Usage with Lerna<a aria-labelledby="usage-with-lerna" class="anchor-link-style" href="#usage-with-lerna" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>One possible fix to get @mui/styles to run in a Lerna monorepo across packages is to <a href="https://github.com/lerna/lerna/blob/HEAD/doc/hoist.md">hoist</a> shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.</p>\n<div class="MuiCode-root"><pre><code class="language-sh">lerna bootstrap <span class="token operator">--</span>hoist\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Alternatively, you can remove @mui/styles from your package.json file and hoist it manually to your top-level package.json file.</p>\n<p>Example of a package.json file in a Lerna root folder</p>\n<div class="MuiCode-root"><pre><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-monorepo"</span><span class="token punctuation">,</span>\n  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"lerna"</span><span class="token operator">:</span> <span class="token string">"latest"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"@mui/styles"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"bootstrap"</span><span class="token operator">:</span> <span class="token string">"lerna bootstrap"</span><span class="token punctuation">,</span>\n    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"lerna clean"</span><span class="token punctuation">,</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"lerna run start"</span><span class="token punctuation">,</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"lerna run build"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="running-multiple-applications-on-one-page">Running multiple applications on one page<a aria-labelledby="running-multiple-applications-on-one-page" class="anchor-link-style" href="#running-multiple-applications-on-one-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you have several applications running on one page, consider using one @mui/styles module for all of them. If you are using webpack, you can use <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">CommonsChunkPlugin</a> to create an explicit <a href="https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk">vendor chunk</a>, that will contain the @mui/styles module:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     vendor: ["@mui/styles"],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     app1: "./src/app.1.js",\n</span><span class="token prefix unchanged"> </span><span class="token line">     app2: "./src/app.2.js",\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new webpack.optimize.CommonsChunkPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       name: "vendor",\n</span><span class="token prefix inserted">+</span><span class="token line">       minChunks: Infinity,\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="my-app-doesnt-render-correctly-on-the-server">My App doesn&#39;t render correctly on the server<a aria-labelledby="my-app-doesnt-render-correctly-on-the-server" class="anchor-link-style" href="#my-app-doesnt-render-correctly-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If it doesn&#39;t work, in 99% of cases it&#39;s a configuration issue.\nA missing property, a wrong call order, or a missing component \u2013 server-side rendering is strict about configuration.</p>\n<p>The best way to find out what&#39;s wrong is to compare your project to an <strong>already working setup</strong>.\nCheck out the <a href="/material-ui/guides/server-rendering/#reference-implementations">reference implementations</a>, bit by bit.</p>\n<h2 id="why-are-the-colors-i-am-seeing-different-from-what-i-see-here">Why are the colors I am seeing different from what I see here?<a aria-labelledby="why-are-the-colors-i-am-seeing-different-from-what-i-see-here" class="anchor-link-style" href="#why-are-the-colors-i-am-seeing-different-from-what-i-see-here" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The documentation site is using a custom theme. Hence, the color palette is\ndifferent from the default theme that MUI ships. Please refer to <a href="/material-ui/customization/theming/">this\npage</a> to learn about theme customization.</p>\n<h2 id="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object">Why does component X require a DOM node in a prop instead of a ref object?<a aria-labelledby="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" class="anchor-link-style" href="#why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Components like the <a href="/base/api/portal/#props">Portal</a> or <a href="/material-ui/api/popper/#props">Popper</a> require a DOM node in the <code>container</code> or <code>anchorEl</code> prop respectively.\nIt seems convenient to simply pass a ref object in those props and let MUI access the current value.\nThis works in a simple scenario:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> container <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>portaled children<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>where <code>Portal</code> would only mount the children into the container when <code>container.current</code> is available.\nHere is a naive implementation of Portal:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Portal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> container <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> setNode<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setNode</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>container<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>With this simple heuristic <code>Portal</code> might re-render after it mounts because refs are up-to-date before any effects run.\nHowever, just because a ref is up-to-date doesn&#39;t mean it points to a defined instance.\nIf the ref is attached to a ref forwarding component it is not clear when the DOM node will be available.\nIn the example above, the <code>Portal</code> would run an effect once, but might not re-render because <code>ref.current</code> is still <code>null</code>.\nThis is especially apparent for React.lazy components in Suspense.\nThe above implementation could also not account for a change in the DOM node.</p>\n<p>This is why we require a prop with the actual DOM node so that React can take care of determining when the <code>Portal</code> should re-render:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>container<span class="token punctuation">,</span> setContainer<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> handleRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setContainer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>setContainer<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Portaled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="whats-the-clsx-dependency-for">What&#39;s the clsx dependency for?<a aria-labelledby="whats-the-clsx-dependency-for" class="anchor-link-style" href="#whats-the-clsx-dependency-for" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><a href="https://github.com/lukeed/clsx">clsx</a> is a tiny utility for constructing <code>className</code> strings conditionally, out of an object with keys being the class strings, and values being booleans.</p>\n<p>Instead of writing:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// let disabled = false, selected = true;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">MuiButton-root </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>disabled <span class="token operator">?</span> <span class="token string">\'Mui-disabled\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      selected <span class="token operator">?</span> <span class="token string">\'Mui-selected\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>you can do:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> clsx <span class="token keyword">from</span> <span class="token string">\'clsx\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">clsx</span><span class="token punctuation">(</span><span class="token string">\'MuiButton-root\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'Mui-disabled\'</span><span class="token operator">:</span> disabled<span class="token punctuation">,</span>\n      <span class="token string-property property">\'Mui-selected\'</span><span class="token operator">:</span> selected<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do">I cannot use components as selectors in the styled() utility. What should I do?<a aria-labelledby="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" class="anchor-link-style" href="#i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you are getting the error: <code>TypeError: Cannot convert a Symbol value to a string</code>, take a look at the <a href="/system/styled/#how-to-use-components-selector-api">styled()</a> docs page for instructions on how you can fix this.</p>\n<h2 id="v4-why-arent-my-components-rendering-correctly-in-production-builds">[v4] Why aren&#39;t my components rendering correctly in production builds?<a aria-labelledby="v4-why-arent-my-components-rendering-correctly-in-production-builds" class="anchor-link-style" href="#v4-why-arent-my-components-rendering-correctly-in-production-builds" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The #1 reason this happens is likely due to class name conflicts once your code is in a production bundle.\nFor MUI to work, the <code>className</code> values of all components on a page must be generated by a single instance of the <a href="/system/styles/advanced/#class-names">class name generator</a>.</p>\n<p>To correct this issue, all components on the page need to be initialized such that there is only ever <strong>one class name generator</strong> among them.</p>\n<p>You could end up accidentally using two class name generators in a variety of scenarios:</p>\n<ul>\n<li>You accidentally <strong>bundle</strong> two versions of MUI. You might have a dependency not correctly setting MUI as a peer dependency.</li>\n<li>You are using <code>StylesProvider</code> for a <strong>subset</strong> of your React tree.</li>\n<li>You are using a bundler and it is splitting code in a way that causes multiple class name generator instances to be created.</li>\n</ul>\n<aside class="MuiCallout-root MuiCallout-info"><p>\ud83d\udca1 If you are using webpack with the <a href="https://webpack.js.org/plugins/split-chunks-plugin/">SplitChunksPlugin</a>, try configuring the <a href="https://webpack.js.org/configuration/optimization/#optimization-runtimechunk"><code>runtimeChunk</code> setting under <code>optimizations</code></a>.</p>\n\n</aside><p>Overall, it&#39;s simple to recover from this problem by wrapping each MUI application with <a href="/system/styles/api/#stylesprovider"><code>StylesProvider</code></a> components at the top of their component trees <strong>and using a single class name generator shared among them</strong>.</p>\n<h3 id="v4-css-works-only-on-first-load-and-goes-missing">[v4] CSS works only on first load and goes missing<a aria-labelledby="v4-css-works-only-on-first-load-and-goes-missing" class="anchor-link-style" href="#v4-css-works-only-on-first-load-and-goes-missing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The CSS is only generated on the first load of the page.\nThen, the CSS is missing on the server for consecutive requests.</p>\n<h4>Action to Take</h4><p>The styling solution relies on a cache, the <em>sheets manager</em>, to only inject the CSS once per component type\n(if you use two buttons, you only need the CSS of the button one time).\nYou need to create <strong>a new <code>sheets</code> instance for each request</strong>.</p>\n<p>Example of fix:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">// Create a sheets instance.\n</span><span class="token prefix deleted">-</span><span class="token line">const sheets = new ServerStyleSheets();\n</span></span>\nfunction handleRender(req, res) {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // Create a sheets instance.\n</span><span class="token prefix inserted">+</span><span class="token line"> const sheets = new ServerStyleSheets();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> //\u2026\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // Render the component to a string.\n</span><span class="token prefix unchanged"> </span><span class="token line"> const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="v4-react-class-name-hydration-mismatch">[v4] React class name hydration mismatch<a aria-labelledby="v4-react-class-name-hydration-mismatch" class="anchor-link-style" href="#v4-react-class-name-hydration-mismatch" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><aside class="MuiCallout-root MuiCallout-warning"><p><strong>\u26a0\ufe0f Warning</strong></p>\n<p>Prop className did not match.</p>\n\n</aside><p>There is a class name mismatch between the client and the server. It might work for the first request.\nAnother symptom is that the styling changes between initial page load and the downloading of the client scripts.</p>\n<h4>Action to Take</h4><p>The class names value relies on the concept of <a href="/system/styles/advanced/#class-names">class name generator</a>.\nThe whole page needs to be rendered with <strong>a single generator</strong>.\nThis generator needs to behave identically on the server and on the client. For instance:</p>\n<ul>\n<li><p>You need to provide a new class name generator for each request.\nBut you shouldn&#39;t share a <code>createGenerateClassName()</code> between different requests:</p>\n<p>Example of fix:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">// Create a new class name generator.\n</span><span class="token prefix deleted">-</span><span class="token line">const generateClassName = createGenerateClassName();\n</span></span>\nfunction handleRender(req, res) {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // Create a new class name generator.\n</span><span class="token prefix inserted">+</span><span class="token line"> const generateClassName = createGenerateClassName();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> //\u2026\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // Render the component to a string.\n</span><span class="token prefix unchanged"> </span><span class="token line"> const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>You need to verify that your client and server are running the <strong>exactly the same version</strong> of MUI.\nIt is possible that a mismatch of even minor versions can cause styling problems.\nTo check version numbers, run <code>npm list @mui/material</code> in the environment where you build your application and also in your deployment environment.</p>\n<p>You can also ensure the same version in different environments by specifying a specific MUI version in the dependencies of your package.json.</p>\n<p><em>example of fix (package.json):</em></p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   "@mui/material": "^4.0.0",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "@mui/material": "4.0.0",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span><span class="token prefix unchanged"> </span><span class="token line"> },</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>You need to make sure that the server and the client share the same <code>process.env.NODE_ENV</code> value.</p>\n</li>\n</ul>\n'],toc:[{text:"MUI is awesome. How can I support the project?",level:2,hash:"mui-is-awesome-how-can-i-support-the-project",children:[]},{text:"Why do the fixed positioned elements move when a modal is opened?",level:2,hash:"why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened",children:[]},{text:"How can I disable the ripple effect globally?",level:2,hash:"how-can-i-disable-the-ripple-effect-globally",children:[]},{text:"How can I disable transitions globally?",level:2,hash:"how-can-i-disable-transitions-globally",children:[]},{text:"Do I have to use Emotion to style my app?",level:2,hash:"do-i-have-to-use-emotion-to-style-my-app",children:[]},{text:"When should I use inline-style vs. CSS?",level:2,hash:"when-should-i-use-inline-style-vs-css",children:[]},{text:"How do I use react-router?",level:2,hash:"how-do-i-use-react-router",children:[]},{text:"How can I access the DOM element?",level:2,hash:"how-can-i-access-the-dom-element",children:[]},{text:"I have several instances of styles on the page",level:2,hash:"i-have-several-instances-of-styles-on-the-page",children:[{text:"Possible reasons",level:3,hash:"possible-reasons"},{text:"Duplicated module in node_modules",level:3,hash:"duplicated-module-in-node-modules"},{text:"Usage with Lerna",level:3,hash:"usage-with-lerna"},{text:"Running multiple applications on one page",level:3,hash:"running-multiple-applications-on-one-page"}]},{text:"My App doesn&#39;t render correctly on the server",level:2,hash:"my-app-doesnt-render-correctly-on-the-server",children:[]},{text:"Why are the colors I am seeing different from what I see here?",level:2,hash:"why-are-the-colors-i-am-seeing-different-from-what-i-see-here",children:[]},{text:"Why does component X require a DOM node in a prop instead of a ref object?",level:2,hash:"why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object",children:[]},{text:"What&#39;s the clsx dependency for?",level:2,hash:"whats-the-clsx-dependency-for",children:[]},{text:"I cannot use components as selectors in the styled(&#8203;) utility. What should I do?",level:2,hash:"i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do",children:[]},{text:"[v4] Why aren&#39;t my components rendering correctly in production builds?",level:2,hash:"v4-why-arent-my-components-rendering-correctly-in-production-builds",children:[{text:"[v4] CSS works only on first load and goes missing",level:3,hash:"v4-css-works-only-on-first-load-and-goes-missing"},{text:"[v4] React class name hydration mismatch",level:3,hash:"v4-react-class-name-hydration-mismatch"}]}],title:"Frequently Asked Questions",headers:{components:[]}},pt:{description:"Preso em um determinado problema? Confira primeiro algumas dicas nas Perguntas Frequentes.",location:"/docs/data/material/getting-started/faq/faq-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Perguntas Frequentes</h1><p class="description">Preso em um determinado problema? Confira primeiro algumas dicas nas Perguntas Frequentes.</p>\n\n<p>If you still can&#39;t find what you&#39;re looking for, you can refer to our <a href="/pt/material-ui/getting-started/support/">support page</a>.</p>\n<h2 id="mui-is-awesome-how-can-i-support-the-project">MUI is awesome. Como posso apoiar o projeto?<a aria-labelledby="mui-is-awesome-how-can-i-support-the-project" class="anchor-link-style" href="#mui-is-awesome-how-can-i-support-the-project" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Existem muitas maneiras de apoiar o Material-UI:</p>\n<ul>\n<li><strong>Espalhe a palavra</strong>. Evangelize Material-UI <a href="https://material-ui.com/">vinculando o material-ui.com</a> no seu site, todo backlink conta. Siga-nos no <a href="https://twitter.com/MaterialUI">Twitter</a>, curta e retu\xedte as not\xedcias importantes. Ou apenas fale sobre n\xf3s com os seus amigos.</li>\n<li><strong>D\xea-nos sua opini\xe3o</strong>. Conte-nos o que estamos fazendo bem ou onde podemos melhorar. Por favor vote (\ud83d\udc4d) nos issues do GitHub que voc\xea est\xe1 mais interessado em ver resolvidos.</li>\n<li><strong>Ajude novos usu\xe1rios</strong>. You can answer questions on <a href="https://stackoverflow.com/questions/tagged/mui">Stack Overflow</a>.</li>\n<li><strong>Fa\xe7a as altera\xe7\xf5es acontecerem</strong>.<ul>\n<li>Edite a documenta\xe7\xe3o. Cada p\xe1gina da vers\xe3o em ingl\xeas tem um link &quot;EDIT THIS PAGE&quot; no canto superior direito.</li>\n<li>Reporte erros ou recursos faltantes <a href="https://github.com/mui/material-ui/issues/new">criando uma issue</a>.</li>\n<li>Revise e comente em <a href="https://github.com/mui/material-ui/pulls">pull requests</a> e <a href="https://github.com/mui/material-ui/issues">issues</a> existentes.</li>\n<li>Ajude a <a href="https://translate.mui.com">traduzir</a> a documenta\xe7\xe3o.</li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/docs">Improve our documentation</a>, fix bugs, or add features by <a href="https://github.com/mui/material-ui/pulls">submitting a pull request</a>.</li>\n</ul>\n</li>\n<li><strong>Support us financially on <a href="https://opencollective.com/mui">OpenCollective</a></strong>. Se voc\xea usa Material-UI em um projeto comercial e gostaria de apoiar seu desenvolvimento cont\xednuo tornando-se um Patrocinador, ou em um projeto freelancer ou hobby e gostaria de se tornar um Apoiador, voc\xea pode se tornar atrav\xe9s do OpenCollective. Todos os fundos doados s\xe3o geridos de forma transparente e os Patrocinadores recebem reconhecimento no README e na p\xe1gina inicial do Material-UI.</li>\n</ul>\n<h2 id="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened">Por que meus componentes n\xe3o est\xe3o renderizando corretamente em compila\xe7\xf5es de produ\xe7\xe3o?<a aria-labelledby="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" class="anchor-link-style" href="#why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>A rolagem \xe9 bloqueada assim que um modal \xe9 aberto. Isto impede a intera\xe7\xe3o com o segundo plano, pois o modal deve ser o \xfanico conte\xfado interativo. No entanto, removendo a barra de rolagem pode fazer com que seus <strong>elementos fixos posicionados</strong> se movam. Nesta situa\xe7\xe3o, voc\xea pode aplicar um nome de classe global <code>.mui-fixed</code> para informar ao Material-UI para manipular esses elementos.</p>\n<h2 id="how-can-i-disable-the-ripple-effect-globally">Por que os elementos posicionados como fixos se movem quando um modal \xe9 aberto?<a aria-labelledby="how-can-i-disable-the-ripple-effect-globally" class="anchor-link-style" href="#how-can-i-disable-the-ripple-effect-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>O efeito cascata \xe9 exclusivamente proveniente do componente <code>BaseButton</code>. Voc\xea pode desativar o efeito cascata globalmente aplicando as seguintes configura\xe7\xf5es no seu tema:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component \u269b\ufe0f</span>\n    <span class="token literal-property property">MuiButtonBase</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// The props to apply</span>\n        <span class="token literal-property property">disableRipple</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// No more ripple, on the whole application \ud83d\udca3!</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="how-can-i-disable-transitions-globally">Como posso desativar o efeito cascata globalmente?<a aria-labelledby="how-can-i-disable-transitions-globally" class="anchor-link-style" href="#how-can-i-disable-transitions-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Material-UI usa o mesmo auxiliar de tema para criar todas as transi\xe7\xf5es. Portanto, voc\xea pode desativar todas as transi\xe7\xf5es substituindo o auxiliar no seu tema:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">transitions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// So we have `transition: none;` everywhere</span>\n    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>No geral, \xe9 simples livrar-se desse problema encapsulando cada aplica\xe7\xe3o Material-UI com componentes <a href="/pt/styles/api/#stylesprovider"><code>StylesProvider</code></a>, no topo de suas \xe1rvores de componentes** e usando um \xfanico gerador de nome de classe compartilhado entre eles**.</p>\n<p>Voc\xea pode ir al\xe9m, desabilitando todas as transi\xe7\xf5es e efeitos de anima\xe7\xf5es:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component \u269b\ufe0f</span>\n    <span class="token literal-property property">MuiCssBaseline</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'*, *::before, *::after\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">animation</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Observe que o uso de <code>CssBaseline</code> \xe9 necess\xe1rio para que a abordagem acima funcione. Se voc\xea optar por n\xe3o us\xe1-lo, voc\xea ainda pode desabilitar transi\xe7\xf5es e anima\xe7\xf5es incluindo estas regras CSS:</p>\n<div class="MuiCode-root"><pre><code class="language-css"><span class="token selector">*,\n*::before,\n*::after</span> <span class="token punctuation">{</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n  <span class="token property">animation</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="do-i-have-to-use-emotion-to-style-my-app">Do I have to use Emotion to style my app?<a aria-labelledby="do-i-have-to-use-emotion-to-style-my-app" class="anchor-link-style" href="#do-i-have-to-use-emotion-to-style-my-app" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>N\xe3o, n\xe3o \xe9 obrigat\xf3rio. But if you are using the default styled engine (<code>@mui/styled-engine</code>) the Emotion dependency comes built in, so carries no additional bundle size overhead.</p>\n<p>No entanto, talvez voc\xea esteja adicionando os componentes Material-UI para uma aplica\xe7\xe3o que j\xe1 usa outra solu\xe7\xe3o de estilos, ou, j\xe1 esta familiarizado com uma API diferente e n\xe3o quer aprender uma nova? In that case, head over to the <a href="/pt/material-ui/guides/interoperability/">Style library interoperability</a> section, where we show how simple it is to restyle MUI components with alternative style libraries.</p>\n<h2 id="when-should-i-use-inline-style-vs-css">When should I use inline-style vs. CSS?<a aria-labelledby="when-should-i-use-inline-style-vs-css" class="anchor-link-style" href="#when-should-i-use-inline-style-vs-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Como regra geral, use apenas o estilo em linha para propriedades de estilo din\xe2micas. A alternativa de uso com CSS oferece mais vantagens, em:</p>\n<ul>\n<li>auto-prefixing</li>\n<li>Voc\xea esta usando <code>StylesProvider</code> para um <strong>subconjunto</strong> da sua \xe1rvore de componentes React.</li>\n<li>Voc\xea est\xe1 usando um empacotador (bundler) e est\xe1 dividindo o c\xf3digo de uma maneira que faz com que v\xe1rias inst\xe2ncias do gerador de nome de classe sejam criadas.</li>\n<li>keyframes</li>\n</ul>\n<h2 id="how-do-i-use-react-router">How do I use react-router?<a aria-labelledby="how-do-i-use-react-router" class="anchor-link-style" href="#how-do-i-use-react-router" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We detail the <a href="/pt/material-ui/guides/routing/">integration with third-party routing libraries</a> like react-router, Gatsby or Next.js in our guide.</p>\n<h2 id="how-can-i-access-the-dom-element">Como usar react-router?<a aria-labelledby="how-can-i-access-the-dom-element" class="anchor-link-style" href="#how-can-i-access-the-dom-element" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Todos os componentes do Material-UI que devem renderizar algo no DOM possuem refer\xeancia para o componente DOM subjacente. Isso significa que voc\xea pode obter elementos DOM lendo o ref anexado aos componentes do Material-UI:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// uma fun\xe7\xe3o setter ref</span>\n<span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// renderizando</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token comment">// uso</span>\n<span class="token keyword">const</span> element <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>If you&#39;re not sure if the MUI component in question forwards its ref you can check the API documentation under &quot;Props&quot; e.g. the <a href="/pt/material-ui/api/button/#props">Button API</a> includes</p>\n<aside class="MuiCallout-root MuiCallout-info"><p>The ref is forwarded to the root element.</p>\n\n</aside><p>indicating that you can access the DOM element with a ref.</p>\n<h2 id="i-have-several-instances-of-styles-on-the-page">Como posso acessar o elemento DOM?<a aria-labelledby="i-have-several-instances-of-styles-on-the-page" class="anchor-link-style" href="#i-have-several-instances-of-styles-on-the-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you are seeing a warning message in the console like the one below, you probably have several instances of <code>@mui/styles</code> initialized on the page.</p>\n<aside class="MuiCallout-root MuiCallout-warning"><p>It looks like there are several instances of <code>@mui/styles</code> initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and make your application bigger without a good reason.</p>\n\n</aside><h3 id="possible-reasons">Poss\xedveis raz\xf5es<a aria-labelledby="possible-reasons" class="anchor-link-style" href="#possible-reasons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>There are several common reasons for this to happen:</p>\n<ul>\n<li>prefixa\xe7\xe3o autom\xe1tica</li>\n<li>melhor depura\xe7\xe3o</li>\n<li>consultas de m\xeddia</li>\n</ul>\n<h3 id="duplicated-module-in-node-modules">M\xf3dulo duplicado em node_modules<a aria-labelledby="duplicated-module-in-node-modules" class="anchor-link-style" href="#duplicated-module-in-node-modules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you think that the issue may be in the duplication of the @mui/styles module somewhere in your dependencies, there are several ways to check this. You can use <code>npm ls @mui/styles</code>, <code>yarn list @mui/styles</code> or <code>find -L ./node_modules | grep /@mui/styles/package.json</code> commands in your application folder.</p>\n<p>If none of these commands identified the duplication, try analyzing your bundle for multiple instances of @mui/styles. You can just check your bundle source, or use a tool like <a href="https://github.com/danvk/source-map-explorer">source-map-explorer</a> or <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a>.</p>\n<p>If you identified that duplication is the issue that you are encountering there are several things you can try to solve it:</p>\n<p>If you are using npm you can try running <code>npm dedupe</code>. This command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.</p>\n<p>If you are using webpack, you can change the way it will <a href="https://webpack.js.org/configuration/resolve/#resolve-modules">resolve</a> the @mui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> resolve: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   alias: {\n</span><span class="token prefix inserted">+</span><span class="token line">     "@material-ui/styles": path.resolve(appFolder, "node_modules", "@material-ui/styles"),\n</span><span class="token prefix inserted">+</span><span class="token line">   }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="usage-with-lerna">Uso com Lerna<a aria-labelledby="usage-with-lerna" class="anchor-link-style" href="#usage-with-lerna" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>One possible fix to get @mui/styles to run in a Lerna monorepo across packages is to <a href="https://github.com/lerna/lerna/blob/HEAD/doc/hoist.md">hoist</a> shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.</p>\n<div class="MuiCode-root"><pre><code class="language-sh">lerna bootstrap <span class="token operator">--</span>hoist\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Alternatively, you can remove @mui/styles from your package.json file and hoist it manually to your top-level package.json file.</p>\n<p>Example of a package.json file in a Lerna root folder</p>\n<div class="MuiCode-root"><pre><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-monorepo"</span><span class="token punctuation">,</span>\n  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"lerna"</span><span class="token operator">:</span> <span class="token string">"latest"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"@material-ui/styles"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"bootstrap"</span><span class="token operator">:</span> <span class="token string">"lerna bootstrap"</span><span class="token punctuation">,</span>\n    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"lerna clean"</span><span class="token punctuation">,</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"lerna run start"</span><span class="token punctuation">,</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"lerna run build"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="running-multiple-applications-on-one-page">Executando m\xfaltiplas aplica\xe7\xf5es em uma \xfanica p\xe1gina<a aria-labelledby="running-multiple-applications-on-one-page" class="anchor-link-style" href="#running-multiple-applications-on-one-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you have several applications running on one page, consider using one @mui/styles module for all of them. If you are using webpack, you can use <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">CommonsChunkPlugin</a> to create an explicit <a href="https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk">vendor chunk</a>, that will contain the @mui/styles module:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     vendor: ["@material-ui/styles"],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     app1: "./src/app.1.js",\n</span><span class="token prefix unchanged"> </span><span class="token line">     app2: "./src/app.2.js",\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new webpack.optimize. CommonsChunkPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       name: "vendor",\n</span><span class="token prefix inserted">+</span><span class="token line">       minChunks: Infinity,\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="my-app-doesnt-render-correctly-on-the-server">Eu tenho v\xe1rias inst\xe2ncias de estilos na p\xe1gina<a aria-labelledby="my-app-doesnt-render-correctly-on-the-server" class="anchor-link-style" href="#my-app-doesnt-render-correctly-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If it doesn&#39;t work, in 99% of cases it&#39;s a configuration issue. A missing property, a wrong call order, or a missing component \u2013 server-side rendering is strict about configuration.</p>\n<p>The best way to find out what&#39;s wrong is to compare your project to an <strong>already working setup</strong>. Check out the <a href="/pt/material-ui/guides/server-rendering/#reference-implementations">reference implementations</a>, bit by bit.</p>\n<h2 id="why-are-the-colors-i-am-seeing-different-from-what-i-see-here">Minha aplica\xe7\xe3o n\xe3o \xe9 renderizada corretamente no servidor<a aria-labelledby="why-are-the-colors-i-am-seeing-different-from-what-i-see-here" class="anchor-link-style" href="#why-are-the-colors-i-am-seeing-different-from-what-i-see-here" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The documentation site is using a custom theme. Hence, the color palette is different from the default theme that MUI ships. Please refer to <a href="/pt/material-ui/customization/theming/">this page</a> to learn about theme customization.</p>\n<h2 id="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object">Por que as cores que estou vendo s\xe3o diferentes das que vejo aqui?<a aria-labelledby="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" class="anchor-link-style" href="#why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Components like the <a href="/pt/base/api/portal/#props">Portal</a> or <a href="/pt/material-ui/api/popper/#props">Popper</a> require a DOM node in the <code>container</code> or <code>anchorEl</code> prop respectively. It seems convenient to simply pass a ref object in those props and let MUI access the current value. This works in a simple scenario:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> container <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Componente filho portado<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>where <code>Portal</code> would only mount the children into the container when <code>container.current</code> is available. Here is a naive implementation of Portal:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Portal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> container <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> setNode<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setNode</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>container<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>With this simple heuristic <code>Portal</code> might re-render after it mounts because refs are up-to-date before any effects run. However, just because a ref is up-to-date doesn&#39;t mean it points to a defined instance. If the ref is attached to a ref forwarding component it is not clear when the DOM node will be available. In the example above, the <code>Portal</code> would run an effect once, but might not re-render because <code>ref.current</code> is still <code>null</code>. This is especially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.</p>\n<p>This is why we require a prop with the actual DOM node so that React can take care of determining when the <code>Portal</code> should re-render:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>container<span class="token punctuation">,</span> setContainer<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> handleRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setContainer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>setContainer<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Portaled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="whats-the-clsx-dependency-for">Por que o componente X requer um n\xf3 DOM em uma propriedade em vez de um objeto ref?<a aria-labelledby="whats-the-clsx-dependency-for" class="anchor-link-style" href="#whats-the-clsx-dependency-for" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><a href="https://github.com/lukeed/clsx">clsx</a> is a tiny utility for constructing <code>className</code> strings conditionally, out of an object with keys being the class strings, and values being booleans.</p>\n<p>Instead of writing:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// let disabled = false, selected = true;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">MuiButton-root </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>disabled <span class="token operator">?</span> <span class="token string">\'Mui-disabled\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>selected <span class="token operator">?</span> <span class="token string">\'Mui-selected\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>you can do:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> clsx <span class="token keyword">from</span> <span class="token string">\'clsx\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">clsx</span><span class="token punctuation">(</span><span class="token string">\'MuiButton-root\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'Mui-disabled\'</span><span class="token operator">:</span> disabled<span class="token punctuation">,</span>\n      <span class="token string-property property">\'Mui-selected\'</span><span class="token operator">:</span> selected<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do">I cannot use components as selectors in the styled() utility. What should I do?<a aria-labelledby="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" class="anchor-link-style" href="#i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you are getting the error: <code>TypeError: Cannot convert a Symbol value to a string</code>, take a look at the <a href="/pt/system/styled/#how-to-use-components-selector-api">styled()</a> docs page for instructions on how you can fix this.</p>\n<h2 id="v4-why-arent-my-components-rendering-correctly-in-production-builds">[v4] Why aren&#39;t my components rendering correctly in production builds?<a aria-labelledby="v4-why-arent-my-components-rendering-correctly-in-production-builds" class="anchor-link-style" href="#v4-why-arent-my-components-rendering-correctly-in-production-builds" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The #1 reason this happens is likely due to class name conflicts once your code is in a production bundle. For MUI to work, the <code>className</code> values of all components on a page must be generated by a single instance of the <a href="/pt/system/styles/advanced/#class-names">class name generator</a>.</p>\n<p>To correct this issue, all components on the page need to be initialized such that there is only ever <strong>one class name generator</strong> among them.</p>\n<p>You could end up accidentally using two class name generators in a variety of scenarios:</p>\n<ul>\n<li>Voc\xea acidentalmente <strong>empacota</strong> duas vers\xf5es do Material-UI. Voc\xea pode ter nesse caso, uma depend\xeancia que n\xe3o esta configurando corretamente o Material-UI.</li>\n<li>Voc\xea tem uma estrutura &quot;monorepo&quot; para seu projeto (por exemplo, lerna, yarn workspaces) e o m\xf3dulo <code>@material-ui/styles</code> \xe9 uma depend\xeancia em mais de um pacote (este \xe9 mais ou menos o mesmo que o anterior).</li>\n<li>Voc\xea tem v\xe1rias aplica\xe7\xf5es que est\xe3o usando <code>@material-ui/styles</code> executando na mesma p\xe1gina (por exemplo, v\xe1rios pontos de entrada no webpack s\xe3o carregados na mesma p\xe1gina).</li>\n</ul>\n<aside class="MuiCallout-root MuiCallout-info"><p>\ud83d\udca1 If you are using webpack with the <a href="https://webpack.js.org/plugins/split-chunks-plugin/">SplitChunksPlugin</a>, try configuring the <a href="https://webpack.js.org/configuration/optimization/#optimization-runtimechunk"><code>runtimeChunk</code> setting under <code>optimizations</code></a>.</p>\n\n</aside><p>Overall, it&#39;s simple to recover from this problem by wrapping each MUI application with <a href="/pt/system/styles/api/#stylesprovider"><code>StylesProvider</code></a> components at the top of their component trees <strong>and using a single class name generator shared among them</strong>.</p>\n<h3 id="v4-css-works-only-on-first-load-and-goes-missing">O CSS funciona apenas no primeiro carregamento, em seguida, para de funcionar<a aria-labelledby="v4-css-works-only-on-first-load-and-goes-missing" class="anchor-link-style" href="#v4-css-works-only-on-first-load-and-goes-missing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The CSS is only generated on the first load of the page. Then, the CSS is missing on the server for consecutive requests.</p>\n<h4>A\xe7\xe3o a tomar</h4><p>The styling solution relies on a cache, the <em>sheets manager</em>, to only inject the CSS once per component type (if you use two buttons, you only need the CSS of the button one time). You need to create <strong>a new <code>sheets</code> instance for each request</strong>.</p>\n<p>Example of fix:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">// Crie uma inst\xe2ncia de sheets.\n</span><span class="token prefix deleted">-</span><span class="token line">const sheets = new ServerStyleSheets();\n</span></span>\nfunction handleRender(req, res) {\n\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // Crie uma inst\xe2ncia de sheets.\n</span><span class="token prefix inserted">+</span><span class="token line"> const sheets = new ServerStyleSheets();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> //\u2026\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // Render the component to a string.\n</span><span class="token prefix unchanged"> </span><span class="token line"> const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="v4-react-class-name-hydration-mismatch">React incompatibilidade de nome de classes na hidrata\xe7\xe3o (React Hydrate)<a aria-labelledby="v4-react-class-name-hydration-mismatch" class="anchor-link-style" href="#v4-react-class-name-hydration-mismatch" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><aside class="MuiCallout-root MuiCallout-warning"><p><strong>\u26a0\ufe0f Warning</strong></p>\n<p>Prop className did not match.</p>\n\n</aside><p>There is a class name mismatch between the client and the server. It might work for the first request. Another symptom is that the styling changes between initial page load and the downloading of the client scripts.</p>\n<h4>A\xe7\xe3o a tomar</h4><p>The class names value relies on the concept of <a href="/pt/system/styles/advanced/#class-names">class name generator</a>. The whole page needs to be rendered with <strong>a single generator</strong>. This generator needs to behave identically on the server and on the client. For instance:</p>\n<ul>\n<li><p>Voc\xea precisa fornecer um novo gerador de nome de classe para cada requisi\xe7\xe3o. Mas voc\xea n\xe3o deve compartilhar um <code>createGenerateClassName()</code> entre diferentes requisi\xe7\xf5es:</p>\n<p>exemplo de corre\xe7\xe3o:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> // Crie um novo gerador de nome de classe.\n</span><span class="token prefix deleted">-</span><span class="token line">const generateClassName = createGenerateClassName();\n</span></span>\nfunction handleRender(req, res) {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // Create a new class name generator.\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const generateClassName = createGenerateClassName();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // Renderize o componente para uma string.\n</span><span class="token prefix unchanged"> </span><span class="token line"> const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>Voc\xea precisa verificar se seu cliente e servidor est\xe3o executando o <strong>exatamente a mesma vers\xe3o</strong> do Material-UI. \xc9 poss\xedvel que uma incompatibilidade de vers\xf5es menores possa causar problemas de estilo. Para verificar n\xfameros de vers\xe3o, execute <code>npm list @material-ui/core</code> no ambiente em que voc\xea cria sua aplica\xe7\xe3o e tamb\xe9m em seu ambiente de implementa\xe7\xe3o.</p>\n<p>Voc\xea tamb\xe9m pode garantir a mesma vers\xe3o em diferentes ambientes, definindo uma vers\xe3o espec\xedfica do MUI nas depend\xeancias do seu package.json.</p>\n<p><em>exemplo de corre\xe7\xe3o (package.json):</em></p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   "@mui/material": "^4.0.0",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "@mui/material": "4.0.0",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span><span class="token prefix unchanged"> </span><span class="token line"> },</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>Voc\xea precisa ter certeza de que o servidor e o cliente compartilhem o mesmo valor de <code>process.env.NODE_ENV</code>.</p>\n</li>\n</ul>\n'],toc:[{text:"MUI is awesome. Como posso apoiar o projeto?",level:2,hash:"mui-is-awesome-how-can-i-support-the-project",children:[]},{text:"Por que meus componentes n\xe3o est\xe3o renderizando corretamente em compila\xe7\xf5es de produ\xe7\xe3o?",level:2,hash:"why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened",children:[]},{text:"Por que os elementos posicionados como fixos se movem quando um modal \xe9 aberto?",level:2,hash:"how-can-i-disable-the-ripple-effect-globally",children:[]},{text:"Como posso desativar o efeito cascata globalmente?",level:2,hash:"how-can-i-disable-transitions-globally",children:[]},{text:"Do I have to use Emotion to style my app?",level:2,hash:"do-i-have-to-use-emotion-to-style-my-app",children:[]},{text:"When should I use inline-style vs. CSS?",level:2,hash:"when-should-i-use-inline-style-vs-css",children:[]},{text:"How do I use react-router?",level:2,hash:"how-do-i-use-react-router",children:[]},{text:"Como usar react-router?",level:2,hash:"how-can-i-access-the-dom-element",children:[]},{text:"Como posso acessar o elemento DOM?",level:2,hash:"i-have-several-instances-of-styles-on-the-page",children:[{text:"Poss\xedveis raz\xf5es",level:3,hash:"possible-reasons"},{text:"M\xf3dulo duplicado em node_modules",level:3,hash:"duplicated-module-in-node-modules"},{text:"Uso com Lerna",level:3,hash:"usage-with-lerna"},{text:"Executando m\xfaltiplas aplica\xe7\xf5es em uma \xfanica p\xe1gina",level:3,hash:"running-multiple-applications-on-one-page"}]},{text:"Eu tenho v\xe1rias inst\xe2ncias de estilos na p\xe1gina",level:2,hash:"my-app-doesnt-render-correctly-on-the-server",children:[]},{text:"Minha aplica\xe7\xe3o n\xe3o \xe9 renderizada corretamente no servidor",level:2,hash:"why-are-the-colors-i-am-seeing-different-from-what-i-see-here",children:[]},{text:"Por que as cores que estou vendo s\xe3o diferentes das que vejo aqui?",level:2,hash:"why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object",children:[]},{text:"Por que o componente X requer um n\xf3 DOM em uma propriedade em vez de um objeto ref?",level:2,hash:"whats-the-clsx-dependency-for",children:[]},{text:"I cannot use components as selectors in the styled(&#8203;) utility. What should I do?",level:2,hash:"i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do",children:[]},{text:"[v4] Why aren&#39;t my components rendering correctly in production builds?",level:2,hash:"v4-why-arent-my-components-rendering-correctly-in-production-builds",children:[{text:"O CSS funciona apenas no primeiro carregamento, em seguida, para de funcionar",level:3,hash:"v4-css-works-only-on-first-load-and-goes-missing"},{text:"React incompatibilidade de nome de classes na hidrata\xe7\xe3o (React Hydrate)",level:3,hash:"v4-react-class-name-hydration-mismatch"}]}],title:"Perguntas Frequentes",headers:{components:[]}},zh:{description:"\u60a8\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u95ee\u9898\u4e0a\u505c\u6ede\u4e0d\u524d\u5417\uff1f \u60a8\u53ef\u4ee5\u5148\u5728\u5e38\u89c1 FAQ\uff08\u95ee\u9898\u89e3\u7b54\uff09\u4e2d\u68c0\u7d22\u4e00\u4e0b\u5e38\u89c1\u95ee\u9898\u3002",location:"/docs/data/material/getting-started/faq/faq-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>\u5e38\u89c1\u95ee\u9898\u89e3\u7b54</h1><p class="description">\u60a8\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u95ee\u9898\u4e0a\u505c\u6ede\u4e0d\u524d\u5417\uff1f \u60a8\u53ef\u4ee5\u5148\u5728\u5e38\u89c1 FAQ\uff08\u95ee\u9898\u89e3\u7b54\uff09\u4e2d\u68c0\u7d22\u4e00\u4e0b\u5e38\u89c1\u95ee\u9898\u3002</p>\n\n<p>If you still can&#39;t find what you&#39;re looking for, you can refer to our <a href="/zh/material-ui/getting-started/support/">support page</a>.</p>\n<h2 id="mui-is-awesome-how-can-i-support-the-project">MUI is awesome. \u6211\u8be5\u5982\u4f55\u652f\u6301\u8be5\u9879\u76ee\uff1f How can I support the project?<a aria-labelledby="mui-is-awesome-how-can-i-support-the-project" class="anchor-link-style" href="#mui-is-awesome-how-can-i-support-the-project" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u5176\u5b9e\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u652f\u6301 Material-UI\uff1a</p>\n<ul>\n<li><strong>\u53e3\u53e3\u76f8\u4f20</strong>\u3002 Evangelize MUI by <a href="https://mui.com/">linking to mui.com</a> on your website, every backlink matters. \u5728 <a href="https://twitter.com/MaterialUI">Twitter \u4e0a\u5173\u6ce8\u6211\u4eec</a> \uff0c\u70b9\u8d5e\u5e76\u8f6c\u53d1\u4e00\u4e9b\u91cd\u8981\u7684\u65b0\u95fb\u3002 Follow us on <a href="https://twitter.com/MUI_hq">Twitter</a>, like and retweet the important news. \u6216\u8005\u53ea\u662f\u4e0e\u60a8\u7684\u670b\u53cb\u8c08\u8bba\u6211\u4eec\u3002</li>\n<li><strong>\u7ed9\u6211\u4eec\u53cd\u9988</strong> \u3002 \u544a\u8bc9\u6211\u4eec\u4e00\u4e9b\u505a\u5f97\u597d\u7684\u5730\u65b9\u6216\u8005\u53ef\u4ee5\u6539\u8fdb\u7684\u5730\u65b9\u3002 \u8bf7\u7ed9\u60a8\u6700\u5e0c\u671b\u770b\u5230\u80fd\u591f\u89e3\u51b3\u7684\u95ee\u9898\u6295\u7968\uff08\ud83d\udc4d\uff09\u3002</li>\n<li><strong>\u5e2e\u52a9\u65b0\u7528\u6237</strong> \u3002 You can answer questions on <a href="https://stackoverflow.com/questions/tagged/mui">Stack Overflow</a>.</li>\n<li><strong>\u505a\u51fa\u4e00\u4e9b\u6539\u53d8\u5427</strong>\u3002<ul>\n<li>\u7f16\u8f91\u6587\u6863\u3002 \u6bcf\u4e2a\u9875\u9762\u53f3\u4e0a\u89d2\u90fd\u6709\u4e00\u4e2a\u201c\u7f16\u8f91\u6b64\u9875\u9762\u201d\u7684\u94fe\u63a5\u3002</li>\n<li>\u901a\u8fc7 <a href="https://github.com/mui/material-ui/issues/new">\u521b\u5efa\u4e00\u4e2a\u95ee\u9898</a> \u6765\u62a5\u544a\u9519\u8bef\u6216\u7f3a\u5c11\u7684\u529f\u80fd \u3002</li>\n<li>\u67e5\u770b\u548c\u8bc4\u8bba\u4e00\u4e9b\u73b0\u6709\u7684 <a href="https://github.com/mui/material-ui/pulls">pull requests</a> \u548c <a href="https://github.com/mui/material-ui/issues">issues</a>\u3002</li>\n<li>\u5e2e\u52a9\u6211\u4eec <a href="https://translate.mui.com">\u7ffb\u8bd1</a> \u6587\u6863\u3002</li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/docs">Improve our documentation</a>, fix bugs, or add features by <a href="https://github.com/mui/material-ui/pulls">submitting a pull request</a>.</li>\n</ul>\n</li>\n<li><strong>Support us financially on <a href="https://opencollective.com/mui">OpenCollective</a></strong>. \u5982\u679c\u60a8\u5728\u5546\u4e1a\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86 Material-UI\uff0c\u5e76\u5e0c\u671b\u901a\u8fc7\u6210\u4e3a\u6211\u4eec\u7684\u8d5e\u52a9\u5546\u6765\u652f\u6301\u6211\u4eec\u7684\u6301\u7eed\u53d1\u5c55\uff0c\u6216\u8005\u5728\u4e00\u4e2a\u4e1a\u4f59\u7684\u6216\u8005\u7231\u597d\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\uff0c\u5e76\u60f3\u6210\u4e3a\u6211\u4eec\u7684\u4e00\u4e2a\u652f\u6301\u8005\uff0c \u60a8\u90fd\u53ef\u4ee5\u901a\u8fc7 OpenCollective \u6765\u8d44\u52a9\u6211\u4eec\u3002 If you use MUI in a commercial project and would like to support its continued development by becoming a Sponsor, or in a side or hobby project and would like to become a Backer, you can do so through OpenCollective. \u7b79\u96c6\u7684\u6240\u6709\u8d44\u91d1\u90fd\u662f\u900f\u660e\u7ba1\u7406\u7684\uff0c\u8d5e\u52a9\u5546\u5728 README \u548c Material-UI \u4e3b\u9875\u4e0a\u90fd\u4f1a\u83b7\u5f97\u8ba4\u53ef\u3002</li>\n</ul>\n<h2 id="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened">\u4e3a\u4ec0\u4e48\u6211\u7684\u7ec4\u4ef6\u5728\u751f\u4ea7\u6784\u9020\u4e2d\u6ca1\u6709\u6b63\u786e\u5730\u6e32\u67d3\uff1f<a aria-labelledby="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" class="anchor-link-style" href="#why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u5f53\u6a21\u6001\u6846\u6253\u5f00\u7684\u90a3\u4e00\u5239\u90a3\uff0c\u6eda\u52a8\u884c\u4e3a\u5c31\u4f1a\u88ab\u7981\u6b62\u3002 \u8fd9\u6837\u5c31\u80fd\u591f\u963b\u6b62\u7528\u6237\u4e0e\u4e0b\u5c42\u80cc\u666f\u5185\u5bb9\u8fdb\u884c\u4ea4\u4e92\uff0c\u800c\u6a21\u6001\u6846\u5e94\u8be5\u662f\u552f\u4e00\u7684\u4ea4\u4e92\u5185\u5bb9\u3002 \u7136\u800c\uff0c\u79fb\u9664\u6eda\u52a8\u6761\u4f1a\u79fb\u52a8\u4e00\u4e9b<strong>\u56fa\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20</strong>\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5e94\u7528\u5168\u5c40 <code>.mui-fixed</code> \u7c7b\u540d\u6765\u544a\u77e5 Material-UI \u53bb\u5904\u7406\u8fd9\u4e9b\u5143\u7d20\u3002</p>\n<h2 id="how-can-i-disable-the-ripple-effect-globally">\u4e3a\u4ec0\u4e48\u5f53\u6253\u5f00\u4e00\u4e2a Modal\uff08\u6a21\u6001\u6846\uff09\u65f6\uff0c\u4f4d\u7f6e\u56fa\u5b9a\u7684\u5143\u7d20\u4f1a\u79fb\u52a8\uff1f<a aria-labelledby="how-can-i-disable-the-ripple-effect-globally" class="anchor-link-style" href="#how-can-i-disable-the-ripple-effect-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u6d9f\u6f2a\u6548\u679c\u5b8c\u5168\u6765\u81ea <code>BaseButton</code> \u7ec4\u4ef6\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u60a8\u7684\u4e3b\u9898\u4e2d\u63d0\u4f9b\u4ee5\u4e0b\u5185\u5bb9\uff0c\u6765\u5168\u5c40\u5730\u7981\u7528\u6d9f\u6f2a\u6548\u679c\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component \u269b\ufe0f</span>\n    <span class="token literal-property property">MuiButtonBase</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// The props to apply</span>\n        <span class="token literal-property property">disableRipple</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// No more ripple, on the whole application \ud83d\udca3!</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="how-can-i-disable-transitions-globally">\u5982\u4f55\u5728\u5168\u5c40\u7981\u7528 ripple effect\uff08\u6d9f\u6f2a\u6548\u679c\uff09\uff1f<a aria-labelledby="how-can-i-disable-transitions-globally" class="anchor-link-style" href="#how-can-i-disable-transitions-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Material-UI \u4f7f\u7528\u76f8\u540c\u7684\u4e3b\u9898\u52a9\u624b\u6765\u521b\u5efa\u5176\u6240\u6709\u7684\u8fc7\u6e21\u52a8\u753b\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6\u4e3b\u9898\u52a9\u624b\u6765\u7981\u7528\u6240\u6709\u7684\u8fc7\u6e21\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">transitions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// So we have `transition: none;` everywhere</span>\n    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u603b\u7684\u6765\u8bf4\uff0c\u60a8\u53ea\u9700\u8981\u5728\u6bcf\u4e2a Material-UI \u5e94\u7528\u7a0b\u5e8f\u7684\u7ec4\u4ef6\u6811\u9876\u90e8\u4f7f\u7528 <a href="/zh/styles/api/#stylesprovider"><code>StylesProvider</code></a> \u7ec4\u4ef6\u8fdb\u884c\u5305\u88c5\uff0c<strong>\u5e76\u5728\u5b83\u4eec\u4e4b\u95f4\u5171\u4eab\u4e00\u4e2a\u5355\u4e00\u7684\u7c7b\u540d\u751f\u6210\u5668</strong>\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>\n<p>\u60a8\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\u5730\u7981\u7528\u6240\u6709\u7684\u8fc7\u6e21\u548c\u52a8\u753b\u6548\u679c\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component \u269b\ufe0f</span>\n    <span class="token literal-property property">MuiCssBaseline</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'*, *::before, *::after\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">animation</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>\u8bf7\u6ce8\u610f\uff0c\u82e5\u60f3\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528 <code>CssBaseline</code> \u4f7f\u5176\u594f\u6548\u3002 \u5982\u679c\u60a8\u9009\u62e9\u4e0d\u4f7f\u7528\u5b83\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u52a0\u5165\u8fd9\u4e9b CSS \u89c4\u5219\u6765\u7981\u7528\u8fc7\u6e21\u548c\u52a8\u753b\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-css"><span class="token selector">*,\n*::before,\n*::after</span> <span class="token punctuation">{</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n  <span class="token property">animation</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="do-i-have-to-use-emotion-to-style-my-app">Do I have to use Emotion to style my app?<a aria-labelledby="do-i-have-to-use-emotion-to-style-my-app" class="anchor-link-style" href="#do-i-have-to-use-emotion-to-style-my-app" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u4e0d\u7528\u7684\uff0cJSS \u4e0d\u662f\u4e00\u4e2a\u5fc5\u987b\u9009\u62e9\u3002 But if you are using the default styled engine (<code>@mui/styled-engine</code>) the Emotion dependency comes built in, so carries no additional bundle size overhead.</p>\n<p>\u7136\u800c\uff0c\u4e5f\u8bb8\u60a8\u6b63\u5728\u7ed9\u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u4e00\u4e9b Material-UI \u7ec4\u4ef6\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u4f7f\u7528\u4e86\u5176\u4ed6\u7684\u6837\u5f0f\u89e3\u51b3\u65b9\u6848\uff0c\u6216\u8005\u60a8\u5df2\u7ecf\u719f\u6089\u4e86\u4e0d\u540c\u7684 API\uff0c\u800c\u4e0d\u60f3\u5b66\u4e60\u4e00\u4e2a\u65b0\u7684 API\uff1f In that case, head over to the <a href="/zh/material-ui/guides/interoperability/">Style library interoperability</a> section, where we show how simple it is to restyle MUI components with alternative style libraries.</p>\n<h2 id="when-should-i-use-inline-style-vs-css">\u6211\u662f\u5426\u5fc5\u987b\u4f7f\u7528 JSS \u7ed9\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bbe\u7f6e\u6837\u5f0f\u5462\uff1f<a aria-labelledby="when-should-i-use-inline-style-vs-css" class="anchor-link-style" href="#when-should-i-use-inline-style-vs-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u6839\u636e\u7ecf\u9a8c\uff0c\u4ec5\u5bf9\u52a8\u6001\u6837\u5f0f\u5c5e\u6027\u4f7f\u7528\u5185\u8054\u6837\u5f0f\u3002 CSS \u7684\u66ff\u4ee3\u65b9\u6848\u4e5f\u6709\u8bf8\u591a\u4f18\u52bf\uff0c\u4f8b\u5982\uff1a</p>\n<ul>\n<li>auto-prefixing</li>\n<li>\u5bf9\u4e8e\u4f60\u7684 React \u6811\u63a7\u4ef6\u800c\u8a00\uff0c\u4f60\u5728\u4f7f\u7528 <code>JssProvider</code> \u6784\u5efa\u4e00\u4e2a <strong>subject\uff08\u5206\u652f\uff09</strong>\u3002</li>\n<li>\u60a8\u6b63\u5728\u4f7f\u7528\u6253\u5305\u6839\u636e\uff0c\u800c\u5b83\u62c6\u5206\u4ee3\u7801\u7684\u65b9\u5f0f\u5bfc\u81f4\u521b\u5efa\u4e86\u591a\u4e2a\u7c7b\u540d\u751f\u6210\u5668\u7684\u5b9e\u4f8b\u3002</li>\n<li>keyframes</li>\n</ul>\n<h2 id="how-do-i-use-react-router">\u6211\u5e94\u8be5\u4f55\u65f6\u4f7f\u7528\u5185\u8054\u6837\u5f0f\u4e0e CSS\uff1f<a aria-labelledby="how-do-i-use-react-router" class="anchor-link-style" href="#how-do-i-use-react-router" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>We detail the <a href="/zh/material-ui/guides/routing/">integration with third-party routing libraries</a> like react-router, Gatsby or Next.js in our guide.</p>\n<h2 id="how-can-i-access-the-dom-element">\u6211\u5e94\u8be5\u600e\u4e48\u4f7f\u7528 react-router\uff1f<a aria-labelledby="how-can-i-access-the-dom-element" class="anchor-link-style" href="#how-can-i-access-the-dom-element" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u6240\u6709\u5e94\u8be5\u5728 DOM \u4e2d\u6e32\u67d3\u5185\u5bb9\u7684 Material-UI \u7ec4\u4ef6\u90fd\u4f1a\u90fd\u5c06\u5176 ref \u8f6c\u53d1\u7ed9\u5e95\u5c42\u7684 DOM \u7ec4\u4ef6\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6\u9644\u52a0\u5728 Material-UI \u7ec4\u4ef6\u4e0a\u7684 ref \u6765\u83b7\u53d6 DOM \u5143\u7d20\u3002</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// \u6216\u8005\u4f7f\u7528\u4e00\u4e2a ref setter \u51fd\u6570</span>\n<span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// \u6e32\u67d3</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token comment">// \u4f7f\u7528</span>\n<span class="token keyword">const</span> element <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>If you&#39;re not sure if the MUI component in question forwards its ref you can check the API documentation under &quot;Props&quot; e.g. the <a href="/zh/material-ui/api/button/#props">Button API</a> includes</p>\n<aside class="MuiCallout-root MuiCallout-info"><p>The ref is forwarded to the root element.</p>\n\n</aside><p>indicating that you can access the DOM element with a ref.</p>\n<h2 id="i-have-several-instances-of-styles-on-the-page">\u6211\u5e94\u8be5\u600e\u4e48\u8bbf\u95ee DOM \u5143\u7d20\uff1f<a aria-labelledby="i-have-several-instances-of-styles-on-the-page" class="anchor-link-style" href="#i-have-several-instances-of-styles-on-the-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you are seeing a warning message in the console like the one below, you probably have several instances of <code>@mui/styles</code> initialized on the page.</p>\n<aside class="MuiCallout-root MuiCallout-warning"><p>It looks like there are several instances of <code>@mui/styles</code> initialized in this application. This may cause theme propagation issues, broken class names, specificity issues, and make your application bigger without a good reason.</p>\n\n</aside><h3 id="possible-reasons">\u53ef\u80fd\u7684\u539f\u56e0<a aria-labelledby="possible-reasons" class="anchor-link-style" href="#possible-reasons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>There are several common reasons for this to happen:</p>\n<ul>\n<li>\u81ea\u52a8\u524d\u7f00</li>\n<li>\u66f4\u597d\u5730\u8c03\u8bd5</li>\n<li>\u5a92\u4f53\u67e5\u8be2</li>\n</ul>\n<h3 id="duplicated-module-in-node-modules">\u5728 node_modules \u4e2d\u91cd\u590d\u7684\u6a21\u5757<a aria-labelledby="duplicated-module-in-node-modules" class="anchor-link-style" href="#duplicated-module-in-node-modules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you think that the issue may be in the duplication of the @mui/styles module somewhere in your dependencies, there are several ways to check this. You can use <code>npm ls @mui/styles</code>, <code>yarn list @mui/styles</code> or <code>find -L ./node_modules | grep /@mui/styles/package.json</code> commands in your application folder.</p>\n<p>If none of these commands identified the duplication, try analyzing your bundle for multiple instances of @mui/styles. You can just check your bundle source, or use a tool like <a href="https://github.com/danvk/source-map-explorer">source-map-explorer</a> or <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a>.</p>\n<p>If you identified that duplication is the issue that you are encountering there are several things you can try to solve it:</p>\n<p>If you are using npm you can try running <code>npm dedupe</code>. This command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.</p>\n<p>If you are using webpack, you can change the way it will <a href="https://webpack.js.org/configuration/resolve/#resolve-modules">resolve</a> the @mui/styles module. You can overwrite the default order in which webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> resolve: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   alias: {\n</span><span class="token prefix inserted">+</span><span class="token line">     "@mui/styles": path.resolve(appFolder, "node_modules", "@mui/styles"),\n</span><span class="token prefix inserted">+</span><span class="token line">   }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="usage-with-lerna">\u4e0e Lerna \u4e00\u8d77\u4f7f\u7528<a aria-labelledby="usage-with-lerna" class="anchor-link-style" href="#usage-with-lerna" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>One possible fix to get @mui/styles to run in a Lerna monorepo across packages is to <a href="https://github.com/lerna/lerna/blob/HEAD/doc/hoist.md">hoist</a> shared dependencies to the root of your monorepo file. Try running the bootstrap option with the --hoist flag.</p>\n<div class="MuiCode-root"><pre><code class="language-sh">lerna bootstrap <span class="token operator">--</span>hoist\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Alternatively, you can remove @mui/styles from your package.json file and hoist it manually to your top-level package.json file.</p>\n<p>Example of a package.json file in a Lerna root folder</p>\n<div class="MuiCode-root"><pre><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-monorepo"</span><span class="token punctuation">,</span>\n  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"lerna"</span><span class="token operator">:</span> <span class="token string">"latest"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"@mui/styles"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"bootstrap"</span><span class="token operator">:</span> <span class="token string">"lerna bootstrap"</span><span class="token punctuation">,</span>\n    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"lerna clean"</span><span class="token punctuation">,</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"lerna run start"</span><span class="token punctuation">,</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"lerna run build"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="running-multiple-applications-on-one-page">\u5728\u4e00\u4e2a\u9875\u9762\u4e0a\u8fd0\u884c\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f<a aria-labelledby="running-multiple-applications-on-one-page" class="anchor-link-style" href="#running-multiple-applications-on-one-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>If you have several applications running on one page, consider using one @mui/styles module for all of them. If you are using webpack, you can use <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">CommonsChunkPlugin</a> to create an explicit <a href="https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk">vendor chunk</a>, that will contain the @mui/styles module:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     vendor: ["@mui/styles"],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     app1: "./src/app.1.js",\n</span><span class="token prefix unchanged"> </span><span class="token line">     app2: "./src/app.2.js",\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new webpack.optimize.CommonsChunkPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       name: "vendor",\n</span><span class="token prefix inserted">+</span><span class="token line">       minChunks: Infinity,\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="my-app-doesnt-render-correctly-on-the-server">\u6211\u7684\u9875\u9762\u4e0a\u6709\u591a\u4e2a\u6837\u5f0f\u5b9e\u4f8b\u3002<a aria-labelledby="my-app-doesnt-render-correctly-on-the-server" class="anchor-link-style" href="#my-app-doesnt-render-correctly-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If it doesn&#39;t work, in 99% of cases it&#39;s a configuration issue. A missing property, a wrong call order, or a missing component \u2013 server-side rendering is strict about configuration.</p>\n<p>The best way to find out what&#39;s wrong is to compare your project to an <strong>already working setup</strong>. Check out the <a href="/zh/material-ui/guides/server-rendering/#reference-implementations">reference implementations</a>, bit by bit.</p>\n<h2 id="why-are-the-colors-i-am-seeing-different-from-what-i-see-here">\u6211\u7684\u5e94\u7528\u6ca1\u6709\u5728\u670d\u52a1\u5668\u4e0a\u6b63\u786e\u7684\u6e32\u67d3\u3002<a aria-labelledby="why-are-the-colors-i-am-seeing-different-from-what-i-see-here" class="anchor-link-style" href="#why-are-the-colors-i-am-seeing-different-from-what-i-see-here" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The documentation site is using a custom theme. Hence, the color palette is different from the default theme that MUI ships. Please refer to <a href="/zh/material-ui/customization/theming/">this page</a> to learn about theme customization.</p>\n<h2 id="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object">\u4e3a\u4ec0\u4e48\u6211\u770b\u5230\u7684\u989c\u8272\u548c\u6587\u6863\u8fd9\u91cc\u7684\u989c\u8272\u5927\u76f8\u5f84\u5ead\uff1f<a aria-labelledby="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" class="anchor-link-style" href="#why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Components like the <a href="/zh/base/api/portal/#props">Portal</a> or <a href="/zh/material-ui/api/popper/#props">Popper</a> require a DOM node in the <code>container</code> or <code>anchorEl</code> prop respectively. It seems convenient to simply pass a ref object in those props and let MUI access the current value. This works in a simple scenario:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> container <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>\u4f20\u9001\u95e8\u7684\u5b50\u7ec4\u4ef6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>where <code>Portal</code> would only mount the children into the container when <code>container.current</code> is available. Here is a naive implementation of Portal:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Portal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> container <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> setNode<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setNode</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>container<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>With this simple heuristic <code>Portal</code> might re-render after it mounts because refs are up-to-date before any effects run. However, just because a ref is up-to-date doesn&#39;t mean it points to a defined instance. If the ref is attached to a ref forwarding component it is not clear when the DOM node will be available. In the example above, the <code>Portal</code> would run an effect once, but might not re-render because <code>ref.current</code> is still <code>null</code>. This is especially apparent for React.lazy components in Suspense. The above implementation could also not account for a change in the DOM node.</p>\n<p>This is why we require a prop with the actual DOM node so that React can take care of determining when the <code>Portal</code> should re-render:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>container<span class="token punctuation">,</span> setContainer<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> handleRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setContainer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>setContainer<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>\u4f20\u9001\u7684\u5b50\u7ec4\u4ef6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="whats-the-clsx-dependency-for">\u4e3a\u4ec0\u4e48\u7ec4\u4ef6 X \u9700\u8981\u5c5e\u6027\u4e2d\u7684 DOM \u8282\u70b9\u800c\u4e0d\u662f\u4e00\u4e2a ref \u5bf9\u8c61\uff1f<a aria-labelledby="whats-the-clsx-dependency-for" class="anchor-link-style" href="#whats-the-clsx-dependency-for" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><a href="https://github.com/lukeed/clsx">clsx</a> is a tiny utility for constructing <code>className</code> strings conditionally, out of an object with keys being the class strings, and values being booleans.</p>\n<p>Instead of writing:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// let disabled = false, selected = true;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">MuiButton-root </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>disabled <span class="token operator">?</span> <span class="token string">\'Mui-disabled\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      selected <span class="token operator">?</span> <span class="token string">\'Mui-selected\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>you can do:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> clsx <span class="token keyword">from</span> <span class="token string">\'clsx\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">clsx</span><span class="token punctuation">(</span><span class="token string">\'MuiButton-root\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'Mui-disabled\'</span><span class="token operator">:</span> disabled<span class="token punctuation">,</span>\n      <span class="token string-property property">\'Mui-selected\'</span><span class="token operator">:</span> selected<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do">I cannot use components as selectors in the styled() utility. What should I do?<a aria-labelledby="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" class="anchor-link-style" href="#i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you are getting the error: <code>TypeError: Cannot convert a Symbol value to a string</code>, take a look at the <a href="/zh/system/styled/#how-to-use-components-selector-api">styled()</a> docs page for instructions on how you can fix this.</p>\n<h2 id="v4-why-arent-my-components-rendering-correctly-in-production-builds">I cannot use components as selectors in the styled() utility. What should I do?<a aria-labelledby="v4-why-arent-my-components-rendering-correctly-in-production-builds" class="anchor-link-style" href="#v4-why-arent-my-components-rendering-correctly-in-production-builds" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The #1 reason this happens is likely due to class name conflicts once your code is in a production bundle. For MUI to work, the <code>className</code> values of all components on a page must be generated by a single instance of the <a href="/zh/system/styles/advanced/#class-names">class name generator</a>.</p>\n<p>To correct this issue, all components on the page need to be initialized such that there is only ever <strong>one class name generator</strong> among them.</p>\n<p>You could end up accidentally using two class name generators in a variety of scenarios:</p>\n<ul>\n<li>\u6bd4\u5982\u4f60\u4e00\u4e0d\u5c0f\u5fc3 <strong>\u6253\u5305</strong>\u4e86 \u4e24\u4e2a\u7248\u672c\u7684 Material-UI\u3002 \u60a8\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u67d0\u4e2a\u548c material-ui \u7684\u540c\u7b49\u4f9d\u8d56\u7684\u4f9d\u8d56\u5305\u3002</li>\n<li>\u60a8\u7684\u9879\u76ee\u662f monorepo \u7ed3\u6784\uff08\u4f8b\u5982\uff0clerna\uff0cyarn workspaces\uff09\uff0c\u5e76\u4e14\u6709\u591a\u4e2a\u5305\u4f9d\u8d56\u7740 <code>@mui/styles</code> \u6a21\u5757\uff08\u8fd9\u4e0e\u524d\u4e00\u4e2a\u5305\u6216\u591a\u6216\u5c11\u76f8\u540c\uff09\u3002</li>\n<li>\u60a8\u6709\u51e0\u4e2a\u4f7f\u7528 <code>@mui/styles</code> \u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u540c\u4e00\u9875\u9762\u4e0a\u8fd0\u884c\uff08\u4f8b\u5982\uff0cwebpack \u4e2d\u7684\u51e0\u4e2a\u5165\u53e3\u70b9\u88ab\u52a0\u8f7d\u5728\u540c\u4e00\u9875\u9762\u4e0a\uff09\u3002</li>\n</ul>\n<aside class="MuiCallout-root MuiCallout-info"><p>\ud83d\udca1 If you are using webpack with the <a href="https://webpack.js.org/plugins/split-chunks-plugin/">SplitChunksPlugin</a>, try configuring the <a href="https://webpack.js.org/configuration/optimization/#optimization-runtimechunk"><code>runtimeChunk</code> setting under <code>optimizations</code></a>.</p>\n\n</aside><p>Overall, it&#39;s simple to recover from this problem by wrapping each MUI application with <a href="/zh/system/styles/api/#stylesprovider"><code>StylesProvider</code></a> components at the top of their component trees <strong>and using a single class name generator shared among them</strong>.</p>\n<h3 id="v4-css-works-only-on-first-load-and-goes-missing">CSS \u4ec5\u5728\u7b2c\u4e00\u6b21\u52a0\u8f7d\u65f6\u751f\u6548\uff0c\u7136\u540e\u5c31\u6d88\u5931\u4e86<a aria-labelledby="v4-css-works-only-on-first-load-and-goes-missing" class="anchor-link-style" href="#v4-css-works-only-on-first-load-and-goes-missing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The CSS is only generated on the first load of the page. Then, the CSS is missing on the server for consecutive requests.</p>\n<h4>\u8981\u8fd0\u884c\u7684\u64cd\u4f5c</h4><p>The styling solution relies on a cache, the <em>sheets manager</em>, to only inject the CSS once per component type (if you use two buttons, you only need the CSS of the button one time). You need to create <strong>a new <code>sheets</code> instance for each request</strong>.</p>\n<p>Example of fix:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">// Create a sheets instance.\n</span><span class="token prefix deleted">-</span><span class="token line">// \u521b\u5efa\u4e00\u4e2a sheets \u5b9e\u4f8b\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const sheets = new ServerStyleSheets();\n</span></span>\nfunction handleRender(req, res) {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // \u521b\u5efa\u4e00\u4e2a sheets \u5b9e\u4f8b\u3002\n</span><span class="token prefix inserted">+</span><span class="token line"> const sheets = new ServerStyleSheets();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> //\u2026\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // \u5c06\u7ec4\u4ef6\u6e32\u67d3\u4e3a\u5b57\u7b26\u4e32\u3002\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // Render the component to a string.\n</span><span class="token prefix unchanged"> </span><span class="token line"> const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="v4-react-class-name-hydration-mismatch">React \u7c7b\u540d\u6e32\u67d3\u4e0d\u5339\u914d<a aria-labelledby="v4-react-class-name-hydration-mismatch" class="anchor-link-style" href="#v4-react-class-name-hydration-mismatch" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><aside class="MuiCallout-root MuiCallout-warning"><p><strong>\u26a0\ufe0f Warning</strong></p>\n<p>Prop className did not match.</p>\n\n</aside><p>There is a class name mismatch between the client and the server. It might work for the first request. Another symptom is that the styling changes between initial page load and the downloading of the client scripts.</p>\n<h4>\u8981\u8fd0\u884c\u7684\u64cd\u4f5c</h4><p>The class names value relies on the concept of <a href="/zh/system/styles/advanced/#class-names">class name generator</a>. The whole page needs to be rendered with <strong>a single generator</strong>. This generator needs to behave identically on the server and on the client. For instance:</p>\n<ul>\n<li><p>\u60a8\u9700\u8981\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684\u7c7b\u540d\u751f\u6210\u5668\u3002 \u4f46\u662f\u60a8\u4e0d\u5e94\u8be5\u5728\u4e0d\u540c\u7684\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab <code>createGenerateClassName()</code>\uff1a</p>\n<p>\u4fee\u590d\u793a\u4f8b\uff1a</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7c7b\u540d\u751f\u6210\u5668\u3002\n</span><span class="token prefix deleted">-</span><span class="token line">const generateClassName = createGenerateClassName();\n</span></span>\nfunction handleRender(req, res) {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7c7b\u540d\u751f\u6210\u5668\u3002\n</span><span class="token prefix inserted">+</span><span class="token line"> const generateClassName = createGenerateClassName();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> //\u2026\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // Render the component to a string.\n</span><span class="token prefix unchanged"> </span><span class="token line"> const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>\u4f60\u9700\u8981\u9a8c\u8bc1\u4f60\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u8fd0\u884c\u7684 Material-UI \u7684<strong>\u7248\u672c</strong> \u662f\u5426\u5b8c\u5168\u76f8\u540c\u3002 \u5373\u4f7f\u662f\u5c0f\u5c0f\u7684\u7248\u672c\u7684\u4e0d\u5339\u914d\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6837\u5f0f\u95ee\u9898\u3002 \u82e5\u60f3\u68c0\u67e5\u7248\u672c\u53f7\uff0c\u60a8\u53ef\u4ee5\u5728\u642d\u5efa\u5e94\u7528\u7a0b\u5e8f\u7684\u73af\u5883\u4ee5\u53ca\u90e8\u7f72\u73af\u5883\u4e2d\u90fd\u8fd0\u884c <code>npm list @mui/core</code>\u3002</p>\n<p>\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728 package.json \u7684\u4f9d\u8d56\u9879\u4e2d\u6307\u5b9a\u67d0\u4e00\u4e2a\u7279\u5b9a\u7684 MUI \u7248\u672c\uff0c\u8fd9\u6837\u80fd\u591f\u786e\u4fdd\u5728\u4e0d\u540c\u73af\u5883\u4e2d\u4f7f\u7528\u7684\u7248\u672c\u662f\u4e00\u81f4\u7684\u3002</p>\n<p><em>\u4fee\u590d\uff08package.json\uff09\u7684\u793a\u4f8b\uff1a</em></p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   "@mui/material": "^4.0.0",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "@mui/material": "4.0.0",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span><span class="token prefix unchanged"> </span><span class="token line"> },</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>\u8bf7\u786e\u4fdd\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u4e4b\u95f4\u6240\u5171\u4eab\u7684\u662f\u76f8\u540c\u7684 <code>process.env.NODE_ENV</code> \u503c\u3002</p>\n</li>\n</ul>\n'],toc:[{text:"MUI is awesome. \u6211\u8be5\u5982\u4f55\u652f\u6301\u8be5\u9879\u76ee\uff1f How can I support the project?",level:2,hash:"mui-is-awesome-how-can-i-support-the-project",children:[]},{text:"\u4e3a\u4ec0\u4e48\u6211\u7684\u7ec4\u4ef6\u5728\u751f\u4ea7\u6784\u9020\u4e2d\u6ca1\u6709\u6b63\u786e\u5730\u6e32\u67d3\uff1f",level:2,hash:"why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened",children:[]},{text:"\u4e3a\u4ec0\u4e48\u5f53\u6253\u5f00\u4e00\u4e2a Modal\uff08\u6a21\u6001\u6846\uff09\u65f6\uff0c\u4f4d\u7f6e\u56fa\u5b9a\u7684\u5143\u7d20\u4f1a\u79fb\u52a8\uff1f",level:2,hash:"how-can-i-disable-the-ripple-effect-globally",children:[]},{text:"\u5982\u4f55\u5728\u5168\u5c40\u7981\u7528 ripple effect\uff08\u6d9f\u6f2a\u6548\u679c\uff09\uff1f",level:2,hash:"how-can-i-disable-transitions-globally",children:[]},{text:"Do I have to use Emotion to style my app?",level:2,hash:"do-i-have-to-use-emotion-to-style-my-app",children:[]},{text:"\u6211\u662f\u5426\u5fc5\u987b\u4f7f\u7528 JSS \u7ed9\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bbe\u7f6e\u6837\u5f0f\u5462\uff1f",level:2,hash:"when-should-i-use-inline-style-vs-css",children:[]},{text:"\u6211\u5e94\u8be5\u4f55\u65f6\u4f7f\u7528\u5185\u8054\u6837\u5f0f\u4e0e CSS\uff1f",level:2,hash:"how-do-i-use-react-router",children:[]},{text:"\u6211\u5e94\u8be5\u600e\u4e48\u4f7f\u7528 react-router\uff1f",level:2,hash:"how-can-i-access-the-dom-element",children:[]},{text:"\u6211\u5e94\u8be5\u600e\u4e48\u8bbf\u95ee DOM \u5143\u7d20\uff1f",level:2,hash:"i-have-several-instances-of-styles-on-the-page",children:[{text:"\u53ef\u80fd\u7684\u539f\u56e0",level:3,hash:"possible-reasons"},{text:"\u5728 node_modules \u4e2d\u91cd\u590d\u7684\u6a21\u5757",level:3,hash:"duplicated-module-in-node-modules"},{text:"\u4e0e Lerna \u4e00\u8d77\u4f7f\u7528",level:3,hash:"usage-with-lerna"},{text:"\u5728\u4e00\u4e2a\u9875\u9762\u4e0a\u8fd0\u884c\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f",level:3,hash:"running-multiple-applications-on-one-page"}]},{text:"\u6211\u7684\u9875\u9762\u4e0a\u6709\u591a\u4e2a\u6837\u5f0f\u5b9e\u4f8b\u3002",level:2,hash:"my-app-doesnt-render-correctly-on-the-server",children:[]},{text:"\u6211\u7684\u5e94\u7528\u6ca1\u6709\u5728\u670d\u52a1\u5668\u4e0a\u6b63\u786e\u7684\u6e32\u67d3\u3002",level:2,hash:"why-are-the-colors-i-am-seeing-different-from-what-i-see-here",children:[]},{text:"\u4e3a\u4ec0\u4e48\u6211\u770b\u5230\u7684\u989c\u8272\u548c\u6587\u6863\u8fd9\u91cc\u7684\u989c\u8272\u5927\u76f8\u5f84\u5ead\uff1f",level:2,hash:"why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object",children:[]},{text:"\u4e3a\u4ec0\u4e48\u7ec4\u4ef6 X \u9700\u8981\u5c5e\u6027\u4e2d\u7684 DOM \u8282\u70b9\u800c\u4e0d\u662f\u4e00\u4e2a ref \u5bf9\u8c61\uff1f",level:2,hash:"whats-the-clsx-dependency-for",children:[]},{text:"I cannot use components as selectors in the styled(&#8203;) utility. What should I do?",level:2,hash:"i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do",children:[]},{text:"I cannot use components as selectors in the styled(&#8203;) utility. What should I do?",level:2,hash:"v4-why-arent-my-components-rendering-correctly-in-production-builds",children:[{text:"CSS \u4ec5\u5728\u7b2c\u4e00\u6b21\u52a0\u8f7d\u65f6\u751f\u6548\uff0c\u7136\u540e\u5c31\u6d88\u5931\u4e86",level:3,hash:"v4-css-works-only-on-first-load-and-goes-missing"},{text:"React \u7c7b\u540d\u6e32\u67d3\u4e0d\u5339\u914d",level:3,hash:"v4-react-class-name-hydration-mismatch"}]}],title:"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54",headers:{components:[]}}},p={},c={},i=s(824246);function l(){return e||(e=(0,i.jsx)(t.Z,{demos:p,docs:o,demoComponents:c}))}},678934:function(n,a,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/getting-started/faq",function(){return s(251623)}])}},function(n){n.O(0,[75760,31194,91642,35408,85992,51588,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,49774,92888,40179],(function(){return a=678934,n(n.s=a);var a}));var a=n.O();_N_E=a}]);