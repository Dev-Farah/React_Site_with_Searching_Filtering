(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[24927],{737431:function(n,e,s){"use strict";s.r(e),s.d(e,{default:function(){return c}});s(827378);var a,t=s(494616),o={en:{description:"An overview of the MUI packages and the relationships between them.",location:"/docs/data/material/guides/understand-mui-packages/understand-mui-packages.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Understanding MUI packages</h1><p class="description">An overview of the MUI packages and the relationships between them.</p>\n\n<h2 id="overview">Overview<a aria-labelledby="overview" class="anchor-link-style" href="#overview" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li>If you want to build a design system based on Material Design, use <code>@mui/material</code>.</li>\n<li>If you want to build with components that give you complete control over your app&#39;s CSS, use <code>@mui/base</code>.</li>\n<li>For CSS utilities to help in laying out custom designs with Material UI or MUI Base, use <code>@mui/system</code>.</li>\n</ul>\n<h3 id="glossary">Glossary<a aria-labelledby="glossary" class="anchor-link-style" href="#glossary" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><ul>\n<li><strong>install</strong> refers to running <code>yarn add $module</code> or <code>npm install $module</code>.</li>\n<li><strong>import</strong> refers to making a module API available in your code by adding <code>import ... from &#39;$module&#39;</code>.</li>\n</ul>\n<h2 id="mui-packages">MUI packages<a aria-labelledby="mui-packages" class="anchor-link-style" href="#mui-packages" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The following is an up-to-date list of <code>@mui</code> public packages.</p>\n<ul>\n<li><code>@mui/material</code></li>\n<li><code>@mui/base</code></li>\n<li><code>@mui/system</code></li>\n<li><code>@mui/styled-engine</code></li>\n<li><code>@mui/styled-engine-sc</code></li>\n<li><code>@mui/styles</code></li>\n</ul>\n<h3 id="understanding-muis-products">Understanding MUI&#39;s products<a aria-labelledby="understanding-muis-products" class="anchor-link-style" href="#understanding-muis-products" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>As a company, MUI maintains a suite of open-source and open-core React UI projects.\nThese projects live within two product lines: MUI Core and MUI X.</p>\n<p>The following chart illustrates how MUI&#39;s packages are related to one another:</p>\n<img src="/static/images/packages/mui-packages.png" style="width: 796px; margin-top: 4px; margin-bottom: 8px;" alt="The first half of the image shows @mui/material and @mui/base as component libraries, and @mui/system and styled engines as styling solutions, both under the MUI Core umbrella. The second half shows @mui/x-data-grid and @mui/x-date-pickers as components from MUI X."/>\n\n<p>In this article, we&#39;ll only cover the MUI Core packages.\nVisit the <a href="/x/introduction/">MUI X Overview</a> for more information about our collection of advanced components.</p>\n<h2 id="component-libraries">Component libraries<a aria-labelledby="component-libraries" class="anchor-link-style" href="#component-libraries" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="material-ui">Material UI<a aria-labelledby="material-ui" class="anchor-link-style" href="#material-ui" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Material UI is a comprehensive library of components that features our implementation of Google&#39;s Material Design.</p>\n<p><code>@mui/system</code> is included as dependency, meaning you don&#39;t need to install or import it separately\u2014you can import its components and functions directly from <code>@mui/material</code>.</p>\n<h3 id="mui-base">MUI Base<a aria-labelledby="mui-base" class="anchor-link-style" href="#mui-base" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p><a href="/base/getting-started/overview/">MUI Base</a> is our library of &quot;unstyled&quot; components and hooks.\nWith Base, you gain complete control over your app&#39;s CSS and accessibility features.</p>\n<p>The Base package includes prebuilt components with production-ready functionality, along with low-level hooks for transferring that functionality to other components.</p>\n<h3 id="using-them-together">Using them together<a aria-labelledby="using-them-together" class="anchor-link-style" href="#using-them-together" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Imagine you&#39;re working on an application that uses <code>@mui/material</code> with a custom theme, and you need to develop a new switch component that looks very different from the one found in Material Design.</p>\n<p>In this case, instead of overriding all the styles on the Material UI <code>Switch</code> component, you can use the <code>styled</code> API to customize the Base <code>SwitchUnstyled</code> component from scratch:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> SwitchUnstyled<span class="token punctuation">,</span> <span class="token punctuation">{</span> switchUnstyledClasses <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/SwitchUnstyled\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Root <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'span\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n\n  &amp; .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>switchUnstyledClasses<span class="token punctuation">.</span>track<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {\n    // ...css\n  }\n\n  &amp; .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>switchUnstyledClasses<span class="token punctuation">.</span>thumb<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {\n    // ...css\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CustomSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">componentsProps</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'aria-label\'</span><span class="token operator">:</span> <span class="token string">\'Demo switch\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SwitchUnstyled</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Root<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>label<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="styling">Styling<a aria-labelledby="styling" class="anchor-link-style" href="#styling" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="styled-engines">Styled engines<a aria-labelledby="styled-engines" class="anchor-link-style" href="#styled-engines" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Material UI relies on styling engines to inject CSS into your app.\nThese engines come in two packages:</p>\n<ul>\n<li><code>@mui/styled-engine</code></li>\n<li><code>@mui/styled-engine-sc</code></li>\n</ul>\n<p>By default, Material UI uses <a href="https://emotion.sh/docs/styled">Emotion</a> as its styling engine\u2014it&#39;s included in the <a href="/material-ui/getting-started/installation/">installation</a> process.\nIf you plan to stick with Emotion, then <code>@mui/styled-engine</code> is a dependency in your app, and you don&#39;t need to install it separately.</p>\n<p>If you prefer to use <a href="https://styled-components.com/docs/basics#getting-started">styled-components</a>, then you need to install <code>@mui/styled-engine-sc</code> in place of the Emotion packages.\nSee the <a href="/material-ui/guides/styled-engine/">Styled engine guide</a> for more details.</p>\n<p>In either case, you won&#39;t interact much with either of these packages beyond installation\u2014they&#39;re used internally in <code>@mui/system</code>.</p>\n<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0 <strong>Note:</strong> prior to v5, Material UI used <code>@mui/styles</code> as a JSS wrapper.\nThis package is now deprecated and will be removed in the future.\nCheck out <a href="/material-ui/migration/migration-v4/">the guide to migrating from v4 to v5</a> to learn how to upgrade to a newer solution.</p>\n\n</aside><h3 id="mui-system">MUI System<a aria-labelledby="mui-system" class="anchor-link-style" href="#mui-system" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>MUI System is a collection of CSS utilities to help you rapidly lay out custom designs.\nIt uses the Emotion adapter (<code>@mui/styled-engine</code>) as the default style engine to create the CSS utilities.</p>\n<h4>Advantages of MUI System</h4><ul>\n<li>You have full control of the <code>theme</code> object.</li>\n<li>You can use <code>sx</code> prop normally as the <code>styled</code> API supports it by default.</li>\n<li>You can have themeable components by using <code>styled</code> via slots and variants.</li>\n</ul>\n<aside class="MuiCallout-root MuiCallout-warning"><p>To use MUI System, you must install either Emotion or styled-components, because the respective <code>styled-engine</code> package depends on it.</p>\n\n</aside><img src="/static/images/packages/mui-system.png" style="width: 796px; margin-top: 4px; margin-bottom: 8px;" alt="A diagram showing an arrow going from @mui/system to @mui/styled-engine, with a note that it is the default engine. Then, from @mui/styled-engine a solid arrow points to @emotion/react and @emotion/styled while a dashed arrow points to @mui/styled-engine-sc, which points to styled-components." />\n'],toc:[{text:"Overview",level:2,hash:"overview",children:[{text:"Glossary",level:3,hash:"glossary"}]},{text:"MUI packages",level:2,hash:"mui-packages",children:[{text:"Understanding MUI&#39;s products",level:3,hash:"understanding-muis-products"}]},{text:"Component libraries",level:2,hash:"component-libraries",children:[{text:"Material UI",level:3,hash:"material-ui"},{text:"MUI Base",level:3,hash:"mui-base"},{text:"Using them together",level:3,hash:"using-them-together"}]},{text:"Styling",level:2,hash:"styling",children:[{text:"Styled engines",level:3,hash:"styled-engines"},{text:"MUI System",level:3,hash:"mui-system"}]}],title:"Understanding MUI packages",headers:{components:[]}},pt:{description:"An overview of the MUI packages and the relationships between them.",location:"/docs/data/material/guides/understand-mui-packages/understand-mui-packages-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Understanding MUI packages</h1><p class="description">An overview of the MUI packages and the relationships between them.</p>\n\n<h2 id="overview">Overview<a aria-labelledby="overview" class="anchor-link-style" href="#overview" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li>If you want to build a design system based on Material Design, use <code>@mui/material</code>.</li>\n<li>If you want to build with components that give you complete control over your app&#39;s CSS, use <code>@mui/base</code>.</li>\n<li>For CSS utilities to help in laying out custom designs with Material UI or MUI Base, use <code>@mui/system</code>.</li>\n</ul>\n<h3 id="glossary">Glossary<a aria-labelledby="glossary" class="anchor-link-style" href="#glossary" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><ul>\n<li><strong>install</strong> refers to running <code>yarn add $module</code> or <code>npm install $module</code>.</li>\n<li><strong>import</strong> refers to making a module API available in your code by adding <code>import ... from &#39;$module&#39;</code>.</li>\n</ul>\n<h2 id="mui-packages">MUI packages<a aria-labelledby="mui-packages" class="anchor-link-style" href="#mui-packages" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The following is an up-to-date list of <code>@mui</code> public packages.</p>\n<ul>\n<li><code>@mui/material</code></li>\n<li><code>@mui/base</code></li>\n<li><code>@mui/system</code></li>\n<li><code>@mui/styled-engine</code></li>\n<li><code>@mui/styled-engine-sc</code></li>\n<li><code>@mui/styles</code></li>\n</ul>\n<h3 id="understanding-muis-products">Understanding MUI&#39;s products<a aria-labelledby="understanding-muis-products" class="anchor-link-style" href="#understanding-muis-products" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>As a company, MUI maintains a suite of open-source and open-core React UI projects. These projects live within two product lines: MUI Core and MUI X.</p>\n<p>The following chart illustrates how MUI&#39;s packages are related to one another:</p>\n<img src="/static/images/packages/mui-packages.png" style="width: 796px; margin-top: 4px; margin-bottom: 8px;" alt="The first half of the image shows @mui/material and @mui/base as component libraries, and @mui/system and styled engines as styling solutions, both under the MUI Core umbrella. The second half shows @mui/x-data-grid and @mui/x-date-pickers as components from MUI X." />\n\n<p>In this article, we&#39;ll only cover the MUI Core packages. Visit the <a href="/pt/x/introduction/">MUI X Overview</a> for more information about our collection of advanced components.</p>\n<h2 id="component-libraries">Component libraries<a aria-labelledby="component-libraries" class="anchor-link-style" href="#component-libraries" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="material-ui">Material UI<a aria-labelledby="material-ui" class="anchor-link-style" href="#material-ui" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Material UI is a comprehensive library of components that features our implementation of Google&#39;s Material Design.</p>\n<p><code>@mui/system</code> is included as dependency, meaning you don&#39;t need to install or import it separately\u2014you can import its components and functions directly from <code>@mui/material</code>.</p>\n<h3 id="mui-base">MUI Base<a aria-labelledby="mui-base" class="anchor-link-style" href="#mui-base" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p><a href="/pt/base/getting-started/overview/">MUI Base</a> is our library of &quot;unstyled&quot; components and hooks. With Base, you gain complete control over your app&#39;s CSS and accessibility features.</p>\n<p>The Base package includes prebuilt components with production-ready functionality, along with low-level hooks for transferring that functionality to other components.</p>\n<h3 id="using-them-together">Using them together<a aria-labelledby="using-them-together" class="anchor-link-style" href="#using-them-together" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Imagine you&#39;re working on an application that uses <code>@mui/material</code> with a custom theme, and you need to develop a new switch component that looks very different from the one found in Material Design.</p>\n<p>In this case, instead of overriding all the styles on the Material UI <code>Switch</code> component, you can use the <code>styled</code> API to customize the Base <code>SwitchUnstyled</code> component from scratch:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> SwitchUnstyled<span class="token punctuation">,</span> <span class="token punctuation">{</span> switchUnstyledClasses <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/SwitchUnstyled\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Root <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'span\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n\n  &amp; .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>switchUnstyledClasses<span class="token punctuation">.</span>track<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {\n    // ...css\n  }\n\n  &amp; .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>switchUnstyledClasses<span class="token punctuation">.</span>thumb<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {\n    // ...css\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CustomSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">componentsProps</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'aria-label\'</span><span class="token operator">:</span> <span class="token string">\'Demo switch\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SwitchUnstyled</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Root<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>label<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="styling">Styling<a aria-labelledby="styling" class="anchor-link-style" href="#styling" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="styled-engines">Styled engines<a aria-labelledby="styled-engines" class="anchor-link-style" href="#styled-engines" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Material UI relies on styling engines to inject CSS into your app. These engines come in two packages:</p>\n<ul>\n<li><code>@mui/styled-engine</code></li>\n<li><code>@mui/styled-engine-sc</code></li>\n</ul>\n<p>By default, Material UI uses <a href="https://emotion.sh/docs/styled">Emotion</a> as its styling engine\u2014it&#39;s included in the <a href="/pt/material-ui/getting-started/installation/">installation</a> process. If you plan to stick with Emotion, then <code>@mui/styled-engine</code> is a dependency in your app, and you don&#39;t need to install it separately.</p>\n<p>If you prefer to use <a href="https://styled-components.com/docs/basics#getting-started">styled-components</a>, then you need to install <code>@mui/styled-engine-sc</code> in place of the Emotion packages. See the <a href="/pt/material-ui/guides/styled-engine/">Styled engine guide</a> for more details.</p>\n<p>In either case, you won&#39;t interact much with either of these packages beyond installation\u2014they&#39;re used internally in <code>@mui/system</code>.</p>\n<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0 <strong>Note:</strong> prior to v5, Material UI used <code>@mui/styles</code> as a JSS wrapper. This package is now deprecated and will be removed in the future. Check out <a href="/pt/material-ui/migration/migration-v4/">the guide to migrating from v4 to v5</a> to learn how to upgrade to a newer solution.</p>\n\n</aside><h3 id="mui-system">MUI System<a aria-labelledby="mui-system" class="anchor-link-style" href="#mui-system" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>MUI System is a collection of CSS utilities to help you rapidly lay out custom designs. It uses the Emotion adapter (<code>@mui/styled-engine</code>) as the default style engine to create the CSS utilities.</p>\n<h4>Advantages of MUI System</h4><ul>\n<li>You have full control of the <code>theme</code> object.</li>\n<li>You can use <code>sx</code> prop normally as the <code>styled</code> API supports it by default.</li>\n<li>You can have themeable components by using <code>styled</code> via slots and variants.</li>\n</ul>\n<aside class="MuiCallout-root MuiCallout-warning"><p>To use MUI System, you must install either Emotion or styled-components, because the respective <code>styled-engine</code> package depends on it.</p>\n\n</aside><img src="/static/images/packages/mui-system.png" style="width: 796px; margin-top: 4px; margin-bottom: 8px;" alt="A diagram showing an arrow going from @mui/system to @mui/styled-engine, with a note that it is the default engine. Then, from @mui/styled-engine a solid arrow points to @emotion/react and @emotion/styled while a dashed arrow points to @mui/styled-engine-sc, which points to styled-components." />\n'],toc:[{text:"Overview",level:2,hash:"overview",children:[{text:"Glossary",level:3,hash:"glossary"}]},{text:"MUI packages",level:2,hash:"mui-packages",children:[{text:"Understanding MUI&#39;s products",level:3,hash:"understanding-muis-products"}]},{text:"Component libraries",level:2,hash:"component-libraries",children:[{text:"Material UI",level:3,hash:"material-ui"},{text:"MUI Base",level:3,hash:"mui-base"},{text:"Using them together",level:3,hash:"using-them-together"}]},{text:"Styling",level:2,hash:"styling",children:[{text:"Styled engines",level:3,hash:"styled-engines"},{text:"MUI System",level:3,hash:"mui-system"}]}],title:"Understanding MUI packages",headers:{components:[]}},zh:{description:"An overview of the MUI packages and the relationships between them.",location:"/docs/data/material/guides/understand-mui-packages/understand-mui-packages-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Understanding MUI packages</h1><p class="description">An overview of the MUI packages and the relationships between them.</p>\n\n<h2 id="overview">Overview<a aria-labelledby="overview" class="anchor-link-style" href="#overview" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li>If you want to build a design system based on Material Design, use <code>@mui/material</code>.</li>\n<li>If you want to build with components that give you complete control over your app&#39;s CSS, use <code>@mui/base</code>.</li>\n<li>For CSS utilities to help in laying out custom designs with Material UI or MUI Base, use <code>@mui/system</code>.</li>\n</ul>\n<h3 id="glossary">Glossary<a aria-labelledby="glossary" class="anchor-link-style" href="#glossary" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><ul>\n<li><strong>install</strong> refers to running <code>yarn add $module</code> or <code>npm install $module</code>.</li>\n<li><strong>import</strong> refers to making a module API available in your code by adding <code>import ... from &#39;$module&#39;</code>.</li>\n</ul>\n<h2 id="mui-packages">MUI packages<a aria-labelledby="mui-packages" class="anchor-link-style" href="#mui-packages" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The following is an up-to-date list of <code>@mui</code> public packages.</p>\n<ul>\n<li><code>@mui/material</code></li>\n<li><code>@mui/base</code></li>\n<li><code>@mui/system</code></li>\n<li><code>@mui/styled-engine</code></li>\n<li><code>@mui/styled-engine-sc</code></li>\n<li><code>@mui/styles</code></li>\n</ul>\n<h3 id="understanding-muis-products">Understanding MUI&#39;s products<a aria-labelledby="understanding-muis-products" class="anchor-link-style" href="#understanding-muis-products" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>As a company, MUI maintains a suite of open-source and open-core React UI projects. These projects live within two product lines: MUI Core and MUI X.</p>\n<p>The following chart illustrates how MUI&#39;s packages are related to one another:</p>\n<img src="/static/images/packages/mui-packages.png" style="width: 796px; margin-top: 4px; margin-bottom: 8px;" alt="The first half of the image shows @mui/material and @mui/base as component libraries, and @mui/system and styled engines as styling solutions, both under the MUI Core umbrella. The second half shows @mui/x-data-grid and @mui/x-date-pickers as components from MUI X." />\n\n<p>In this article, we&#39;ll only cover the MUI Core packages. Visit the <a href="/zh/x/introduction/">MUI X Overview</a> for more information about our collection of advanced components.</p>\n<h2 id="component-libraries">Component libraries<a aria-labelledby="component-libraries" class="anchor-link-style" href="#component-libraries" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="material-ui">Material UI<a aria-labelledby="material-ui" class="anchor-link-style" href="#material-ui" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Material UI is a comprehensive library of components that features our implementation of Google&#39;s Material Design.</p>\n<p><code>@mui/system</code> is included as dependency, meaning you don&#39;t need to install or import it separately\u2014you can import its components and functions directly from <code>@mui/material</code>.</p>\n<h3 id="mui-base">MUI Base<a aria-labelledby="mui-base" class="anchor-link-style" href="#mui-base" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p><a href="/zh/base/getting-started/overview/">MUI Base</a> is our library of &quot;unstyled&quot; components and hooks. With Base, you gain complete control over your app&#39;s CSS and accessibility features.</p>\n<p>The Base package includes prebuilt components with production-ready functionality, along with low-level hooks for transferring that functionality to other components.</p>\n<h3 id="using-them-together">Using them together<a aria-labelledby="using-them-together" class="anchor-link-style" href="#using-them-together" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Imagine you&#39;re working on an application that uses <code>@mui/material</code> with a custom theme, and you need to develop a new switch component that looks very different from the one found in Material Design.</p>\n<p>In this case, instead of overriding all the styles on the Material UI <code>Switch</code> component, you can use the <code>styled</code> API to customize the Base <code>SwitchUnstyled</code> component from scratch:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> SwitchUnstyled<span class="token punctuation">,</span> <span class="token punctuation">{</span> switchUnstyledClasses <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/base/SwitchUnstyled\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Root <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">\'span\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n\n  &amp; .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>switchUnstyledClasses<span class="token punctuation">.</span>track<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {\n    // ...css\n  }\n\n  &amp; .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>switchUnstyledClasses<span class="token punctuation">.</span>thumb<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {\n    // ...css\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CustomSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">componentsProps</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'aria-label\'</span><span class="token operator">:</span> <span class="token string">\'Demo switch\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SwitchUnstyled</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Root<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>label<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="styling">Styling<a aria-labelledby="styling" class="anchor-link-style" href="#styling" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="styled-engines">Styled engines<a aria-labelledby="styled-engines" class="anchor-link-style" href="#styled-engines" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Material UI relies on styling engines to inject CSS into your app. These engines come in two packages:</p>\n<ul>\n<li><code>@mui/styled-engine</code></li>\n<li><code>@mui/styled-engine-sc</code></li>\n</ul>\n<p>By default, Material UI uses <a href="https://emotion.sh/docs/styled">Emotion</a> as its styling engine\u2014it&#39;s included in the <a href="/zh/material-ui/getting-started/installation/">installation</a> process. If you plan to stick with Emotion, then <code>@mui/styled-engine</code> is a dependency in your app, and you don&#39;t need to install it separately.</p>\n<p>If you prefer to use <a href="https://styled-components.com/docs/basics#getting-started">styled-components</a>, then you need to install <code>@mui/styled-engine-sc</code> in place of the Emotion packages. See the <a href="/zh/material-ui/guides/styled-engine/">Styled engine guide</a> for more details.</p>\n<p>In either case, you won&#39;t interact much with either of these packages beyond installation\u2014they&#39;re used internally in <code>@mui/system</code>.</p>\n<aside class="MuiCallout-root MuiCallout-warning"><p>\u26a0 <strong>Note:</strong> prior to v5, Material UI used <code>@mui/styles</code> as a JSS wrapper. This package is now deprecated and will be removed in the future. Check out <a href="/zh/material-ui/migration/migration-v4/">the guide to migrating from v4 to v5</a> to learn how to upgrade to a newer solution.</p>\n\n</aside><h3 id="mui-system">MUI System<a aria-labelledby="mui-system" class="anchor-link-style" href="#mui-system" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>MUI System is a collection of CSS utilities to help you rapidly lay out custom designs. It uses the Emotion adapter (<code>@mui/styled-engine</code>) as the default style engine to create the CSS utilities.</p>\n<h4>Advantages of MUI System</h4><ul>\n<li>You have full control of the <code>theme</code> object.</li>\n<li>You can use <code>sx</code> prop normally as the <code>styled</code> API supports it by default.</li>\n<li>You can have themeable components by using <code>styled</code> via slots and variants.</li>\n</ul>\n<aside class="MuiCallout-root MuiCallout-warning"><p>To use MUI System, you must install either Emotion or styled-components, because the respective <code>styled-engine</code> package depends on it.</p>\n\n</aside><img src="/static/images/packages/mui-system.png" style="width: 796px; margin-top: 4px; margin-bottom: 8px;" alt="A diagram showing an arrow going from @mui/system to @mui/styled-engine, with a note that it is the default engine. Then, from @mui/styled-engine a solid arrow points to @emotion/react and @emotion/styled while a dashed arrow points to @mui/styled-engine-sc, which points to styled-components." />\n'],toc:[{text:"Overview",level:2,hash:"overview",children:[{text:"Glossary",level:3,hash:"glossary"}]},{text:"MUI packages",level:2,hash:"mui-packages",children:[{text:"Understanding MUI&#39;s products",level:3,hash:"understanding-muis-products"}]},{text:"Component libraries",level:2,hash:"component-libraries",children:[{text:"Material UI",level:3,hash:"material-ui"},{text:"MUI Base",level:3,hash:"mui-base"},{text:"Using them together",level:3,hash:"using-them-together"}]},{text:"Styling",level:2,hash:"styling",children:[{text:"Styled engines",level:3,hash:"styled-engines"},{text:"MUI System",level:3,hash:"mui-system"}]}],title:"Understanding MUI packages",headers:{components:[]}}},i={},l={},p=s(824246);function c(){return a||(a=(0,p.jsx)(t.Z,{demos:i,docs:o,demoComponents:l}))}},737808:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/guides/understand-mui-packages",function(){return s(737431)}])}},function(n){n.O(0,[75760,31194,91642,35408,85992,51588,79125,93899,63978,54328,82744,20365,51990,37637,26035,8726,11486,10552,67414,47093,84445,77756,94616,49774,92888,40179],(function(){return e=737808,n(n.s=e);var e}));var e=n.O();_N_E=e}]);